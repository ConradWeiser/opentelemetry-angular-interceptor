var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/injectables/B3PropagatorService.html",[0,0.337,1,1.817]],["body/injectables/B3PropagatorService.html",[0,0.518,1,3.224,2,1.268,3,0.529,4,0.529,5,0.41,6,0.448,7,4.073,8,1.815,9,0.529,10,0.41,11,1.229,12,2.913,13,0.887,14,2.79,15,1.292,16,2.542,17,0.972,18,0.035,19,3.004,20,0.682,21,0.593,22,2.093,23,2.212,24,1.815,25,2.469,26,1.268,27,1.268,28,0.529,29,0.972,30,1.268,31,0.731,32,0.021,33,0.026,34,0.021]],["title/interfaces/CommonCollectorConfig.html",[35,0.663,36,1.359]],["body/interfaces/CommonCollectorConfig.html",[3,0.341,4,0.341,5,0.264,6,0.228,9,0.341,10,0.264,16,1.066,18,0.035,20,0.302,21,0.382,28,0.753,31,0.471,32,0.013,33,0.019,34,0.013,35,1.04,36,1.829,37,0.975,38,1.066,39,1.066,40,1.702,41,1.498,42,1.702,43,1.915,44,1.563,45,2.153,46,2.442,47,2.442,48,1.869,49,2.036,50,1.707,51,2.675,52,1.836,53,2.425,54,1.552,55,2.073,56,2.073,57,2.689,58,0.997,59,1.189,60,1.425,61,1.873,62,1.53,63,1.53,64,1.552,65,1.066,66,1.17,67,0.817,68,0.892,69,1.17,70,1.17,71,1.552,72,2.008,73,1.089,74,1.418,75,1.287,76,1.552,77,1.702,78,1.702,79,1.552,80,1.287,81,0.831,82,1.873,83,1.873,84,1.702,85,1.702,86,0.911,87,0.626,88,1.287,89,1.287,90,1.287]],["title/injectables/CompositePropagatorService.html",[0,0.337,91,1.817]],["body/injectables/CompositePropagatorService.html",[0,0.511,2,1.24,3,0.517,4,0.517,5,0.401,6,0.442,8,1.774,9,0.517,10,0.401,11,1.211,12,2.888,13,0.867,14,2.727,15,1.281,16,2.063,17,0.95,18,0.035,19,2.983,20,0.677,21,0.58,22,2.063,23,2.162,24,1.774,25,2.413,26,1.24,27,1.24,28,0.517,29,0.95,30,1.24,31,1.004,32,0.02,33,0.026,34,0.02,67,1.581,69,2.771,91,3.197,92,4.014,93,3.786]],["title/injectables/ConsoleSpanExporterService.html",[0,0.337,94,2.027]],["body/injectables/ConsoleSpanExporterService.html",[0,0.516,2,1.258,3,0.524,4,0.524,5,0.406,6,0.446,9,0.524,10,0.406,11,1.222,13,0.879,15,1.288,17,0.964,18,0.035,20,0.647,21,0.588,26,1.258,27,1.258,28,0.524,29,0.964,30,1.258,31,0.725,32,0.021,33,0.026,34,0.021,73,1.461,94,3.587,95,4.051,96,3.214,97,1.8,98,2.782,99,2.903,100,3.841,101,2.903,102,2.722,103,2.082,104,2.193,105,1.8]],["title/injectables/HttpTextPropagatorService.html",[0,0.337,106,2.027]],["body/injectables/HttpTextPropagatorService.html",[0,0.418,1,3.097,2,0.921,3,0.384,4,0.384,5,0.298,6,0.362,8,1.318,9,0.384,10,0.298,11,0.992,12,2.56,13,0.644,15,0.905,17,0.705,18,0.035,19,2.36,20,0.687,21,0.43,22,1.954,23,1.605,24,1.318,26,0.921,27,0.921,28,0.54,29,0.705,30,0.921,32,0.015,33,0.021,34,0.015,41,1.186,48,1.94,52,1.098,59,1.498,65,1.201,67,0.921,68,1.414,73,0.843,81,0.905,86,0.992,87,1.245,91,3.097,106,3.163,107,2.52,108,2.36,109,3.288,110,3.907,111,2.812,112,2.848,113,2.848,114,1.318,115,3.097,116,2.848,117,1.45,118,4.126,119,3.097,120,3.288,121,2.337,122,3.295,123,2.337,124,2.337,125,2.337,126,1.792,127,2.698,128,2.025,129,2.337,130,2.337,131,2.812,132,3.803,133,2.337,134,4.126,135,2.812,136,2.812]],["title/injectables/HttpTraceContextPropagatorService.html",[0,0.337,115,1.817]],["body/injectables/HttpTraceContextPropagatorService.html",[0,0.515,2,1.254,3,0.523,4,0.523,5,0.405,6,0.445,8,1.794,9,0.523,10,0.405,11,1.22,12,2.9,13,0.876,14,2.758,15,1.287,17,0.961,18,0.035,19,2.994,20,0.679,21,0.586,22,2.078,23,2.187,24,1.794,25,2.44,26,1.254,27,1.254,28,0.523,29,0.961,30,1.254,31,0.723,32,0.021,33,0.026,34,0.021,52,1.899,67,1.942,107,3.099,115,3.211,117,2.509]],["title/interfaces/IExporter.html",[35,0.663,103,1.359]],["body/interfaces/IExporter.html",[3,0.562,4,0.562,5,0.435,6,0.465,9,0.562,10,0.435,11,1.276,13,0.941,15,0.941,17,1.032,18,0.034,20,0.497,28,0.562,32,0.022,33,0.027,34,0.022,35,1.15,37,1.606,73,1.525,98,3.294,99,2.976,102,2.868,103,2.173,105,1.927,137,3.419,138,3.663,139,4.113,140,3.663,141,5.086]],["title/interfaces/IPropagator.html",[22,1.359,35,0.663]],["body/interfaces/IPropagator.html",[3,0.569,4,0.569,5,0.441,6,0.469,9,0.569,10,0.441,11,1.286,12,2.989,13,0.953,15,0.953,17,1.045,18,0.034,19,3.069,20,0.503,22,2.19,24,1.951,28,0.569,32,0.022,33,0.028,34,0.022,35,1.156,37,1.626,48,1.897,138,3.691,140,3.691,142,3.462,143,4.165,144,4.261]],["title/interfaces/JaegerCollectorConfig.html",[35,0.663,76,1.359]],["body/interfaces/JaegerCollectorConfig.html",[3,0.373,4,0.373,5,0.289,6,0.25,9,0.373,10,0.289,16,1.167,18,0.035,20,0.33,21,0.418,28,0.771,31,0.516,32,0.015,33,0.021,34,0.015,35,1.077,36,1.655,37,1.067,38,1.167,39,1.167,40,1.28,41,1.551,42,1.815,43,1.809,44,1.469,45,1.758,46,1.815,47,1.815,48,1.604,49,1.513,50,1.269,51,2.296,52,1.513,53,2.527,54,1.167,55,1.559,56,1.559,57,2.772,58,0.75,59,0.894,60,1.559,61,1.998,62,1.751,63,1.609,64,1.655,65,1.167,66,1.28,67,0.894,68,0.976,69,1.28,70,1.28,71,1.655,72,2.093,73,1.162,74,1.513,75,1.409,76,1.924,77,2.518,78,2.518,79,1.655,80,1.409,81,0.887,82,1.998,83,1.998,84,1.815,85,1.815,86,0.972,87,0.685,88,1.409,89,1.409,90,1.409]],["title/injectables/JaegerExporterService.html",[0,0.337,145,1.817]],["body/injectables/JaegerExporterService.html",[0,0.453,2,1.032,3,0.43,4,0.43,5,0.333,6,0.444,9,0.584,10,0.333,11,1.073,13,0.979,15,1.286,17,0.79,18,0.035,20,0.63,21,0.482,26,1.032,27,1.032,28,0.43,29,1.219,30,1.032,31,0.595,32,0.017,33,0.023,34,0.017,44,0.945,49,1.23,50,1.032,58,0.865,77,1.476,78,1.476,81,1.286,86,0.79,87,1.307,97,1.476,99,2.688,101,2.898,102,2.553,103,1.828,104,1.799,105,1.476,114,1.476,127,1.625,145,2.975,146,4.038,147,4.278,148,3.557,149,3.557,150,4.671,151,3.557,152,3.081,153,2.443,154,3.557,155,3.081,156,3.557,157,2.774,158,2.008,159,3.151,160,1.625,161,3.151,162,2.008,163,2.008,164,3.151,165,2.619,166,2.269,167,3.151,168,2.269,169,3.151,170,3.151]],["title/injectables/NoopHttpTextPropagatorService.html",[0,0.337,119,1.817]],["body/injectables/NoopHttpTextPropagatorService.html",[0,0.518,2,1.268,3,0.529,4,0.529,5,0.41,6,0.448,8,1.815,9,0.529,10,0.41,11,1.229,12,2.913,13,0.887,15,1.292,17,0.972,18,0.035,19,3.004,20,0.649,21,0.593,22,2.093,23,2.212,24,1.815,26,1.268,27,1.268,28,0.529,29,0.972,30,1.268,31,0.731,32,0.021,33,0.026,34,0.021,108,2.527,116,3.529,119,3.224,171,4.073,172,3.874,173,5.949]],["title/interfaces/OpenTelemetryConfig.html",[35,0.663,81,0.728]],["body/interfaces/OpenTelemetryConfig.html",[3,0.361,4,0.361,5,0.28,6,0.242,9,0.361,10,0.28,16,1.13,18,0.035,20,0.32,21,0.405,28,0.765,31,0.499,32,0.014,33,0.02,34,0.014,35,1.064,36,2.063,37,1.033,38,1.13,39,1.13,40,1.239,41,1.448,42,1.774,43,1.741,44,1.594,45,1.727,46,1.774,47,1.774,48,1.581,49,1.479,50,1.581,51,2.262,52,1.479,53,1.953,54,1.13,55,1.51,56,1.51,57,2.491,58,0.726,59,0.866,60,1.51,61,1.953,62,1.581,63,1.581,64,1.618,65,1.13,66,1.239,67,0.866,68,0.945,69,1.239,70,1.239,71,2.063,72,2.063,73,1.135,74,1.479,75,1.364,76,2.063,77,1.774,78,1.774,79,2.063,80,1.364,81,1.105,82,2.742,83,2.742,84,2.491,85,2.491,86,0.95,87,0.663,88,1.364,89,1.364,90,1.364]],["title/interceptors/OpenTelemetryHttpInterceptor.html",[174,1.817,175,2.027]],["body/interceptors/OpenTelemetryHttpInterceptor.html",[0,0.245,3,0.192,4,0.192,5,0.149,6,0.443,9,0.62,10,0.149,11,0.582,13,1.077,15,0.872,17,1.029,18,0.035,20,0.601,21,0.215,24,0.658,25,0.895,26,0.46,27,0.46,28,0.192,29,0.744,30,0.46,31,0.82,32,0.008,33,0.012,34,0.008,41,1.032,42,1.087,44,1.302,45,1.695,46,1.389,47,1.922,48,1.248,50,1.486,51,1.922,53,1.529,58,1.192,59,0.76,73,0.889,74,0.548,81,0.788,86,0.352,87,1.139,89,1.965,96,3.044,98,1.965,101,1.197,102,2.127,105,0.658,106,2.892,108,0.724,109,1.929,114,0.658,117,1.197,118,1.168,127,2.62,138,1.671,153,1.325,157,1.965,158,0.895,160,2.239,162,0.895,163,3.515,174,1.692,175,1.478,176,1.405,177,4.03,178,1.168,179,1.929,180,3.442,181,3.609,182,2.32,183,2.32,184,2.964,185,2.32,186,2.964,187,2.464,188,2.892,189,2.32,190,2.32,191,1.405,192,2.32,193,2.464,194,2.32,195,1.889,196,2.964,197,2.32,198,2.32,199,4.848,200,1.405,201,1.929,202,5.612,203,2.32,204,4.103,205,1.405,206,1.405,207,1.325,208,2.479,209,2.32,210,1.929,211,2.32,212,1.405,213,3.411,214,1.671,215,2.32,216,1.405,217,1.405,218,2.464,219,3.442,220,2.464,221,1.929,222,1.405,223,4.103,224,3.442,225,1.405,226,2.32,227,1.929,228,2.861,229,1.325,230,1.929,231,2.964,232,2.964,233,2.32,234,2.861,235,1.405,236,2.32,237,2.32,238,2.964,239,1.012,240,1.168,241,1.405,242,1.012,243,2.32,244,2.32,245,2.32,246,2.32,247,1.405,248,1.405,249,1.168,250,1.405,251,1.405,252,1.405,253,1.405,254,2.32,255,1.405,256,1.405,257,1.405,258,1.405,259,1.405,260,1.405,261,1.405,262,1.405,263,1.405,264,1.405,265,1.405,266,1.405,267,2.479,268,2.32,269,2.32,270,2.32,271,1.405,272,1.671,273,1.405,274,1.405,275,1.405,276,1.405,277,1.405,278,1.405,279,1.405,280,1.405,281,1.405,282,1.405,283,1.405,284,1.405,285,1.405,286,2.964,287,1.405,288,2.964,289,1.405,290,1.405,291,1.405,292,1.405,293,1.405,294,1.405,295,1.405,296,1.405,297,2.32,298,1.405,299,1.405,300,1.405,301,1.405,302,1.405]],["title/modules/OpenTelemetryInterceptorModule.html",[303,2.292,304,2.027]],["body/modules/OpenTelemetryInterceptorModule.html",[3,0.476,4,0.476,5,0.369,6,0.419,11,0.875,13,0.798,15,0.798,17,0.875,18,0.035,20,0.681,21,0.534,28,0.476,29,0.875,31,0.659,32,0.019,33,0.025,34,0.019,44,1.533,50,1.142,58,0.958,81,1.242,86,1.149,87,1.283,114,1.635,126,2.918,157,1.992,160,1.8,175,2.918,214,2.513,239,2.513,304,3.592,305,2.513,306,4.58,307,3.489,308,4.58,309,3.489,310,4.58,311,3.489,312,5.112,313,4.25,314,4.58,315,3.807,316,3.807,317,3.489,318,3.489,319,2.513,320,2.9,321,2.9,322,4.58,323,3.489,324,2.9,325,3.489,326,3.489,327,2.9,328,3.489,329,2.513,330,3.489,331,3.489,332,3.489]],["title/interfaces/OtelCollectorConfig.html",[35,0.663,71,1.359]],["body/interfaces/OtelCollectorConfig.html",[3,0.378,4,0.378,5,0.293,6,0.253,9,0.378,10,0.293,16,1.184,18,0.035,20,0.335,21,0.424,28,0.774,31,0.523,32,0.015,33,0.021,34,0.015,35,1.083,36,1.672,37,1.082,38,1.184,39,1.184,40,1.298,41,1.56,42,1.834,43,1.817,44,1.174,45,1.772,46,1.834,47,1.834,48,1.615,49,1.528,50,0.907,51,2.311,52,1.528,53,2.019,54,1.184,55,1.582,56,1.582,57,2.785,58,0.761,59,0.907,60,1.582,61,2.019,62,1.622,63,1.622,64,1.672,65,1.184,66,1.298,67,0.907,68,0.99,69,1.298,70,1.834,71,1.939,72,2.421,73,1.361,74,1.772,75,2.019,76,1.672,77,1.834,78,1.834,79,1.672,80,1.429,81,0.896,82,2.019,83,2.019,84,1.834,85,1.834,86,0.982,87,0.695,88,1.429,89,1.429,90,1.429]],["title/injectables/OtelcolExporterService.html",[0,0.337,333,1.817]],["body/injectables/OtelcolExporterService.html",[0,0.459,2,1.052,3,0.439,4,0.439,5,0.34,6,0.48,9,0.592,10,0.34,11,1.087,13,1.123,15,1.202,17,0.806,18,0.035,20,0.663,21,0.492,26,1.052,27,1.052,28,0.439,29,1.231,30,1.052,31,0.606,32,0.017,33,0.023,34,0.017,41,1.3,42,2.031,43,1.052,44,0.963,49,1.254,50,1.419,58,0.881,72,1.372,81,1.293,85,2.299,86,0.806,87,1.318,97,1.505,99,2.709,102,2.299,103,1.852,104,1.834,105,1.505,114,1.505,127,1.657,157,2.801,158,2.046,160,1.657,162,2.046,163,3.126,166,2.313,168,2.313,333,2.999,334,4.366,335,4.334,336,3.211,337,5.484,338,5.484,339,2.313,340,3.211,341,3.211,342,3.211]],["title/injectables/SpanExporterService.html",[0,0.337,188,2.027]],["body/injectables/SpanExporterService.html",[0,0.426,2,0.945,3,0.394,4,0.394,5,0.305,6,0.368,9,0.394,10,0.305,11,1.01,13,0.66,15,1.062,17,0.724,18,0.035,20,0.692,21,0.442,26,0.945,27,0.945,28,0.55,29,0.724,30,0.945,32,0.015,33,0.022,34,0.015,43,1.519,45,1.572,59,0.945,62,1.439,63,1.439,64,1.72,73,0.865,81,0.922,86,1.01,87,1.259,94,2.956,96,1.647,97,1.352,98,3.123,99,2.589,101,2.392,102,2.173,103,1.982,104,1.647,105,1.352,110,3.939,112,2.9,113,2.9,114,1.352,121,2.398,123,2.398,124,2.398,125,2.398,127,2.723,128,2.078,129,2.398,130,2.398,132,3.856,134,4.173,145,3.123,188,2.566,229,2.299,249,4.173,333,3.123,343,2.9,344,3.856,345,2.885,346,3.123,347,2.9,348,2.885,349,2.885,350,2.398,351,2.885]],["title/interfaces/ZipkinCollectorConfig.html",[35,0.663,79,1.359]],["body/interfaces/ZipkinCollectorConfig.html",[3,0.379,4,0.379,5,0.294,6,0.254,9,0.379,10,0.294,16,1.186,18,0.035,20,0.335,21,0.425,28,0.774,31,0.524,32,0.015,33,0.021,34,0.015,35,1.084,36,1.675,37,1.084,38,1.186,39,1.186,40,1.301,41,1.561,42,1.837,43,1.769,44,1.176,45,1.774,46,1.837,47,1.837,48,1.616,49,1.531,50,0.909,51,2.313,52,1.531,53,2.022,54,1.186,55,1.585,56,1.585,57,2.787,58,0.762,59,0.909,60,1.585,61,2.022,62,1.624,63,1.764,64,1.675,65,1.186,66,1.301,67,0.909,68,0.993,69,1.301,70,1.301,71,1.675,72,2.423,73,1.363,74,1.774,75,1.432,76,1.675,77,1.837,78,1.837,79,1.941,80,2.022,81,0.897,82,2.022,83,2.022,84,1.837,85,1.837,86,0.983,87,0.697,88,1.432,89,1.432,90,1.432]],["title/injectables/ZipkinExporterService.html",[0,0.337,346,1.817]],["body/injectables/ZipkinExporterService.html",[0,0.463,2,1.067,3,0.445,4,0.445,5,0.345,6,0.452,9,0.598,10,0.345,11,1.098,13,1.002,15,1.209,17,0.818,18,0.035,20,0.638,21,0.499,26,1.067,27,1.067,28,0.445,29,0.818,30,1.067,31,0.615,32,0.017,33,0.023,34,0.017,44,0.977,49,1.273,50,1.067,58,0.894,72,1.392,81,1.299,84,1.527,86,0.818,87,1.325,97,1.527,99,2.725,101,2.725,102,2.582,103,1.87,104,1.861,105,1.527,114,1.527,127,1.681,148,3.638,149,3.638,150,4.392,151,3.638,152,3.152,153,2.499,154,3.638,155,3.152,156,3.638,157,2.822,158,2.076,160,1.681,162,2.076,163,2.076,165,2.709,166,2.347,168,2.347,346,2.499,352,4.108,353,4.377,354,3.259,355,3.259,356,3.259,357,3.259]],["title/changelog.html",[358,1.527,359,1.527,360,2.223]],["body/changelog.html",[5,0.554,18,0.025,32,0.02,33,0.025,34,0.02,41,1.101,54,1.569,68,1.692,207,3.161,208,2.644,229,2.703,360,3.052,361,3.671,362,3.671,363,2.644,364,3.671,365,2.34,366,3.671,367,3.052,368,3.671,369,3.671,370,3.671,371,3.671,372,3.671,373,3.671,374,3.671,375,3.671,376,3.671,377,2.644,378,5.968,379,3.671,380,3.671,381,3.671,382,3.671,383,3.052,384,3.671,385,3.671,386,3.671,387,3.671,388,3.671,389,3.671,390,3.671,391,3.671,392,2.644,393,3.671,394,3.052,395,3.671,396,3.671,397,3.671,398,3.671,399,3.671,400,3.052,401,3.671,402,3.671,403,4.734,404,3.671,405,3.671,406,4.734,407,4.734,408,3.671,409,3.671,410,3.052,411,3.671,412,3.936,413,4.734,414,4.734,415,3.671,416,3.671,417,3.671,418,5.535,419,3.671,420,3.671,421,3.671,422,3.671,423,3.671,424,4.734,425,3.671,426,3.671]],["title/coverage.html",[427,3.58]],["body/coverage.html",[0,0.627,1,1.699,5,0.315,6,0.575,7,2.473,8,2.587,18,0.034,22,1.271,31,0.562,32,0.016,33,0.022,34,0.016,35,1.179,36,1.271,38,2.359,39,2.359,50,0.974,52,1.162,71,1.271,76,1.271,79,1.271,81,0.681,86,0.746,91,1.699,92,2.473,94,1.896,95,2.473,96,1.699,97,2.587,103,1.271,106,1.896,107,3.004,108,2.432,115,1.699,116,2.143,117,1.535,119,1.699,122,2.143,128,2.962,137,2.473,142,2.473,145,1.699,146,2.473,171,2.473,174,1.699,175,1.896,177,2.473,178,2.473,188,1.896,333,1.699,334,2.473,343,2.962,346,1.699,347,2.143,352,2.473,427,2.473,428,2.473,429,2.975,430,2.975,431,6.291,432,2.975,433,4.715,434,2.975,435,5.988,436,2.975,437,4.715,438,2.975,439,2.975,440,2.975,441,2.473]],["title/dependencies.html",[442,2.223,443,2.749]],["body/dependencies.html",[18,0.035,21,0.622,32,0.022,33,0.027,34,0.022,43,1.33,240,3.378,242,2.926,272,2.926,339,2.926,443,2.926,444,4.063,445,6.169,446,4.063,447,5.048,448,4.063,449,4.063,450,4.063,451,4.063,452,5.048,453,4.196,454,4.063,455,4.063,456,5.048,457,4.063,458,4.063,459,4.063,460,4.063,461,4.063,462,4.063,463,3.378,464,3.378,465,4.063,466,4.063,467,4.063,468,4.063,469,4.063]],["title/miscellaneous/enumerations.html",[470,1.38,471,3.173]],["body/miscellaneous/enumerations.html",[6,0.401,10,0.464,16,1.873,18,0.034,32,0.024,33,0.028,34,0.024,38,1.873,39,2.426,43,1.731,48,1.731,62,1.89,63,1.89,64,2.259,65,1.873,66,2.054,67,1.435,68,1.567,69,2.054,74,2.394,470,2.261,471,3.644,472,4.396]],["title/miscellaneous/functions.html",[470,1.38,473,3.173]],["body/miscellaneous/functions.html",[1,2.85,6,0.456,8,2.339,9,0.682,10,0.422,15,0.913,18,0.031,32,0.021,33,0.027,34,0.021,44,1.497,45,1.558,48,1.634,58,1.37,59,1.634,62,1.426,63,1.426,64,1.705,67,1.306,68,1.426,87,1.432,91,2.85,97,2.339,101,2.575,107,2.543,108,2.575,110,3.595,115,2.85,119,2.85,120,3.317,122,3.923,126,2.543,145,2.85,160,2.575,333,2.85,343,2.874,344,3.317,346,2.85,347,3.595,470,2.058,473,3.317,474,3.99,475,3.99,476,3.99,477,3.99]],["title/index.html",[10,0.283,358,1.527,359,1.527]],["body/index.html",[3,0.396,18,0.034,20,0.53,21,0.283,28,0.396,29,0.464,32,0.024,33,0.016,34,0.01,35,0.603,36,0.791,40,1.358,41,1.642,43,1.931,44,0.869,45,1.577,46,0.867,47,1.673,48,1.322,49,1.131,51,1.673,52,1.897,54,1.873,57,2.261,58,0.795,59,0.949,61,2.398,62,1.737,63,1.662,65,1.525,66,1.358,67,0.606,68,1.036,70,2.422,71,0.791,72,2.149,73,0.869,74,0.723,75,1.495,76,0.791,77,1.892,78,1.892,79,0.791,80,1.495,81,0.817,82,1.495,83,1.495,84,1.358,85,1.358,96,1.654,112,1.333,117,0.955,133,1.539,144,1.539,152,3.499,153,1.057,174,2.654,179,1.539,181,1.539,187,1.539,195,1.18,201,1.539,207,1.654,208,1.333,213,2.968,214,2.571,218,2.968,220,2.409,227,1.539,228,1.539,229,3.077,230,1.539,234,1.539,239,1.333,242,1.333,267,1.333,272,1.333,303,3.157,304,2.275,313,2.409,315,1.539,316,3.357,319,1.333,320,1.539,324,3.357,327,1.539,329,1.333,339,1.333,350,1.539,358,1.654,359,1.654,363,2.087,365,2.574,377,3.809,392,2.571,394,1.539,400,1.539,441,1.539,442,1.539,453,1.539,463,1.539,464,1.539,478,3.57,479,3.57,480,1.851,481,1.539,482,2.897,483,2.897,484,4.039,485,2.897,486,3.57,487,1.851,488,1.851,489,2.897,490,4.039,491,2.409,492,2.897,493,2.897,494,2.087,495,2.897,496,2.897,497,1.851,498,1.851,499,1.851,500,1.851,501,1.539,502,1.851,503,1.851,504,1.851,505,1.851,506,1.851,507,1.851,508,1.851,509,1.851,510,1.851,511,4.039,512,1.851,513,1.851,514,1.851,515,1.851,516,1.851,517,1.539,518,1.851,519,1.851,520,1.851,521,1.851,522,3.57,523,1.851,524,1.851,525,1.851,526,1.851,527,1.539,528,1.539,529,1.851,530,1.851,531,1.851,532,1.851,533,1.851,534,1.851,535,2.897,536,1.851,537,2.897,538,2.897,539,1.851,540,1.851,541,1.851,542,1.851,543,1.851,544,1.851,545,2.897,546,2.897,547,1.18,548,1.851,549,1.851,550,1.851,551,1.851,552,1.851,553,1.851,554,1.539,555,1.539,556,1.851,557,1.851,558,1.851,559,1.851,560,1.851,561,1.851,562,1.851,563,1.851,564,1.851,565,2.897,566,2.897,567,1.851,568,1.851,569,1.851,570,1.851,571,1.851,572,1.851,573,1.851]],["title/license.html",[358,1.527,359,1.527,574,2.223]],["body/license.html",[4,0.649,5,0.44,9,0.157,13,0.262,18,0.014,20,0.138,29,0.288,32,0.011,33,0.011,34,0.006,37,0.448,40,0.537,41,0.344,54,1.922,58,0.702,59,0.375,108,1.56,113,1.409,126,0.73,140,0.825,155,0.825,195,0.73,207,1.117,210,1.626,221,3.073,267,0.825,365,0.73,367,2.127,377,0.825,392,3.829,410,2.127,412,1.626,428,2.127,481,0.953,491,1.626,494,0.825,501,2.127,517,0.953,528,0.953,547,0.73,555,2.822,574,4.834,575,3.024,576,2.558,577,1.146,578,1.146,579,1.146,580,4.341,581,4.862,582,3.024,583,3.395,584,1.146,585,5.044,586,4.498,587,1.146,588,1.146,589,1.146,590,1.146,591,4.498,592,4.862,593,3.697,594,4.498,595,1.956,596,1.146,597,3.395,598,1.146,599,1.146,600,1.146,601,3.024,602,1.146,603,4.341,604,3.024,605,1.956,606,1.146,607,2.558,608,1.956,609,1.956,610,1.146,611,1.146,612,5.257,613,3.024,614,1.956,615,1.146,616,1.956,617,1.146,618,1.146,619,1.146,620,1.146,621,1.146,622,1.146,623,1.146,624,2.558,625,1.146,626,2.558,627,1.956,628,4.862,629,1.146,630,1.146,631,3.697,632,4.341,633,3.024,634,1.956,635,2.558,636,3.697,637,1.146,638,1.146,639,1.146,640,1.146,641,1.146,642,1.956,643,1.146,644,1.146,645,1.146,646,5.836,647,2.558,648,1.956,649,1.146,650,4.341,651,1.956,652,1.146,653,3.395,654,1.956,655,1.146,656,5.257,657,1.146,658,1.146,659,1.146,660,1.146,661,1.146,662,1.146,663,1.956,664,1.146,665,1.146,666,1.146,667,1.146,668,1.146,669,3.024,670,3.395,671,1.146,672,1.956,673,3.024,674,1.956,675,1.146,676,3.395,677,1.956,678,1.146,679,1.146,680,2.558,681,1.146,682,1.146,683,1.146,684,1.146,685,1.956,686,0.953,687,1.146,688,1.146,689,2.558,690,1.146,691,1.146,692,2.558,693,1.146,694,1.146,695,1.146,696,3.024,697,4.498,698,1.146,699,1.146,700,1.956,701,4.16,702,2.558,703,3.024,704,1.956,705,1.956,706,1.956,707,1.956,708,2.558,709,1.956,710,2.558,711,1.956,712,1.956,713,1.956,714,1.956,715,0.953,716,1.956,717,1.146,718,1.146,719,3.395,720,3.948,721,2.558,722,1.956,723,1.146,724,1.146,725,1.956,726,1.956,727,1.146,728,1.146,729,2.558,730,1.956,731,1.146,732,1.146,733,1.146,734,2.558,735,1.146,736,1.146,737,1.146,738,1.956,739,1.956,740,1.146,741,1.146,742,1.146,743,1.146,744,1.146,745,1.146,746,1.146,747,1.956,748,1.146,749,1.146,750,1.146,751,1.146,752,1.146,753,1.146,754,1.146,755,1.146,756,2.558,757,1.146,758,2.558,759,1.146,760,1.146,761,1.146,762,1.146,763,4.16,764,1.146,765,1.146,766,1.146,767,1.146,768,1.146,769,3.024,770,1.956,771,3.024,772,1.146,773,1.146,774,1.146,775,1.146,776,1.146,777,2.558,778,1.146,779,1.146,780,1.956,781,1.956,782,1.146,783,1.146,784,1.146,785,1.956,786,1.146,787,1.146,788,3.395,789,1.146,790,1.146,791,1.146,792,1.146,793,1.146,794,1.146,795,1.146,796,2.558,797,3.024,798,1.146,799,1.146,800,1.146,801,1.146,802,1.146,803,1.146,804,1.146,805,1.146,806,1.146,807,1.146,808,1.146,809,1.956,810,1.146,811,1.146,812,1.956,813,1.146,814,1.146,815,3.024,816,1.146,817,1.146,818,1.146,819,1.146,820,1.146,821,1.146,822,1.146,823,3.024,824,2.558,825,2.558,826,2.558,827,1.956,828,1.956,829,2.558,830,1.956,831,1.956,832,1.956,833,1.956,834,1.146,835,1.146,836,1.146,837,1.146,838,1.146,839,1.146,840,1.146,841,1.146,842,1.146,843,1.956,844,1.146,845,1.146,846,1.146,847,1.146,848,3.395,849,1.146,850,1.146,851,1.146,852,1.146,853,1.146,854,1.146,855,1.146,856,1.146,857,3.395,858,1.146,859,1.146,860,1.146,861,1.146,862,1.146,863,0.953,864,1.146,865,1.146,866,1.146,867,1.146,868,1.146,869,1.146,870,1.146,871,1.146,872,1.146,873,1.146,874,1.146,875,1.146,876,2.558,877,1.146,878,1.146,879,1.146,880,1.146,881,1.146,882,1.956,883,1.146,884,1.146,885,1.146,886,1.146,887,1.146,888,1.146,889,1.146,890,1.146,891,1.146,892,1.146,893,1.146,894,1.146,895,1.146,896,1.146,897,1.146,898,1.956,899,1.146,900,1.146,901,1.146,902,1.956,903,1.956,904,1.146,905,1.146,906,1.146,907,1.146,908,1.146,909,1.146,910,1.146,911,1.146,912,1.146,913,1.146,914,1.146,915,1.146,916,1.146,917,1.146,918,1.146,919,1.146,920,1.146,921,1.146,922,1.146,923,1.146,924,1.146,925,1.146,926,1.146]],["title/modules.html",[305,3.102]],["body/modules.html",[18,0.03,32,0.026,33,0.03,34,0.026,304,3.133,305,3.542,547,3.133,927,4.917,928,4.917]],["title/overview.html",[929,3.58]],["body/overview.html",[2,1.536,18,0.03,32,0.025,33,0.03,34,0.025,37,1.832,195,2.99,303,3.966,319,3.379,321,3.901,329,3.379,443,3.379,527,3.901,863,3.901,929,3.901,930,4.692,931,5.507,932,4.692,933,4.692,934,4.692]],["title/todo.html",[358,1.527,359,1.527,935,2.223]],["body/todo.html",[18,0.033,32,0.022,33,0.027,34,0.022,41,1.734,43,1.355,62,1.979,63,1.979,70,2.392,98,2.915,117,2.135,153,2.915,174,2.363,193,3.441,207,3.499,229,2.363,363,2.981,365,2.637,383,3.441,494,3.988,547,3.254,554,4.937,686,3.441,715,3.441,935,4.603,936,4.139,937,4.139,938,4.139,939,4.139,940,4.139]],["title/miscellaneous/variables.html",[470,1.38,941,3.173]],["body/miscellaneous/variables.html",[6,0.428,10,0.495,18,0.032,31,0.883,32,0.025,33,0.03,34,0.025,38,1.998,39,2.348,73,1.402,74,1.826,86,1.464,87,1.173,88,2.412,90,2.412,470,2.412,472,3.887,941,3.887]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"injectables/B3PropagatorService.html":{},"interfaces/CommonCollectorConfig.html":{},"injectables/CompositePropagatorService.html":{},"injectables/ConsoleSpanExporterService.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"interfaces/IExporter.html":{},"interfaces/IPropagator.html":{},"interfaces/JaegerCollectorConfig.html":{},"injectables/JaegerExporterService.html":{},"injectables/NoopHttpTextPropagatorService.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"injectables/ZipkinExporterService.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":508,"title":{},"body":{"index.html":{}}}],["0.0.1",{"_index":278,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["0.10.2",{"_index":469,"title":{},"body":{"dependencies.html":{}}}],["0.7",{"_index":502,"title":{},"body":{"index.html":{}}}],["0.8.2",{"_index":370,"title":{},"body":{"changelog.html":{}}}],["0.8.3",{"_index":456,"title":{},"body":{"dependencies.html":{}}}],["05",{"_index":372,"title":{},"body":{"changelog.html":{}}}],["0885b40",{"_index":387,"title":{},"body":{"changelog.html":{}}}],["0f35b5c",{"_index":395,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":195,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["1.13.0",{"_index":467,"title":{},"body":{"dependencies.html":{}}}],["1.19.0",{"_index":458,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":437,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":933,"title":{},"body":{"overview.html":{}}}],["10/10",{"_index":438,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":431,"title":{},"body":{"coverage.html":{}}}],["12.0.2",{"_index":568,"title":{},"body":{"index.html":{}}}],["12/typescript",{"_index":399,"title":{},"body":{"changelog.html":{}}}],["2.0",{"_index":576,"title":{},"body":{"license.html":{}}}],["2/2",{"_index":435,"title":{},"body":{"coverage.html":{}}}],["2004",{"_index":578,"title":{},"body":{"license.html":{}}}],["2020",{"_index":371,"title":{},"body":{"changelog.html":{}}}],["3.6.0",{"_index":400,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["3/3",{"_index":433,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":373,"title":{},"body":{"changelog.html":{}}}],["3516488",{"_index":389,"title":{},"body":{"changelog.html":{}}}],["371886a",{"_index":417,"title":{},"body":{"changelog.html":{}}}],["4/4",{"_index":439,"title":{},"body":{"coverage.html":{}}}],["412d2fd",{"_index":423,"title":{},"body":{"changelog.html":{}}}],["47aba25",{"_index":416,"title":{},"body":{"changelog.html":{}}}],["47c249b",{"_index":420,"title":{},"body":{"changelog.html":{}}}],["4a000b9",{"_index":411,"title":{},"body":{"changelog.html":{}}}],["5.2.0",{"_index":460,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":434,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":619,"title":{},"body":{"license.html":{}}}],["563071d",{"_index":401,"title":{},"body":{"changelog.html":{}}}],["6.5.4",{"_index":465,"title":{},"body":{"dependencies.html":{}}}],["613c16d",{"_index":419,"title":{},"body":{"changelog.html":{}}}],["6832",{"_index":512,"title":{},"body":{"index.html":{}}}],["7",{"_index":934,"title":{},"body":{"overview.html":{}}}],["7/7",{"_index":432,"title":{},"body":{"coverage.html":{}}}],["735b05d",{"_index":426,"title":{},"body":{"changelog.html":{}}}],["7a5b07e",{"_index":375,"title":{},"body":{"changelog.html":{}}}],["80f7bf8",{"_index":425,"title":{},"body":{"changelog.html":{}}}],["83fc1f3",{"_index":376,"title":{},"body":{"changelog.html":{}}}],["9",{"_index":589,"title":{},"body":{"license.html":{}}}],["9.0.0",{"_index":464,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["9.1.9",{"_index":445,"title":{},"body":{"dependencies.html":{}}}],["9.2.4",{"_index":447,"title":{},"body":{"dependencies.html":{}}}],["9/node",{"_index":398,"title":{},"body":{"changelog.html":{}}}],["92330f9",{"_index":384,"title":{},"body":{"changelog.html":{}}}],["95167b9",{"_index":415,"title":{},"body":{"changelog.html":{}}}],["96da55f",{"_index":405,"title":{},"body":{"changelog.html":{}}}],["a1746bf",{"_index":409,"title":{},"body":{"changelog.html":{}}}],["a517094",{"_index":421,"title":{},"body":{"changelog.html":{}}}],["above",{"_index":801,"title":{},"body":{"license.html":{}}}],["acceptance",{"_index":879,"title":{},"body":{"license.html":{}}}],["accepting",{"_index":876,"title":{},"body":{"license.html":{}}}],["accessor",{"_index":570,"title":{},"body":{"index.html":{}}}],["act",{"_index":886,"title":{},"body":{"license.html":{}}}],["acting",{"_index":599,"title":{},"body":{"license.html":{}}}],["acts",{"_index":855,"title":{},"body":{"license.html":{}}}],["ad03334",{"_index":381,"title":{},"body":{"changelog.html":{}}}],["add",{"_index":207,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{},"changelog.html":{},"index.html":{},"license.html":{},"todo.html":{}}}],["addendum",{"_index":787,"title":{},"body":{"license.html":{}}}],["adding",{"_index":534,"title":{},"body":{"index.html":{}}}],["additional",{"_index":788,"title":{},"body":{"license.html":{}}}],["additions",{"_index":671,"title":{},"body":{"license.html":{}}}],["advised",{"_index":874,"title":{},"body":{"license.html":{}}}],["against",{"_index":739,"title":{},"body":{"license.html":{}}}],["agent",{"_index":511,"title":{},"body":{"index.html":{}}}],["agree",{"_index":889,"title":{},"body":{"license.html":{}}}],["agreed",{"_index":826,"title":{},"body":{"license.html":{}}}],["agreement",{"_index":806,"title":{},"body":{"license.html":{}}}],["alleging",{"_index":744,"title":{},"body":{"license.html":{}}}],["alone",{"_index":735,"title":{},"body":{"license.html":{}}}],["along",{"_index":778,"title":{},"body":{"license.html":{}}}],["alongside",{"_index":786,"title":{},"body":{"license.html":{}}}],["already",{"_index":325,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{}}}],["althought",{"_index":536,"title":{},"body":{"index.html":{}}}],["always",{"_index":194,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["always_sampler",{"_index":243,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["ambient",{"_index":572,"title":{},"body":{"index.html":{}}}],["and(b",{"_index":759,"title":{},"body":{"license.html":{}}}],["and(c",{"_index":766,"title":{},"body":{"license.html":{}}}],["and(d",{"_index":772,"title":{},"body":{"license.html":{}}}],["and/or",{"_index":883,"title":{},"body":{"license.html":{}}}],["angular",{"_index":229,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{},"injectables/SpanExporterService.html":{},"changelog.html":{},"index.html":{},"todo.html":{}}}],["angular/animations",{"_index":444,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":446,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":448,"title":{},"body":{"dependencies.html":{}}}],["angular/common/http",{"_index":239,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"index.html":{}}}],["angular/compiler",{"_index":449,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":21,"title":{},"body":{"injectables/B3PropagatorService.html":{},"interfaces/CommonCollectorConfig.html":{},"injectables/CompositePropagatorService.html":{},"injectables/ConsoleSpanExporterService.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"interfaces/JaegerCollectorConfig.html":{},"injectables/JaegerExporterService.html":{},"injectables/NoopHttpTextPropagatorService.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"injectables/ZipkinExporterService.html":{},"dependencies.html":{},"index.html":{}}}],["angular/forms",{"_index":450,"title":{},"body":{"dependencies.html":{}}}],["angular/material",{"_index":451,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":452,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":455,"title":{},"body":{"dependencies.html":{}}}],["annotations",{"_index":660,"title":{},"body":{"license.html":{}}}],["apache",{"_index":575,"title":{},"body":{"license.html":{}}}],["api",{"_index":241,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["api#tracing",{"_index":498,"title":{},"body":{"index.html":{}}}],["api.defaultsetter",{"_index":290,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["api.propagation.inject",{"_index":289,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["api.span",{"_index":204,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["app",{"_index":490,"title":{},"body":{"index.html":{}}}],["app.component",{"_index":523,"title":{},"body":{"index.html":{}}}],["app.module.ts",{"_index":521,"title":{},"body":{"index.html":{}}}],["app/collector/docker",{"_index":549,"title":{},"body":{"index.html":{}}}],["appand",{"_index":540,"title":{},"body":{"index.html":{}}}],["appcomponent",{"_index":522,"title":{},"body":{"index.html":{}}}],["appear",{"_index":783,"title":{},"body":{"license.html":{}}}],["appendix",{"_index":654,"title":{},"body":{"license.html":{}}}],["applicable",{"_index":824,"title":{},"body":{"license.html":{}}}],["application",{"_index":152,"title":{},"body":{"injectables/JaegerExporterService.html":{},"injectables/ZipkinExporterService.html":{},"index.html":{}}}],["applies",{"_index":728,"title":{},"body":{"license.html":{}}}],["apply",{"_index":898,"title":{},"body":{"license.html":{}}}],["appmodule",{"_index":327,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{},"index.html":{}}}],["appropriate",{"_index":908,"title":{},"body":{"license.html":{}}}],["appropriateness",{"_index":841,"title":{},"body":{"license.html":{}}}],["archives",{"_index":917,"title":{},"body":{"license.html":{}}}],["arising",{"_index":862,"title":{},"body":{"license.html":{}}}],["asserted",{"_index":895,"title":{},"body":{"license.html":{}}}],["associated",{"_index":846,"title":{},"body":{"license.html":{}}}],["assume",{"_index":844,"title":{},"body":{"license.html":{}}}],["async",{"_index":515,"title":{},"body":{"index.html":{}}}],["attach",{"_index":899,"title":{},"body":{"license.html":{}}}],["attached",{"_index":652,"title":{},"body":{"license.html":{}}}],["attributes",{"_index":281,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["attribution",{"_index":769,"title":{},"body":{"license.html":{}}}],["authorized",{"_index":595,"title":{},"body":{"license.html":{}}}],["authorship",{"_index":647,"title":{},"body":{"license.html":{}}}],["available",{"_index":547,"title":{},"body":{"index.html":{},"license.html":{},"modules.html":{},"todo.html":{}}}],["b3",{"_index":65,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"injectables/HttpTextPropagatorService.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["b3,httptrace,composite",{"_index":519,"title":{},"body":{"index.html":{}}}],["b3propagator",{"_index":16,"title":{},"body":{"injectables/B3PropagatorService.html":{},"interfaces/CommonCollectorConfig.html":{},"injectables/CompositePropagatorService.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"miscellaneous/enumerations.html":{}}}],["b3propagatorservice",{"_index":1,"title":{"injectables/B3PropagatorService.html":{}},"body":{"injectables/B3PropagatorService.html":{},"injectables/HttpTextPropagatorService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["b63afc1",{"_index":390,"title":{},"body":{"changelog.html":{}}}],["b679883",{"_index":391,"title":{},"body":{"changelog.html":{}}}],["based",{"_index":528,"title":{},"body":{"index.html":{},"license.html":{}}}],["basis",{"_index":828,"title":{},"body":{"license.html":{}}}],["batchspanexporter(async",{"_index":55,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{}}}],["batchspanprocessor",{"_index":218,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{},"index.html":{}}}],["batchspanprocessor(spanexporter",{"_index":299,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["behalf",{"_index":676,"title":{},"body":{"license.html":{}}}],["below",{"_index":655,"title":{},"body":{"license.html":{}}}],["beneficial",{"_index":623,"title":{},"body":{"license.html":{}}}],["between",{"_index":507,"title":{},"body":{"index.html":{}}}],["bind",{"_index":668,"title":{},"body":{"license.html":{}}}],["body",{"_index":272,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{},"dependencies.html":{},"index.html":{}}}],["boilerplate",{"_index":900,"title":{},"body":{"license.html":{}}}],["boolean",{"_index":51,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"index.html":{}}}],["boolean)send",{"_index":513,"title":{},"body":{"index.html":{}}}],["bootstrap",{"_index":527,"title":{},"body":{"index.html":{},"overview.html":{}}}],["brackets",{"_index":903,"title":{},"body":{"license.html":{}}}],["break",{"_index":134,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{},"injectables/SpanExporterService.html":{}}}],["browse",{"_index":928,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":453,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["bug",{"_index":396,"title":{},"body":{"changelog.html":{}}}],["call",{"_index":532,"title":{},"body":{"index.html":{}}}],["carrier",{"_index":288,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["carrier[key",{"_index":293,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["carry",{"_index":761,"title":{},"body":{"license.html":{}}}],["case",{"_index":132,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{},"injectables/SpanExporterService.html":{}}}],["cause",{"_index":609,"title":{},"body":{"license.html":{}}}],["changed",{"_index":765,"title":{},"body":{"license.html":{}}}],["changelog",{"_index":360,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["changes",{"_index":362,"title":{},"body":{"changelog.html":{}}}],["character",{"_index":861,"title":{},"body":{"license.html":{}}}],["charge",{"_index":710,"title":{},"body":{"license.html":{}}}],["choose",{"_index":877,"title":{},"body":{"license.html":{}}}],["claim",{"_index":741,"title":{},"body":{"license.html":{}}}],["claims",{"_index":730,"title":{},"body":{"license.html":{}}}],["class",{"_index":29,"title":{},"body":{"injectables/B3PropagatorService.html":{},"injectables/CompositePropagatorService.html":{},"injectables/ConsoleSpanExporterService.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"injectables/JaegerExporterService.html":{},"injectables/NoopHttpTextPropagatorService.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"injectables/ZipkinExporterService.html":{},"index.html":{},"license.html":{}}}],["code",{"_index":410,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["collector",{"_index":43,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"todo.html":{}}}],["collector(otelcol",{"_index":500,"title":{},"body":{"index.html":{}}}],["collector.jaeger",{"_index":349,"title":{},"body":{"injectables/SpanExporterService.html":{}}}],["collector.otelcol",{"_index":350,"title":{},"body":{"injectables/SpanExporterService.html":{},"index.html":{}}}],["collector.zipkin",{"_index":351,"title":{},"body":{"injectables/SpanExporterService.html":{}}}],["collectorconfiguration",{"_index":488,"title":{},"body":{"index.html":{}}}],["collectorexporter",{"_index":337,"title":{},"body":{"injectables/OtelcolExporterService.html":{}}}],["collectorexporter(this.otelcolconfig",{"_index":342,"title":{},"body":{"injectables/OtelcolExporterService.html":{}}}],["collectorexporterconfig",{"_index":338,"title":{},"body":{"injectables/OtelcolExporterService.html":{}}}],["combination",{"_index":736,"title":{},"body":{"license.html":{}}}],["command",{"_index":538,"title":{},"body":{"index.html":{}}}],["comment",{"_index":909,"title":{},"body":{"license.html":{}}}],["commercial",{"_index":871,"title":{},"body":{"license.html":{}}}],["commit",{"_index":368,"title":{},"body":{"changelog.html":{}}}],["common",{"_index":40,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"index.html":{},"license.html":{}}}],["commoncollectorconfig",{"_index":36,"title":{"interfaces/CommonCollectorConfig.html":{}},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"coverage.html":{},"index.html":{}}}],["commonconfig",{"_index":82,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"index.html":{}}}],["communication",{"_index":680,"title":{},"body":{"license.html":{}}}],["compiled",{"_index":641,"title":{},"body":{"license.html":{}}}],["compliance",{"_index":920,"title":{},"body":{"license.html":{}}}],["complies",{"_index":794,"title":{},"body":{"license.html":{}}}],["compose",{"_index":546,"title":{},"body":{"index.html":{}}}],["compose.yaml",{"_index":550,"title":{},"body":{"index.html":{}}}],["composite",{"_index":68,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"injectables/HttpTextPropagatorService.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["compositepropagator",{"_index":69,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"injectables/CompositePropagatorService.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"miscellaneous/enumerations.html":{}}}],["compositepropagatorservice",{"_index":91,"title":{"injectables/CompositePropagatorService.html":{}},"body":{"injectables/CompositePropagatorService.html":{},"injectables/HttpTextPropagatorService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["computer",{"_index":868,"title":{},"body":{"license.html":{}}}],["concurrently",{"_index":459,"title":{},"body":{"dependencies.html":{}}}],["conditions",{"_index":581,"title":{},"body":{"license.html":{}}}],["config",{"_index":87,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"injectables/HttpTextPropagatorService.html":{},"interfaces/JaegerCollectorConfig.html":{},"injectables/JaegerExporterService.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"injectables/ZipkinExporterService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["config.commonconfig.collector",{"_index":348,"title":{},"body":{"injectables/SpanExporterService.html":{}}}],["config.commonconfig.propagator",{"_index":131,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{}}}],["config.commonconfig.servicename",{"_index":168,"title":{},"body":{"injectables/JaegerExporterService.html":{},"injectables/OtelcolExporterService.html":{},"injectables/ZipkinExporterService.html":{}}}],["config.jaegerconfig.host",{"_index":169,"title":{},"body":{"injectables/JaegerExporterService.html":{}}}],["config.jaegerconfig.port",{"_index":170,"title":{},"body":{"injectables/JaegerExporterService.html":{}}}],["config.otelcolconfig?.url",{"_index":341,"title":{},"body":{"injectables/OtelcolExporterService.html":{}}}],["config.ts",{"_index":39,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["config.zipkinconfig.url",{"_index":357,"title":{},"body":{"injectables/ZipkinExporterService.html":{}}}],["configjaeger",{"_index":164,"title":{},"body":{"injectables/JaegerExporterService.html":{}}}],["configurable",{"_index":504,"title":{},"body":{"index.html":{}}}],["configuration",{"_index":41,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"injectables/HttpTextPropagatorService.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/OtelcolExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"changelog.html":{},"index.html":{},"license.html":{},"todo.html":{}}}],["configuration/opentelemetry",{"_index":114,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{},"injectables/JaegerExporterService.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"injectables/ZipkinExporterService.html":{}}}],["configure",{"_index":489,"title":{},"body":{"index.html":{}}}],["configured",{"_index":344,"title":{},"body":{"injectables/SpanExporterService.html":{},"miscellaneous/functions.html":{}}}],["consequential",{"_index":860,"title":{},"body":{"license.html":{}}}],["conserve",{"_index":209,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["consistent",{"_index":885,"title":{},"body":{"license.html":{}}}],["console",{"_index":45,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/SpanExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["console.error('error",{"_index":124,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{},"injectables/SpanExporterService.html":{}}}],["consolespanexporter",{"_index":101,"title":{},"body":{"injectables/ConsoleSpanExporterService.html":{},"injectables/JaegerExporterService.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"injectables/SpanExporterService.html":{},"injectables/ZipkinExporterService.html":{},"miscellaneous/functions.html":{}}}],["consolespanexporterservice",{"_index":94,"title":{"injectables/ConsoleSpanExporterService.html":{}},"body":{"injectables/ConsoleSpanExporterService.html":{},"injectables/SpanExporterService.html":{},"coverage.html":{}}}],["conspicuously",{"_index":693,"title":{},"body":{"license.html":{}}}],["const",{"_index":89,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{}}}],["constitutes",{"_index":745,"title":{},"body":{"license.html":{}}}],["constructor",{"_index":157,"title":{},"body":{"injectables/JaegerExporterService.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"injectables/OtelcolExporterService.html":{},"injectables/ZipkinExporterService.html":{}}}],["constructor(@inject(opentelemetryinjectconfig",{"_index":166,"title":{},"body":{"injectables/JaegerExporterService.html":{},"injectables/OtelcolExporterService.html":{},"injectables/ZipkinExporterService.html":{}}}],["constructor(config",{"_index":158,"title":{},"body":{"injectables/JaegerExporterService.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"injectables/OtelcolExporterService.html":{},"injectables/ZipkinExporterService.html":{}}}],["construed",{"_index":789,"title":{},"body":{"license.html":{}}}],["contained",{"_index":775,"title":{},"body":{"license.html":{}}}],["content",{"_index":821,"title":{},"body":{"license.html":{}}}],["contents",{"_index":481,"title":{},"body":{"index.html":{},"license.html":{}}}],["context",{"_index":117,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"coverage.html":{},"index.html":{},"todo.html":{}}}],["contextmanager",{"_index":180,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["contract",{"_index":614,"title":{},"body":{"license.html":{}}}],["contribution",{"_index":670,"title":{},"body":{"license.html":{}}}],["contribution(s",{"_index":734,"title":{},"body":{"license.html":{}}}],["contributions",{"_index":796,"title":{},"body":{"license.html":{}}}],["contributor",{"_index":697,"title":{},"body":{"license.html":{}}}],["contributory",{"_index":746,"title":{},"body":{"license.html":{}}}],["control",{"_index":601,"title":{},"body":{"license.html":{}}}],["controlled",{"_index":602,"title":{},"body":{"license.html":{}}}],["conversions",{"_index":643,"title":{},"body":{"license.html":{}}}],["copies",{"_index":753,"title":{},"body":{"license.html":{}}}],["copy",{"_index":758,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":592,"title":{},"body":{"license.html":{}}}],["correlation",{"_index":939,"title":{},"body":{"todo.html":{}}}],["counterclaim",{"_index":742,"title":{},"body":{"license.html":{}}}],["cours",{"_index":386,"title":{},"body":{"changelog.html":{}}}],["coverage",{"_index":427,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":530,"title":{},"body":{"index.html":{}}}],["cross",{"_index":740,"title":{},"body":{"license.html":{}}}],["current",{"_index":230,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{},"index.html":{}}}],["customary",{"_index":817,"title":{},"body":{"license.html":{}}}],["damages",{"_index":857,"title":{},"body":{"license.html":{}}}],["date",{"_index":750,"title":{},"body":{"license.html":{}}}],["day",{"_index":156,"title":{},"body":{"injectables/JaegerExporterService.html":{},"injectables/ZipkinExporterService.html":{}}}],["dd7a0e5",{"_index":388,"title":{},"body":{"changelog.html":{}}}],["dda5d54",{"_index":408,"title":{},"body":{"changelog.html":{}}}],["declarations",{"_index":319,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{},"index.html":{},"overview.html":{}}}],["declared",{"_index":571,"title":{},"body":{"index.html":{}}}],["default",{"_index":73,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"injectables/ConsoleSpanExporterService.html":{},"injectables/HttpTextPropagatorService.html":{},"interfaces/IExporter.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/SpanExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["defend",{"_index":891,"title":{},"body":{"license.html":{}}}],["define",{"_index":138,"title":{},"body":{"interfaces/IExporter.html":{},"interfaces/IPropagator.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["defined",{"_index":13,"title":{},"body":{"injectables/B3PropagatorService.html":{},"injectables/CompositePropagatorService.html":{},"injectables/ConsoleSpanExporterService.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"interfaces/IExporter.html":{},"interfaces/IPropagator.html":{},"injectables/JaegerExporterService.html":{},"injectables/NoopHttpTextPropagatorService.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"injectables/ZipkinExporterService.html":{},"license.html":{}}}],["defineprobabilitysampler",{"_index":182,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["defineprobabilitysampler(sampleconfig",{"_index":190,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["definition",{"_index":113,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{},"injectables/SpanExporterService.html":{},"license.html":{}}}],["definitions",{"_index":584,"title":{},"body":{"license.html":{}}}],["del",{"_index":402,"title":{},"body":{"changelog.html":{}}}],["delete",{"_index":406,"title":{},"body":{"changelog.html":{}}}],["deliberate",{"_index":852,"title":{},"body":{"license.html":{}}}],["dependence",{"_index":566,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":443,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":480,"title":{},"body":{"index.html":{}}}],["deps",{"_index":123,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{},"injectables/SpanExporterService.html":{}}}],["derivative",{"_index":656,"title":{},"body":{"license.html":{}}}],["derived",{"_index":657,"title":{},"body":{"license.html":{}}}],["describing",{"_index":818,"title":{},"body":{"license.html":{}}}],["description",{"_index":9,"title":{},"body":{"injectables/B3PropagatorService.html":{},"interfaces/CommonCollectorConfig.html":{},"injectables/CompositePropagatorService.html":{},"injectables/ConsoleSpanExporterService.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"interfaces/IExporter.html":{},"interfaces/IPropagator.html":{},"interfaces/JaegerCollectorConfig.html":{},"injectables/JaegerExporterService.html":{},"injectables/NoopHttpTextPropagatorService.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"injectables/ZipkinExporterService.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["designated",{"_index":695,"title":{},"body":{"license.html":{}}}],["determining",{"_index":840,"title":{},"body":{"license.html":{}}}],["dgo",{"_index":552,"title":{},"body":{"index.html":{}}}],["different",{"_index":793,"title":{},"body":{"license.html":{}}}],["dir",{"_index":404,"title":{},"body":{"changelog.html":{}}}],["direct",{"_index":607,"title":{},"body":{"license.html":{}}}],["direction",{"_index":610,"title":{},"body":{"license.html":{}}}],["disclaimer",{"_index":822,"title":{},"body":{"license.html":{}}}],["discussing",{"_index":690,"title":{},"body":{"license.html":{}}}],["display",{"_index":491,"title":{},"body":{"index.html":{},"license.html":{}}}],["distribute",{"_index":719,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":777,"title":{},"body":{"license.html":{}}}],["distribution",{"_index":583,"title":{},"body":{"license.html":{}}}],["doc",{"_index":403,"title":{},"body":{"changelog.html":{}}}],["docker",{"_index":545,"title":{},"body":{"index.html":{}}}],["document",{"_index":590,"title":{},"body":{"license.html":{}}}],["documentation",{"_index":428,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["documented",{"_index":364,"title":{},"body":{"changelog.html":{}}}],["don't",{"_index":907,"title":{},"body":{"license.html":{}}}],["done",{"_index":940,"title":{},"body":{"todo.html":{}}}],["downgrade",{"_index":382,"title":{},"body":{"changelog.html":{}}}],["dynamic",{"_index":454,"title":{},"body":{"dependencies.html":{}}}],["e5eb09e",{"_index":379,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":703,"title":{},"body":{"license.html":{}}}],["easier",{"_index":915,"title":{},"body":{"license.html":{}}}],["ec28651",{"_index":393,"title":{},"body":{"changelog.html":{}}}],["editorial",{"_index":658,"title":{},"body":{"license.html":{}}}],["elaborations",{"_index":661,"title":{},"body":{"license.html":{}}}],["electronic",{"_index":677,"title":{},"body":{"license.html":{}}}],["en",{"_index":385,"title":{},"body":{"changelog.html":{}}}],["enclosed",{"_index":902,"title":{},"body":{"license.html":{}}}],["end",{"_index":897,"title":{},"body":{"license.html":{}}}],["entities",{"_index":600,"title":{},"body":{"license.html":{}}}],["entity",{"_index":594,"title":{},"body":{"license.html":{}}}],["enum",{"_index":61,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"index.html":{}}}],["enumerations",{"_index":471,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":524,"title":{},"body":{"index.html":{}}}],["environments/environment",{"_index":525,"title":{},"body":{"index.html":{}}}],["error",{"_index":324,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{},"index.html":{}}}],["even",{"_index":873,"title":{},"body":{"license.html":{}}}],["event",{"_index":267,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{},"index.html":{},"license.html":{}}}],["event.status",{"_index":270,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["example",{"_index":377,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["except",{"_index":721,"title":{},"body":{"license.html":{}}}],["excluding",{"_index":692,"title":{},"body":{"license.html":{}}}],["exclusive",{"_index":709,"title":{},"body":{"license.html":{}}}],["executed",{"_index":807,"title":{},"body":{"license.html":{}}}],["exercise",{"_index":847,"title":{},"body":{"license.html":{}}}],["exercising",{"_index":625,"title":{},"body":{"license.html":{}}}],["explicitly",{"_index":798,"title":{},"body":{"license.html":{}}}],["export",{"_index":28,"title":{},"body":{"injectables/B3PropagatorService.html":{},"interfaces/CommonCollectorConfig.html":{},"injectables/CompositePropagatorService.html":{},"injectables/ConsoleSpanExporterService.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"interfaces/IExporter.html":{},"interfaces/IPropagator.html":{},"interfaces/JaegerCollectorConfig.html":{},"injectables/JaegerExporterService.html":{},"injectables/NoopHttpTextPropagatorService.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"injectables/ZipkinExporterService.html":{},"index.html":{}}}],["exported",{"_index":562,"title":{},"body":{"index.html":{}}}],["exporter",{"_index":98,"title":{},"body":{"injectables/ConsoleSpanExporterService.html":{},"interfaces/IExporter.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"injectables/SpanExporterService.html":{},"todo.html":{}}}],["exporter.interface",{"_index":104,"title":{},"body":{"injectables/ConsoleSpanExporterService.html":{},"injectables/JaegerExporterService.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"injectables/ZipkinExporterService.html":{}}}],["exporter.service",{"_index":249,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{},"injectables/SpanExporterService.html":{}}}],["exporter.service.ts",{"_index":97,"title":{},"body":{"injectables/ConsoleSpanExporterService.html":{},"injectables/JaegerExporterService.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"injectables/ZipkinExporterService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["exporter.service.ts:16",{"_index":354,"title":{},"body":{"injectables/ZipkinExporterService.html":{}}}],["exporter.service.ts:17",{"_index":100,"title":{},"body":{"injectables/ConsoleSpanExporterService.html":{}}}],["exporter.service.ts:18",{"_index":159,"title":{},"body":{"injectables/JaegerExporterService.html":{}}}],["exporter.service.ts:23",{"_index":335,"title":{},"body":{"injectables/OtelcolExporterService.html":{}}}],["exporter.service.ts:32",{"_index":345,"title":{},"body":{"injectables/SpanExporterService.html":{}}}],["exporter.service.ts:34",{"_index":355,"title":{},"body":{"injectables/ZipkinExporterService.html":{}}}],["exporter.service.ts:37",{"_index":161,"title":{},"body":{"injectables/JaegerExporterService.html":{}}}],["exporter.service.ts:40",{"_index":336,"title":{},"body":{"injectables/OtelcolExporterService.html":{}}}],["exporterconfig",{"_index":165,"title":{},"body":{"injectables/JaegerExporterService.html":{},"injectables/ZipkinExporterService.html":{}}}],["exports",{"_index":321,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{},"overview.html":{}}}],["express",{"_index":831,"title":{},"body":{"license.html":{}}}],["f",{"_index":548,"title":{},"body":{"index.html":{}}}],["factory",{"_index":110,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{},"injectables/SpanExporterService.html":{},"miscellaneous/functions.html":{}}}],["failure",{"_index":869,"title":{},"body":{"license.html":{}}}],["false",{"_index":492,"title":{},"body":{"index.html":{}}}],["features",{"_index":374,"title":{},"body":{"changelog.html":{}}}],["fee",{"_index":878,"title":{},"body":{"license.html":{}}}],["fields",{"_index":901,"title":{},"body":{"license.html":{}}}],["fifty",{"_index":617,"title":{},"body":{"license.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/B3PropagatorService.html":{},"interfaces/CommonCollectorConfig.html":{},"injectables/CompositePropagatorService.html":{},"injectables/ConsoleSpanExporterService.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"interfaces/IExporter.html":{},"interfaces/IPropagator.html":{},"interfaces/JaegerCollectorConfig.html":{},"injectables/JaegerExporterService.html":{},"injectables/NoopHttpTextPropagatorService.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"injectables/ZipkinExporterService.html":{},"changelog.html":{},"coverage.html":{},"license.html":{}}}],["filed",{"_index":751,"title":{},"body":{"license.html":{}}}],["files",{"_index":635,"title":{},"body":{"license.html":{}}}],["finalize",{"_index":246,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["fitness",{"_index":836,"title":{},"body":{"license.html":{}}}],["fix",{"_index":558,"title":{},"body":{"index.html":{}}}],["fixes",{"_index":397,"title":{},"body":{"changelog.html":{}}}],["following",{"_index":756,"title":{},"body":{"license.html":{}}}],["form",{"_index":628,"title":{},"body":{"license.html":{}}}],["format",{"_index":911,"title":{},"body":{"license.html":{}}}],["forroot",{"_index":309,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{}}}],["forroot(config",{"_index":310,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{}}}],["free",{"_index":712,"title":{},"body":{"license.html":{}}}],["function",{"_index":128,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{},"injectables/SpanExporterService.html":{},"coverage.html":{}}}],["functions",{"_index":473,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generally",{"_index":520,"title":{},"body":{"index.html":{}}}],["generated",{"_index":642,"title":{},"body":{"license.html":{}}}],["getexporter",{"_index":99,"title":{},"body":{"injectables/ConsoleSpanExporterService.html":{},"interfaces/IExporter.html":{},"injectables/JaegerExporterService.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"injectables/ZipkinExporterService.html":{}}}],["getpropagator",{"_index":12,"title":{},"body":{"injectables/B3PropagatorService.html":{},"injectables/CompositePropagatorService.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"interfaces/IPropagator.html":{},"injectables/NoopHttpTextPropagatorService.html":{}}}],["getting",{"_index":358,"title":{"changelog.html":{},"index.html":{},"license.html":{},"todo.html":{}},"body":{"index.html":{}}}],["gettracer('angular",{"_index":277,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["github",{"_index":937,"title":{},"body":{"todo.html":{}}}],["give",{"_index":140,"title":{},"body":{"interfaces/IExporter.html":{},"interfaces/IPropagator.html":{},"license.html":{}}}],["global",{"_index":483,"title":{},"body":{"index.html":{}}}],["goodwill",{"_index":866,"title":{},"body":{"license.html":{}}}],["governing",{"_index":925,"title":{},"body":{"license.html":{}}}],["grant",{"_index":702,"title":{},"body":{"license.html":{}}}],["granted",{"_index":627,"title":{},"body":{"license.html":{}}}],["granting",{"_index":596,"title":{},"body":{"license.html":{}}}],["grants",{"_index":705,"title":{},"body":{"license.html":{}}}],["graph",{"_index":927,"title":{},"body":{"modules.html":{}}}],["grossly",{"_index":853,"title":{},"body":{"license.html":{}}}],["guidelines",{"_index":369,"title":{},"body":{"changelog.html":{}}}],["harmless",{"_index":893,"title":{},"body":{"license.html":{}}}],["header",{"_index":208,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{},"changelog.html":{},"index.html":{}}}],["here",{"_index":554,"title":{},"body":{"index.html":{},"todo.html":{}}}],["hereby",{"_index":704,"title":{},"body":{"license.html":{}}}],["herein",{"_index":803,"title":{},"body":{"license.html":{}}}],["highlight",{"_index":462,"title":{},"body":{"dependencies.html":{}}}],["hold",{"_index":892,"title":{},"body":{"license.html":{}}}],["host",{"_index":77,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"injectables/JaegerExporterService.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"index.html":{}}}],["http",{"_index":116,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{},"injectables/NoopHttpTextPropagatorService.html":{},"coverage.html":{}}}],["http.interceptor",{"_index":318,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{}}}],["http.interceptor.ts",{"_index":178,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{},"coverage.html":{}}}],["http.interceptor.ts:112",{"_index":200,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["http.interceptor.ts:137",{"_index":206,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["http.interceptor.ts:159",{"_index":212,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["http.interceptor.ts:173",{"_index":217,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["http.interceptor.ts:189",{"_index":191,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["http.interceptor.ts:42",{"_index":235,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["http.interceptor.ts:46",{"_index":189,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["http.interceptor.ts:81",{"_index":225,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["http.method",{"_index":282,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["http.url",{"_index":284,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["http://localhost:16686",{"_index":553,"title":{},"body":{"index.html":{}}}],["http://localhost:4200",{"_index":542,"title":{},"body":{"index.html":{}}}],["http://localhost:9090/v1/trace",{"_index":75,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"index.html":{}}}],["http://localhost:9411/api/v2/spans",{"_index":80,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"index.html":{}}}],["http://www.apache.org/licenses",{"_index":579,"title":{},"body":{"license.html":{}}}],["http://www.apache.org/licenses/license",{"_index":922,"title":{},"body":{"license.html":{}}}],["http_interceptors",{"_index":315,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{},"index.html":{}}}],["httpclientmodule",{"_index":316,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{},"index.html":{}}}],["httperrorresponse",{"_index":238,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["httpevent",{"_index":236,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["httphandler",{"_index":224,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["httpinterceptor",{"_index":228,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{},"index.html":{}}}],["httprequest",{"_index":199,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["httpresponse",{"_index":237,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["https://github.com/open",{"_index":495,"title":{},"body":{"index.html":{}}}],["httptextpropagator",{"_index":19,"title":{},"body":{"injectables/B3PropagatorService.html":{},"injectables/CompositePropagatorService.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"interfaces/IPropagator.html":{},"injectables/NoopHttpTextPropagatorService.html":{}}}],["httptextpropagatorservice",{"_index":106,"title":{"injectables/HttpTextPropagatorService.html":{}},"body":{"injectables/HttpTextPropagatorService.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"coverage.html":{}}}],["httptextpropagatorservicefactory",{"_index":122,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["httptextpropagatorservicefactory(config",{"_index":476,"title":{},"body":{"miscellaneous/functions.html":{}}}],["httptrace",{"_index":66,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["httptracecontext",{"_index":67,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"injectables/CompositePropagatorService.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["httptracecontextpropagatorservice",{"_index":115,"title":{"injectables/HttpTraceContextPropagatorService.html":{}},"body":{"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["identification",{"_index":916,"title":{},"body":{"license.html":{}}}],["identifier",{"_index":429,"title":{},"body":{"coverage.html":{}}}],["identifying",{"_index":905,"title":{},"body":{"license.html":{}}}],["iexporter",{"_index":103,"title":{"interfaces/IExporter.html":{}},"body":{"injectables/ConsoleSpanExporterService.html":{},"interfaces/IExporter.html":{},"injectables/JaegerExporterService.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"injectables/ZipkinExporterService.html":{},"coverage.html":{}}}],["if(sampleconfig===undefined",{"_index":301,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["ii",{"_index":615,"title":{},"body":{"license.html":{}}}],["iii",{"_index":622,"title":{},"body":{"license.html":{}}}],["implement",{"_index":529,"title":{},"body":{"index.html":{}}}],["implementation",{"_index":144,"title":{},"body":{"interfaces/IPropagator.html":{},"index.html":{}}}],["implements",{"_index":30,"title":{},"body":{"injectables/B3PropagatorService.html":{},"injectables/CompositePropagatorService.html":{},"injectables/ConsoleSpanExporterService.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"injectables/JaegerExporterService.html":{},"injectables/NoopHttpTextPropagatorService.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"injectables/ZipkinExporterService.html":{}}}],["implied",{"_index":832,"title":{},"body":{"license.html":{}}}],["import",{"_index":20,"title":{},"body":{"injectables/B3PropagatorService.html":{},"interfaces/CommonCollectorConfig.html":{},"injectables/CompositePropagatorService.html":{},"injectables/ConsoleSpanExporterService.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"interfaces/IExporter.html":{},"interfaces/IPropagator.html":{},"interfaces/JaegerCollectorConfig.html":{},"injectables/JaegerExporterService.html":{},"injectables/NoopHttpTextPropagatorService.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"injectables/ZipkinExporterService.html":{},"index.html":{},"license.html":{}}}],["imports",{"_index":320,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{},"index.html":{}}}],["improving",{"_index":691,"title":{},"body":{"license.html":{}}}],["inability",{"_index":864,"title":{},"body":{"license.html":{}}}],["incidental",{"_index":859,"title":{},"body":{"license.html":{}}}],["include",{"_index":501,"title":{},"body":{"index.html":{},"license.html":{}}}],["included",{"_index":651,"title":{},"body":{"license.html":{}}}],["includes",{"_index":773,"title":{},"body":{"license.html":{}}}],["including",{"_index":632,"title":{},"body":{"license.html":{}}}],["inclusion",{"_index":674,"title":{},"body":{"license.html":{}}}],["incorporated",{"_index":700,"title":{},"body":{"license.html":{}}}],["incurred",{"_index":894,"title":{},"body":{"license.html":{}}}],["indemnify",{"_index":890,"title":{},"body":{"license.html":{}}}],["indemnity",{"_index":881,"title":{},"body":{"license.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"injectables/B3PropagatorService.html":{},"interfaces/CommonCollectorConfig.html":{},"injectables/CompositePropagatorService.html":{},"injectables/ConsoleSpanExporterService.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"interfaces/IExporter.html":{},"interfaces/IPropagator.html":{},"interfaces/JaegerCollectorConfig.html":{},"injectables/JaegerExporterService.html":{},"injectables/NoopHttpTextPropagatorService.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"injectables/ZipkinExporterService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indicated",{"_index":649,"title":{},"body":{"license.html":{}}}],["indirect",{"_index":608,"title":{},"body":{"license.html":{}}}],["individual",{"_index":624,"title":{},"body":{"license.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/B3PropagatorService.html":{},"interfaces/CommonCollectorConfig.html":{},"injectables/CompositePropagatorService.html":{},"injectables/ConsoleSpanExporterService.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"interfaces/IExporter.html":{},"interfaces/IPropagator.html":{},"interfaces/JaegerCollectorConfig.html":{},"injectables/JaegerExporterService.html":{},"injectables/NoopHttpTextPropagatorService.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"injectables/ZipkinExporterService.html":{},"index.html":{}}}],["information",{"_index":906,"title":{},"body":{"license.html":{}}}],["informational",{"_index":784,"title":{},"body":{"license.html":{}}}],["infringed",{"_index":733,"title":{},"body":{"license.html":{}}}],["infringement",{"_index":747,"title":{},"body":{"license.html":{}}}],["initialise",{"_index":201,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{},"index.html":{}}}],["initspan",{"_index":183,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["initspan(request",{"_index":198,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["inject",{"_index":162,"title":{},"body":{"injectables/JaegerExporterService.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"injectables/OtelcolExporterService.html":{},"injectables/ZipkinExporterService.html":{}}}],["inject(httptextpropagatorservice",{"_index":253,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["inject(opentelemetryinjectconfig",{"_index":251,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["inject(spanexporterservice",{"_index":252,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["injectable",{"_index":0,"title":{"injectables/B3PropagatorService.html":{},"injectables/CompositePropagatorService.html":{},"injectables/ConsoleSpanExporterService.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"injectables/JaegerExporterService.html":{},"injectables/NoopHttpTextPropagatorService.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"injectables/ZipkinExporterService.html":{}},"body":{"injectables/B3PropagatorService.html":{},"injectables/CompositePropagatorService.html":{},"injectables/ConsoleSpanExporterService.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"injectables/JaegerExporterService.html":{},"injectables/NoopHttpTextPropagatorService.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"injectables/ZipkinExporterService.html":{},"coverage.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/B3PropagatorService.html":{},"injectables/CompositePropagatorService.html":{},"injectables/ConsoleSpanExporterService.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"injectables/JaegerExporterService.html":{},"injectables/NoopHttpTextPropagatorService.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"injectables/ZipkinExporterService.html":{},"overview.html":{}}}],["injectcontextandheader",{"_index":184,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["injectcontextandheader(span",{"_index":205,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["injected",{"_index":109,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["injection",{"_index":88,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"miscellaneous/variables.html":{}}}],["injectiontoken",{"_index":60,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{}}}],["injectiontoken('opentelemetry.config",{"_index":90,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"miscellaneous/variables.html":{}}}],["inmplementation",{"_index":141,"title":{},"body":{"interfaces/IExporter.html":{}}}],["insert",{"_index":213,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{},"index.html":{}}}],["insertconsolespanexporter",{"_index":185,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["insertconsolespanexporter(console",{"_index":211,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["insertspanprocessorproductionmode",{"_index":186,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["insertspanprocessorproductionmode(production",{"_index":216,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["install",{"_index":487,"title":{},"body":{"index.html":{}}}],["installation",{"_index":482,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":268,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["institute",{"_index":737,"title":{},"body":{"license.html":{}}}],["intentionally",{"_index":672,"title":{},"body":{"license.html":{}}}],["intercept",{"_index":187,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{},"index.html":{}}}],["intercept(request",{"_index":222,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["intercepted",{"_index":203,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["interceptor",{"_index":174,"title":{"interceptors/OpenTelemetryHttpInterceptor.html":{}},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{},"coverage.html":{},"index.html":{},"todo.html":{}}}],["interceptor.module.ts",{"_index":307,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{}}}],["interceptor.module.ts:30",{"_index":311,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{}}}],["interceptor/opentelemetry",{"_index":317,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{}}}],["interceptor/src/lib/configuration/opentelemetry",{"_index":38,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["interceptor/src/lib/interceptor/opentelemetry",{"_index":177,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{},"coverage.html":{}}}],["interceptor/src/lib/opentelemetry",{"_index":306,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{}}}],["interceptor/src/lib/services/exporter/console",{"_index":95,"title":{},"body":{"injectables/ConsoleSpanExporterService.html":{},"coverage.html":{}}}],["interceptor/src/lib/services/exporter/exporter.interface.ts",{"_index":137,"title":{},"body":{"interfaces/IExporter.html":{},"coverage.html":{}}}],["interceptor/src/lib/services/exporter/exporter.interface.ts:11",{"_index":139,"title":{},"body":{"interfaces/IExporter.html":{}}}],["interceptor/src/lib/services/exporter/jaeger",{"_index":146,"title":{},"body":{"injectables/JaegerExporterService.html":{},"coverage.html":{}}}],["interceptor/src/lib/services/exporter/otelcol",{"_index":334,"title":{},"body":{"injectables/OtelcolExporterService.html":{},"coverage.html":{}}}],["interceptor/src/lib/services/exporter/span",{"_index":343,"title":{},"body":{"injectables/SpanExporterService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["interceptor/src/lib/services/exporter/zipkin",{"_index":352,"title":{},"body":{"injectables/ZipkinExporterService.html":{},"coverage.html":{}}}],["interceptor/src/lib/services/propagator/b3",{"_index":7,"title":{},"body":{"injectables/B3PropagatorService.html":{},"coverage.html":{}}}],["interceptor/src/lib/services/propagator/composite",{"_index":92,"title":{},"body":{"injectables/CompositePropagatorService.html":{},"coverage.html":{}}}],["interceptor/src/lib/services/propagator/http",{"_index":107,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["interceptor/src/lib/services/propagator/noop",{"_index":171,"title":{},"body":{"injectables/NoopHttpTextPropagatorService.html":{},"coverage.html":{}}}],["interceptor/src/lib/services/propagator/propagator.interface.ts",{"_index":142,"title":{},"body":{"interfaces/IPropagator.html":{},"coverage.html":{}}}],["interceptor/src/lib/services/propagator/propagator.interface.ts:11",{"_index":143,"title":{},"body":{"interfaces/IPropagator.html":{}}}],["interceptors",{"_index":176,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["interface",{"_index":35,"title":{"interfaces/CommonCollectorConfig.html":{},"interfaces/IExporter.html":{},"interfaces/IPropagator.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{}},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/IExporter.html":{},"interfaces/IPropagator.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"coverage.html":{},"index.html":{}}}],["interfaces",{"_index":37,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/IExporter.html":{},"interfaces/IPropagator.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"license.html":{},"overview.html":{}}}],["ipropagator",{"_index":22,"title":{"interfaces/IPropagator.html":{}},"body":{"injectables/B3PropagatorService.html":{},"injectables/CompositePropagatorService.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"interfaces/IPropagator.html":{},"injectables/NoopHttpTextPropagatorService.html":{},"coverage.html":{}}}],["irrevocable",{"_index":713,"title":{},"body":{"license.html":{}}}],["isn't",{"_index":148,"title":{},"body":{"injectables/JaegerExporterService.html":{},"injectables/ZipkinExporterService.html":{}}}],["issue",{"_index":686,"title":{},"body":{"license.html":{},"todo.html":{}}}],["it's",{"_index":153,"title":{},"body":{"injectables/JaegerExporterService.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"injectables/ZipkinExporterService.html":{},"index.html":{},"todo.html":{}}}],["jaeger",{"_index":62,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/SpanExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"todo.html":{}}}],["jaeger's",{"_index":510,"title":{},"body":{"index.html":{}}}],["jaegercollectorconfig",{"_index":76,"title":{"interfaces/JaegerCollectorConfig.html":{}},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"coverage.html":{},"index.html":{}}}],["jaegerconfig",{"_index":83,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"index.html":{}}}],["jaegerexporter",{"_index":147,"title":{},"body":{"injectables/JaegerExporterService.html":{}}}],["jaegerexporterservice",{"_index":145,"title":{"injectables/JaegerExporterService.html":{}},"body":{"injectables/JaegerExporterService.html":{},"injectables/SpanExporterService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["january",{"_index":577,"title":{},"body":{"license.html":{}}}],["js",{"_index":463,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["js/tree/master/packages/opentelemetry",{"_index":497,"title":{},"body":{"index.html":{}}}],["json.stringify(event.body",{"_index":273,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["json.stringify(event.error",{"_index":275,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["jsonp",{"_index":413,"title":{},"body":{"changelog.html":{}}}],["jufab/opentelemetry",{"_index":478,"title":{},"body":{"index.html":{}}}],["key",{"_index":291,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["kind",{"_index":830,"title":{},"body":{"license.html":{}}}],["language",{"_index":924,"title":{},"body":{"license.html":{}}}],["law",{"_index":825,"title":{},"body":{"license.html":{}}}],["lawsuit",{"_index":743,"title":{},"body":{"license.html":{}}}],["legal",{"_index":597,"title":{},"body":{"license.html":{}}}],["legend",{"_index":930,"title":{},"body":{"overview.html":{}}}],["liability",{"_index":848,"title":{},"body":{"license.html":{}}}],["liable",{"_index":856,"title":{},"body":{"license.html":{}}}],["library",{"_index":479,"title":{},"body":{"index.html":{}}}],["licensable",{"_index":731,"title":{},"body":{"license.html":{}}}],["license",{"_index":574,"title":{"license.html":{}},"body":{"license.html":{}}}],["license.you",{"_index":791,"title":{},"body":{"license.html":{}}}],["licensed",{"_index":919,"title":{},"body":{"license.html":{}}}],["licenses",{"_index":748,"title":{},"body":{"license.html":{}}}],["licensor",{"_index":591,"title":{},"body":{"license.html":{}}}],["limitation",{"_index":833,"title":{},"body":{"license.html":{}}}],["limitations",{"_index":926,"title":{},"body":{"license.html":{}}}],["limited",{"_index":633,"title":{},"body":{"license.html":{}}}],["link",{"_index":667,"title":{},"body":{"license.html":{}}}],["list",{"_index":938,"title":{},"body":{"todo.html":{}}}],["lists",{"_index":684,"title":{},"body":{"license.html":{}}}],["litigation",{"_index":738,"title":{},"body":{"license.html":{}}}],["loaded",{"_index":326,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{}}}],["localhost",{"_index":509,"title":{},"body":{"index.html":{}}}],["loss",{"_index":865,"title":{},"body":{"license.html":{}}}],["losses",{"_index":872,"title":{},"body":{"license.html":{}}}],["made",{"_index":648,"title":{},"body":{"license.html":{}}}],["mailing",{"_index":683,"title":{},"body":{"license.html":{}}}],["make",{"_index":724,"title":{},"body":{"license.html":{}}}],["making",{"_index":630,"title":{},"body":{"license.html":{}}}],["malfunction",{"_index":870,"title":{},"body":{"license.html":{}}}],["managed",{"_index":688,"title":{},"body":{"license.html":{}}}],["management",{"_index":611,"title":{},"body":{"license.html":{}}}],["manager",{"_index":233,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["marked",{"_index":694,"title":{},"body":{"license.html":{}}}],["marks",{"_index":813,"title":{},"body":{"license.html":{}}}],["matching",{"_index":33,"title":{},"body":{"injectables/B3PropagatorService.html":{},"interfaces/CommonCollectorConfig.html":{},"injectables/CompositePropagatorService.html":{},"injectables/ConsoleSpanExporterService.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"interfaces/IExporter.html":{},"interfaces/IPropagator.html":{},"interfaces/JaegerCollectorConfig.html":{},"injectables/JaegerExporterService.html":{},"injectables/NoopHttpTextPropagatorService.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"injectables/ZipkinExporterService.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["mean",{"_index":586,"title":{},"body":{"license.html":{}}}],["means",{"_index":605,"title":{},"body":{"license.html":{}}}],["mechanical",{"_index":638,"title":{},"body":{"license.html":{}}}],["media",{"_index":644,"title":{},"body":{"license.html":{}}}],["medium",{"_index":754,"title":{},"body":{"license.html":{}}}],["meet",{"_index":755,"title":{},"body":{"license.html":{}}}],["member",{"_index":563,"title":{},"body":{"index.html":{}}}],["merchantability",{"_index":835,"title":{},"body":{"license.html":{}}}],["merely",{"_index":666,"title":{},"body":{"license.html":{}}}],["method",{"_index":227,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{},"index.html":{}}}],["methods",{"_index":11,"title":{},"body":{"injectables/B3PropagatorService.html":{},"injectables/CompositePropagatorService.html":{},"injectables/ConsoleSpanExporterService.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"interfaces/IExporter.html":{},"interfaces/IPropagator.html":{},"injectables/JaegerExporterService.html":{},"injectables/NoopHttpTextPropagatorService.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"injectables/ZipkinExporterService.html":{}}}],["miscellaneous",{"_index":470,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":219,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["modifications",{"_index":631,"title":{},"body":{"license.html":{}}}],["modified",{"_index":760,"title":{},"body":{"license.html":{}}}],["modify",{"_index":785,"title":{},"body":{"license.html":{}}}],["modifying",{"_index":790,"title":{},"body":{"license.html":{}}}],["module",{"_index":303,"title":{"modules/OpenTelemetryInterceptorModule.html":{}},"body":{"index.html":{},"overview.html":{}}}],["modules",{"_index":305,"title":{"modules.html":{}},"body":{"modules/OpenTelemetryInterceptorModule.html":{},"modules.html":{}}}],["modulewithproviders",{"_index":312,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{}}}],["moment",{"_index":150,"title":{},"body":{"injectables/JaegerExporterService.html":{},"injectables/ZipkinExporterService.html":{}}}],["more",{"_index":494,"title":{},"body":{"index.html":{},"license.html":{},"todo.html":{}}}],["multi",{"_index":332,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{}}}],["name",{"_index":58,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"injectables/JaegerExporterService.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/OtelcolExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"injectables/ZipkinExporterService.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{}}}],["names",{"_index":812,"title":{},"body":{"license.html":{}}}],["namespace",{"_index":560,"title":{},"body":{"index.html":{}}}],["necessarily",{"_index":732,"title":{},"body":{"license.html":{}}}],["need",{"_index":565,"title":{},"body":{"index.html":{}}}],["negligence",{"_index":851,"title":{},"body":{"license.html":{}}}],["negligent",{"_index":854,"title":{},"body":{"license.html":{}}}],["new",{"_index":31,"title":{},"body":{"injectables/B3PropagatorService.html":{},"interfaces/CommonCollectorConfig.html":{},"injectables/CompositePropagatorService.html":{},"injectables/ConsoleSpanExporterService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"interfaces/JaegerCollectorConfig.html":{},"injectables/JaegerExporterService.html":{},"injectables/NoopHttpTextPropagatorService.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/OtelcolExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"injectables/ZipkinExporterService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":223,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["next.handle(tracedreq).pipe",{"_index":266,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["ngmodule",{"_index":313,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{},"index.html":{}}}],["ngx",{"_index":461,"title":{},"body":{"dependencies.html":{}}}],["nodejs",{"_index":561,"title":{},"body":{"index.html":{}}}],["non",{"_index":708,"title":{},"body":{"license.html":{}}}],["noop",{"_index":120,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{},"miscellaneous/functions.html":{}}}],["noophttptextpropagator",{"_index":173,"title":{},"body":{"injectables/NoopHttpTextPropagatorService.html":{}}}],["noophttptextpropagatorservice",{"_index":119,"title":{"injectables/NoopHttpTextPropagatorService.html":{}},"body":{"injectables/HttpTextPropagatorService.html":{},"injectables/NoopHttpTextPropagatorService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["normally",{"_index":782,"title":{},"body":{"license.html":{}}}],["notable",{"_index":361,"title":{},"body":{"changelog.html":{}}}],["nothing",{"_index":802,"title":{},"body":{"license.html":{}}}],["notice",{"_index":650,"title":{},"body":{"license.html":{}}}],["notices",{"_index":763,"title":{},"body":{"license.html":{}}}],["notwithstanding",{"_index":800,"title":{},"body":{"license.html":{}}}],["npm",{"_index":486,"title":{},"body":{"index.html":{}}}],["null",{"_index":129,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{},"injectables/SpanExporterService.html":{}}}],["number",{"_index":53,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{}}}],["object",{"_index":636,"title":{},"body":{"license.html":{}}}],["obligations",{"_index":882,"title":{},"body":{"license.html":{}}}],["observable",{"_index":231,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["obtain",{"_index":921,"title":{},"body":{"license.html":{}}}],["offer",{"_index":725,"title":{},"body":{"license.html":{}}}],["ok",{"_index":378,"title":{},"body":{"changelog.html":{}}}],["one",{"_index":155,"title":{},"body":{"injectables/JaegerExporterService.html":{},"injectables/ZipkinExporterService.html":{},"license.html":{}}}],["open",{"_index":541,"title":{},"body":{"index.html":{}}}],["opentelemetry",{"_index":70,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"index.html":{},"todo.html":{}}}],["opentelemetry/api",{"_index":24,"title":{},"body":{"injectables/B3PropagatorService.html":{},"injectables/CompositePropagatorService.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"interfaces/IPropagator.html":{},"injectables/NoopHttpTextPropagatorService.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["opentelemetry/core",{"_index":25,"title":{},"body":{"injectables/B3PropagatorService.html":{},"injectables/CompositePropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["opentelemetry/exporter",{"_index":339,"title":{},"body":{"injectables/OtelcolExporterService.html":{},"dependencies.html":{},"index.html":{}}}],["opentelemetry/tracing",{"_index":105,"title":{},"body":{"injectables/ConsoleSpanExporterService.html":{},"interfaces/IExporter.html":{},"injectables/JaegerExporterService.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"injectables/ZipkinExporterService.html":{}}}],["opentelemetry/web",{"_index":242,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{},"dependencies.html":{},"index.html":{}}}],["opentelemetryconfig",{"_index":81,"title":{"interfaces/OpenTelemetryConfig.html":{}},"body":{"interfaces/CommonCollectorConfig.html":{},"injectables/HttpTextPropagatorService.html":{},"interfaces/JaegerCollectorConfig.html":{},"injectables/JaegerExporterService.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"injectables/ZipkinExporterService.html":{},"coverage.html":{},"index.html":{}}}],["opentelemetryhttpinterceptor",{"_index":175,"title":{"interceptors/OpenTelemetryHttpInterceptor.html":{}},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"coverage.html":{}}}],["opentelemetryinjectconfig",{"_index":86,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"injectables/HttpTextPropagatorService.html":{},"interfaces/JaegerCollectorConfig.html":{},"injectables/JaegerExporterService.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"injectables/ZipkinExporterService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["opentelemetryinterceptor",{"_index":179,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{},"index.html":{}}}],["opentelemetryinterceptormodule",{"_index":304,"title":{"modules/OpenTelemetryInterceptorModule.html":{}},"body":{"modules/OpenTelemetryInterceptorModule.html":{},"index.html":{},"modules.html":{}}}],["opentelemetryinterceptormodule.forroot(environment.opentelemetryconfig",{"_index":526,"title":{},"body":{"index.html":{}}}],["opentelemtery",{"_index":485,"title":{},"body":{"index.html":{}}}],["operationnal",{"_index":149,"title":{},"body":{"injectables/JaegerExporterService.html":{},"injectables/ZipkinExporterService.html":{}}}],["optional",{"_index":44,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"injectables/JaegerExporterService.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/OtelcolExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"injectables/ZipkinExporterService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["origin",{"_index":819,"title":{},"body":{"license.html":{}}}],["original",{"_index":210,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{},"license.html":{}}}],["otelcol",{"_index":64,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/SpanExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["otelcol,zipkin,jaeger",{"_index":518,"title":{},"body":{"index.html":{}}}],["otelcolconfig",{"_index":85,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/OtelcolExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"index.html":{}}}],["otelcolexporterservice",{"_index":333,"title":{"injectables/OtelcolExporterService.html":{}},"body":{"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["otelcollectorconfig",{"_index":71,"title":{"interfaces/OtelCollectorConfig.html":{}},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"coverage.html":{},"index.html":{}}}],["otherwise",{"_index":221,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{},"license.html":{}}}],["out",{"_index":863,"title":{},"body":{"license.html":{},"overview.html":{}}}],["outstanding",{"_index":620,"title":{},"body":{"license.html":{}}}],["overide",{"_index":226,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["overview",{"_index":929,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":593,"title":{},"body":{"license.html":{}}}],["ownership",{"_index":616,"title":{},"body":{"license.html":{}}}],["package",{"_index":442,"title":{"dependencies.html":{}},"body":{"index.html":{}}}],["page",{"_index":914,"title":{},"body":{"license.html":{}}}],["param",{"_index":127,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{},"injectables/JaegerExporterService.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"injectables/ZipkinExporterService.html":{}}}],["parameters",{"_index":160,"title":{},"body":{"injectables/JaegerExporterService.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"injectables/OtelcolExporterService.html":{},"injectables/ZipkinExporterService.html":{},"miscellaneous/functions.html":{}}}],["parentmodule",{"_index":322,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{}}}],["parser",{"_index":457,"title":{},"body":{"dependencies.html":{}}}],["part",{"_index":771,"title":{},"body":{"license.html":{}}}],["particular",{"_index":837,"title":{},"body":{"license.html":{}}}],["party",{"_index":781,"title":{},"body":{"license.html":{}}}],["patent",{"_index":720,"title":{},"body":{"license.html":{}}}],["percent",{"_index":618,"title":{},"body":{"license.html":{}}}],["percentage",{"_index":505,"title":{},"body":{"index.html":{}}}],["perform",{"_index":717,"title":{},"body":{"license.html":{}}}],["permission",{"_index":810,"title":{},"body":{"license.html":{}}}],["permissions",{"_index":626,"title":{},"body":{"license.html":{}}}],["perpetual",{"_index":706,"title":{},"body":{"license.html":{}}}],["pertain",{"_index":770,"title":{},"body":{"license.html":{}}}],["places",{"_index":776,"title":{},"body":{"license.html":{}}}],["port",{"_index":78,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"injectables/JaegerExporterService.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"index.html":{}}}],["possibility",{"_index":875,"title":{},"body":{"license.html":{}}}],["power",{"_index":606,"title":{},"body":{"license.html":{}}}],["preferred",{"_index":629,"title":{},"body":{"license.html":{}}}],["prepare",{"_index":715,"title":{},"body":{"license.html":{},"todo.html":{}}}],["present",{"_index":154,"title":{},"body":{"injectables/JaegerExporterService.html":{},"injectables/ZipkinExporterService.html":{}}}],["printed",{"_index":913,"title":{},"body":{"license.html":{}}}],["private",{"_index":163,"title":{},"body":{"injectables/JaegerExporterService.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"injectables/OtelcolExporterService.html":{},"injectables/ZipkinExporterService.html":{}}}],["probability",{"_index":192,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["probabilitysampler",{"_index":46,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"index.html":{}}}],["probabilitysampler(sampleconfig",{"_index":302,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["product",{"_index":814,"title":{},"body":{"license.html":{}}}],["production",{"_index":47,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"index.html":{}}}],["progress",{"_index":383,"title":{},"body":{"changelog.html":{},"todo.html":{}}}],["project",{"_index":363,"title":{},"body":{"changelog.html":{},"index.html":{},"todo.html":{}}}],["projects/.../http",{"_index":474,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../opentelemetry",{"_index":472,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["projects/.../span",{"_index":475,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/example",{"_index":535,"title":{},"body":{"index.html":{}}}],["projects/opentelemetry",{"_index":6,"title":{},"body":{"injectables/B3PropagatorService.html":{},"interfaces/CommonCollectorConfig.html":{},"injectables/CompositePropagatorService.html":{},"injectables/ConsoleSpanExporterService.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"interfaces/IExporter.html":{},"interfaces/IPropagator.html":{},"interfaces/JaegerCollectorConfig.html":{},"injectables/JaegerExporterService.html":{},"injectables/NoopHttpTextPropagatorService.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"injectables/ZipkinExporterService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["prominent",{"_index":762,"title":{},"body":{"license.html":{}}}],["propagation",{"_index":531,"title":{},"body":{"index.html":{}}}],["propagator",{"_index":48,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"injectables/HttpTextPropagatorService.html":{},"interfaces/IPropagator.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["propagator.b3",{"_index":133,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{},"index.html":{}}}],["propagator.composite",{"_index":136,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{}}}],["propagator.httptrace",{"_index":135,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{}}}],["propagator.interface",{"_index":23,"title":{},"body":{"injectables/B3PropagatorService.html":{},"injectables/CompositePropagatorService.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"injectables/NoopHttpTextPropagatorService.html":{}}}],["propagator.service",{"_index":118,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["propagator.service.ts",{"_index":8,"title":{},"body":{"injectables/B3PropagatorService.html":{},"injectables/CompositePropagatorService.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"injectables/NoopHttpTextPropagatorService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["propagator.service.ts:16",{"_index":172,"title":{},"body":{"injectables/NoopHttpTextPropagatorService.html":{}}}],["propagator.service.ts:17",{"_index":14,"title":{},"body":{"injectables/B3PropagatorService.html":{},"injectables/CompositePropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{}}}],["propagator.service.ts:33",{"_index":111,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{}}}],["propagators",{"_index":93,"title":{},"body":{"injectables/CompositePropagatorService.html":{}}}],["properties",{"_index":42,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/OtelcolExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{}}}],["provide",{"_index":126,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["provided",{"_index":653,"title":{},"body":{"license.html":{}}}],["providedin",{"_index":26,"title":{},"body":{"injectables/B3PropagatorService.html":{},"injectables/CompositePropagatorService.html":{},"injectables/ConsoleSpanExporterService.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"injectables/JaegerExporterService.html":{},"injectables/NoopHttpTextPropagatorService.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"injectables/ZipkinExporterService.html":{}}}],["providers",{"_index":329,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{},"index.html":{},"overview.html":{}}}],["provides",{"_index":827,"title":{},"body":{"license.html":{}}}],["public",{"_index":328,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{}}}],["publicly",{"_index":716,"title":{},"body":{"license.html":{}}}],["publish",{"_index":418,"title":{},"body":{"changelog.html":{}}}],["purpose",{"_index":689,"title":{},"body":{"license.html":{}}}],["purposes",{"_index":604,"title":{},"body":{"license.html":{}}}],["readable",{"_index":774,"title":{},"body":{"license.html":{}}}],["readme",{"_index":422,"title":{},"body":{"changelog.html":{}}}],["reason",{"_index":896,"title":{},"body":{"license.html":{}}}],["reasonable",{"_index":816,"title":{},"body":{"license.html":{}}}],["received",{"_index":698,"title":{},"body":{"license.html":{}}}],["recipients",{"_index":757,"title":{},"body":{"license.html":{}}}],["recommend",{"_index":517,"title":{},"body":{"index.html":{},"license.html":{}}}],["redistributing",{"_index":843,"title":{},"body":{"license.html":{}}}],["redistribution",{"_index":752,"title":{},"body":{"license.html":{}}}],["regarding",{"_index":808,"title":{},"body":{"license.html":{}}}],["remain",{"_index":664,"title":{},"body":{"license.html":{}}}],["replaced",{"_index":904,"title":{},"body":{"license.html":{}}}],["represent",{"_index":662,"title":{},"body":{"license.html":{}}}],["representatives",{"_index":682,"title":{},"body":{"license.html":{}}}],["reproduce",{"_index":714,"title":{},"body":{"license.html":{}}}],["reproducing",{"_index":820,"title":{},"body":{"license.html":{}}}],["reproduction",{"_index":582,"title":{},"body":{"license.html":{}}}],["request",{"_index":202,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["request.clone",{"_index":295,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["request.headers.get(key",{"_index":294,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["request.headers.keys",{"_index":292,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["request.method",{"_index":283,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["request.url",{"_index":280,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["request.urlwithparams",{"_index":285,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["required",{"_index":815,"title":{},"body":{"license.html":{}}}],["reset",{"_index":932,"title":{},"body":{"overview.html":{}}}],["response",{"_index":533,"title":{},"body":{"index.html":{}}}],["responsibility",{"_index":888,"title":{},"body":{"license.html":{}}}],["responsible",{"_index":839,"title":{},"body":{"license.html":{}}}],["result",{"_index":32,"title":{},"body":{"injectables/B3PropagatorService.html":{},"interfaces/CommonCollectorConfig.html":{},"injectables/CompositePropagatorService.html":{},"injectables/ConsoleSpanExporterService.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"interfaces/IExporter.html":{},"interfaces/IPropagator.html":{},"interfaces/JaegerCollectorConfig.html":{},"injectables/JaegerExporterService.html":{},"injectables/NoopHttpTextPropagatorService.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"injectables/ZipkinExporterService.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["resulting",{"_index":637,"title":{},"body":{"license.html":{}}}],["results",{"_index":34,"title":{},"body":{"injectables/B3PropagatorService.html":{},"interfaces/CommonCollectorConfig.html":{},"injectables/CompositePropagatorService.html":{},"injectables/ConsoleSpanExporterService.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"interfaces/IExporter.html":{},"interfaces/IPropagator.html":{},"interfaces/JaegerCollectorConfig.html":{},"injectables/JaegerExporterService.html":{},"injectables/NoopHttpTextPropagatorService.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"injectables/ZipkinExporterService.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["retain",{"_index":767,"title":{},"body":{"license.html":{}}}],["return",{"_index":15,"title":{},"body":{"injectables/B3PropagatorService.html":{},"injectables/CompositePropagatorService.html":{},"injectables/ConsoleSpanExporterService.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"interfaces/IExporter.html":{},"interfaces/IPropagator.html":{},"injectables/JaegerExporterService.html":{},"injectables/NoopHttpTextPropagatorService.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"injectables/ZipkinExporterService.html":{},"miscellaneous/functions.html":{}}}],["returns",{"_index":17,"title":{},"body":{"injectables/B3PropagatorService.html":{},"injectables/CompositePropagatorService.html":{},"injectables/ConsoleSpanExporterService.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"interfaces/IExporter.html":{},"interfaces/IPropagator.html":{},"injectables/JaegerExporterService.html":{},"injectables/NoopHttpTextPropagatorService.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"injectables/ZipkinExporterService.html":{}}}],["revisions",{"_index":659,"title":{},"body":{"license.html":{}}}],["rights",{"_index":884,"title":{},"body":{"license.html":{}}}],["risks",{"_index":845,"title":{},"body":{"license.html":{}}}],["root",{"_index":27,"title":{},"body":{"injectables/B3PropagatorService.html":{},"injectables/CompositePropagatorService.html":{},"injectables/ConsoleSpanExporterService.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"injectables/JaegerExporterService.html":{},"injectables/NoopHttpTextPropagatorService.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"injectables/ZipkinExporterService.html":{}}}],["royalty",{"_index":711,"title":{},"body":{"license.html":{}}}],["run",{"_index":484,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":240,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":247,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["same",{"_index":912,"title":{},"body":{"license.html":{}}}],["sample",{"_index":197,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["sampleconfig",{"_index":196,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["sampler",{"_index":193,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{},"todo.html":{}}}],["samples",{"_index":503,"title":{},"body":{"index.html":{}}}],["sampling",{"_index":380,"title":{},"body":{"changelog.html":{}}}],["section",{"_index":723,"title":{},"body":{"license.html":{}}}],["sections",{"_index":587,"title":{},"body":{"license.html":{}}}],["see",{"_index":365,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{},"todo.html":{}}}],["sell",{"_index":726,"title":{},"body":{"license.html":{}}}],["send",{"_index":493,"title":{},"body":{"index.html":{}}}],["sending",{"_index":556,"title":{},"body":{"index.html":{}}}],["sent",{"_index":681,"title":{},"body":{"license.html":{}}}],["separable",{"_index":665,"title":{},"body":{"license.html":{}}}],["separate",{"_index":805,"title":{},"body":{"license.html":{}}}],["service",{"_index":59,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"injectables/HttpTextPropagatorService.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/SpanExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{}}}],["servicename",{"_index":49,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"injectables/JaegerExporterService.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/OtelcolExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"injectables/ZipkinExporterService.html":{},"index.html":{}}}],["services/exporter/span",{"_index":248,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["services/propagator/http",{"_index":250,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["setactivespan",{"_index":244,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["setheaders",{"_index":296,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["shall",{"_index":585,"title":{},"body":{"license.html":{}}}],["shares",{"_index":621,"title":{},"body":{"license.html":{}}}],["simplespanexporter(sync",{"_index":56,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{}}}],["simplespanprocessor",{"_index":220,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{},"index.html":{}}}],["simplespanprocessor(new",{"_index":298,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["simplespanprocessor(spanexporter",{"_index":300,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["skipself",{"_index":314,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{}}}],["software",{"_index":634,"title":{},"body":{"license.html":{}}}],["sole",{"_index":887,"title":{},"body":{"license.html":{}}}],["solely",{"_index":838,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/B3PropagatorService.html":{},"interfaces/CommonCollectorConfig.html":{},"injectables/CompositePropagatorService.html":{},"injectables/ConsoleSpanExporterService.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"interfaces/IExporter.html":{},"interfaces/IPropagator.html":{},"interfaces/JaegerCollectorConfig.html":{},"injectables/JaegerExporterService.html":{},"injectables/NoopHttpTextPropagatorService.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"injectables/ZipkinExporterService.html":{},"license.html":{}}}],["span",{"_index":96,"title":{},"body":{"injectables/ConsoleSpanExporterService.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"injectables/SpanExporterService.html":{},"coverage.html":{},"index.html":{}}}],["span.addevent('error",{"_index":274,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["span.addevent('response",{"_index":271,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["span.end",{"_index":276,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["span.setattribute('http.status_code",{"_index":269,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["spanexporter",{"_index":102,"title":{},"body":{"injectables/ConsoleSpanExporterService.html":{},"interfaces/IExporter.html":{},"injectables/JaegerExporterService.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"injectables/ZipkinExporterService.html":{}}}],["spanexporterservice",{"_index":188,"title":{"injectables/SpanExporterService.html":{}},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{},"injectables/SpanExporterService.html":{},"coverage.html":{}}}],["spanexporterservicefactory",{"_index":347,"title":{},"body":{"injectables/SpanExporterService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["spanexporterservicefactory(config",{"_index":477,"title":{},"body":{"miscellaneous/functions.html":{}}}],["special",{"_index":858,"title":{},"body":{"license.html":{}}}],["specific",{"_index":923,"title":{},"body":{"license.html":{}}}],["specified",{"_index":499,"title":{},"body":{"index.html":{}}}],["stackcontextmanager",{"_index":232,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["standard",{"_index":366,"title":{},"body":{"changelog.html":{}}}],["start",{"_index":537,"title":{},"body":{"index.html":{}}}],["start:complete",{"_index":539,"title":{},"body":{"index.html":{}}}],["started",{"_index":359,"title":{"changelog.html":{},"index.html":{},"license.html":{},"todo.html":{}},"body":{"index.html":{}}}],["startspan",{"_index":279,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["state",{"_index":799,"title":{},"body":{"license.html":{}}}],["stated",{"_index":722,"title":{},"body":{"license.html":{}}}],["statement",{"_index":792,"title":{},"body":{"license.html":{}}}],["statements",{"_index":430,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":308,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{}}}],["stating",{"_index":764,"title":{},"body":{"license.html":{}}}],["stoppage",{"_index":867,"title":{},"body":{"license.html":{}}}],["string",{"_index":57,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"index.html":{}}}],["subject",{"_index":412,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["sublicense",{"_index":718,"title":{},"body":{"license.html":{}}}],["submission",{"_index":795,"title":{},"body":{"license.html":{}}}],["submit",{"_index":675,"title":{},"body":{"license.html":{}}}],["submitted",{"_index":673,"title":{},"body":{"license.html":{}}}],["subsequently",{"_index":699,"title":{},"body":{"license.html":{}}}],["such",{"_index":612,"title":{},"body":{"license.html":{}}}],["supersede",{"_index":804,"title":{},"body":{"license.html":{}}}],["support",{"_index":880,"title":{},"body":{"license.html":{}}}],["switch",{"_index":130,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{},"injectables/SpanExporterService.html":{}}}],["sync",{"_index":516,"title":{},"body":{"index.html":{}}}],["syntax",{"_index":910,"title":{},"body":{"license.html":{}}}],["systems",{"_index":685,"title":{},"body":{"license.html":{}}}],["table",{"_index":441,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":440,"title":{},"body":{"coverage.html":{}}}],["tap",{"_index":245,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["task",{"_index":936,"title":{},"body":{"todo.html":{}}}],["telemetry/opentelemetry",{"_index":496,"title":{},"body":{"index.html":{}}}],["terminate",{"_index":749,"title":{},"body":{"license.html":{}}}],["terms",{"_index":580,"title":{},"body":{"license.html":{}}}],["test",{"_index":394,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["text",{"_index":108,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{},"injectables/NoopHttpTextPropagatorService.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["theory",{"_index":849,"title":{},"body":{"license.html":{}}}],["there's",{"_index":544,"title":{},"body":{"index.html":{}}}],["thereof",{"_index":669,"title":{},"body":{"license.html":{}}}],["third",{"_index":780,"title":{},"body":{"license.html":{}}}],["this.config.commonconfig.production",{"_index":257,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["this.configjaeger",{"_index":167,"title":{},"body":{"injectables/JaegerExporterService.html":{}}}],["this.contextmanager",{"_index":262,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["this.contextmanager._currentcontext",{"_index":287,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["this.contextmanager.active",{"_index":286,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["this.defineprobabilitysampler(config.commonconfig.probabilitysampler",{"_index":255,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["this.httptextpropagatorservice.getpropagator",{"_index":261,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["this.initspan(request",{"_index":263,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["this.injectcontextandheader(span",{"_index":265,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["this.insertconsolespanexporter(this.config.commonconfig.console",{"_index":259,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["this.insertspanprocessorproductionmode",{"_index":256,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["this.otelcolconfig",{"_index":340,"title":{},"body":{"injectables/OtelcolExporterService.html":{}}}],["this.spanexporterservice.getexporter",{"_index":258,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["this.tracer",{"_index":254,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["this.tracer.addspanprocessor",{"_index":297,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["this.tracer.register",{"_index":260,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["this.zipkinconfig",{"_index":356,"title":{},"body":{"injectables/ZipkinExporterService.html":{}}}],["those",{"_index":729,"title":{},"body":{"license.html":{}}}],["through",{"_index":588,"title":{},"body":{"license.html":{}}}],["throw",{"_index":323,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{}}}],["timeout",{"_index":564,"title":{},"body":{"index.html":{}}}],["title",{"_index":834,"title":{},"body":{"license.html":{}}}],["todo",{"_index":935,"title":{"todo.html":{}},"body":{"todo.html":{}}}],["tort",{"_index":850,"title":{},"body":{"license.html":{}}}],["trace",{"_index":52,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"coverage.html":{},"index.html":{}}}],["tracedreq",{"_index":264,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["tracer",{"_index":181,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{},"index.html":{}}}],["traces",{"_index":506,"title":{},"body":{"index.html":{}}}],["tracking",{"_index":687,"title":{},"body":{"license.html":{}}}],["trade",{"_index":811,"title":{},"body":{"license.html":{}}}],["trademark",{"_index":768,"title":{},"body":{"license.html":{}}}],["trademarks",{"_index":809,"title":{},"body":{"license.html":{}}}],["transfer",{"_index":727,"title":{},"body":{"license.html":{}}}],["transformation",{"_index":639,"title":{},"body":{"license.html":{}}}],["translation",{"_index":640,"title":{},"body":{"license.html":{}}}],["troubleshoot",{"_index":557,"title":{},"body":{"index.html":{}}}],["true",{"_index":214,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"index.html":{}}}],["ts1086",{"_index":569,"title":{},"body":{"index.html":{}}}],["ts2694",{"_index":559,"title":{},"body":{"index.html":{}}}],["tslib",{"_index":466,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":50,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"injectables/JaegerExporterService.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/OtelcolExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"injectables/ZipkinExporterService.html":{},"coverage.html":{}}}],["type/node",{"_index":567,"title":{},"body":{"index.html":{}}}],["types",{"_index":645,"title":{},"body":{"license.html":{}}}],["typescript",{"_index":573,"title":{},"body":{"index.html":{}}}],["typo",{"_index":424,"title":{},"body":{"changelog.html":{}}}],["undefined",{"_index":125,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{},"injectables/SpanExporterService.html":{}}}],["under",{"_index":603,"title":{},"body":{"license.html":{}}}],["union",{"_index":598,"title":{},"body":{"license.html":{}}}],["unless",{"_index":797,"title":{},"body":{"license.html":{}}}],["unused",{"_index":407,"title":{},"body":{"changelog.html":{}}}],["up",{"_index":551,"title":{},"body":{"index.html":{}}}],["url",{"_index":72,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/OtelcolExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"injectables/ZipkinExporterService.html":{},"index.html":{}}}],["use",{"_index":54,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["useclass",{"_index":331,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{}}}],["used",{"_index":112,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{},"injectables/SpanExporterService.html":{},"index.html":{}}}],["usefactory",{"_index":121,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{},"injectables/SpanExporterService.html":{}}}],["usevalue",{"_index":330,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{}}}],["using",{"_index":842,"title":{},"body":{"license.html":{}}}],["value",{"_index":74,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryHttpInterceptor.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":436,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":941,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verbal",{"_index":678,"title":{},"body":{"license.html":{}}}],["version",{"_index":367,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["via",{"_index":514,"title":{},"body":{"index.html":{}}}],["void",{"_index":215,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{}}}],["want",{"_index":543,"title":{},"body":{"index.html":{}}}],["warranties",{"_index":829,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":823,"title":{},"body":{"license.html":{}}}],["web",{"_index":151,"title":{},"body":{"injectables/JaegerExporterService.html":{},"injectables/ZipkinExporterService.html":{}}}],["webtracerprovider",{"_index":234,"title":{},"body":{"interceptors/OpenTelemetryHttpInterceptor.html":{},"index.html":{}}}],["wherever",{"_index":779,"title":{},"body":{"license.html":{}}}],["whether",{"_index":613,"title":{},"body":{"license.html":{}}}],["whole",{"_index":663,"title":{},"body":{"license.html":{}}}],["within",{"_index":701,"title":{},"body":{"license.html":{}}}],["without",{"_index":555,"title":{},"body":{"index.html":{},"license.html":{}}}],["work",{"_index":646,"title":{},"body":{"license.html":{}}}],["works",{"_index":392,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["worldwide",{"_index":707,"title":{},"body":{"license.html":{}}}],["writing",{"_index":696,"title":{},"body":{"license.html":{}}}],["written",{"_index":679,"title":{},"body":{"license.html":{}}}],["xsrf",{"_index":414,"title":{},"body":{"changelog.html":{}}}],["yyyy",{"_index":918,"title":{},"body":{"license.html":{}}}],["zipkin",{"_index":63,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/SpanExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"todo.html":{}}}],["zipkincollectorconfig",{"_index":79,"title":{"interfaces/ZipkinCollectorConfig.html":{}},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"coverage.html":{},"index.html":{}}}],["zipkinconfig",{"_index":84,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"injectables/ZipkinExporterService.html":{},"index.html":{}}}],["zipkinexporter",{"_index":353,"title":{},"body":{"injectables/ZipkinExporterService.html":{}}}],["zipkinexporterservice",{"_index":346,"title":{"injectables/ZipkinExporterService.html":{}},"body":{"injectables/SpanExporterService.html":{},"injectables/ZipkinExporterService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["zone.js",{"_index":468,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":931,"title":{},"body":{"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/B3PropagatorService.html":{"url":"injectables/B3PropagatorService.html","title":"injectable - B3PropagatorService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  B3PropagatorService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/services/propagator/b3-propagator.service.ts\n        \n\n            \n                Description\n            \n            \n                B3PropagatorService\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getPropagator\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getPropagator\n                        \n                        \n                    \n                \n            \n            \n                \ngetPropagator()\n                \n            \n\n\n            \n                \n                    Defined in projects/opentelemetry-interceptor/src/lib/services/propagator/b3-propagator.service.ts:17\n                \n            \n\n\n            \n                \n                    Return an B3Propagator\n\n\n                    \n                    \n                    \n                        Returns :         HttpTextPropagator\n\n                    \n                    \n                        HttpTextPropagator as B3Propagator\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { IPropagator } from './propagator.interface';\nimport { HttpTextPropagator } from '@opentelemetry/api';\nimport { B3Propagator } from '@opentelemetry/core';\n\n/**\n * B3PropagatorService\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class B3PropagatorService implements IPropagator {\n  /**\n   * Return an B3Propagator\n   * @return HttpTextPropagator as B3Propagator\n   */\n  getPropagator(): HttpTextPropagator {\n    return new B3Propagator();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CommonCollectorConfig.html":{"url":"interfaces/CommonCollectorConfig.html","title":"interface - CommonCollectorConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CommonCollectorConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/configuration/opentelemetry-config.ts\n        \n\n            \n                Description\n            \n            \n                Common configuration\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        collector\n                                \n                                \n                                            Optional\n                                        console\n                                \n                                \n                                            Optional\n                                        probabilitySampler\n                                \n                                \n                                            Optional\n                                        production\n                                \n                                \n                                        propagator\n                                \n                                \n                                        serviceName\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        collector\n                                    \n                                \n                                \n                                    \n                                        collector:         Collector\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Collector\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    collector \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        console\n                                    \n                                \n                                \n                                    \n                                        console:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    console : boolean to trace in console \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        probabilitySampler\n                                    \n                                \n                                \n                                    \n                                        probabilitySampler:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    probabilitySampler \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        production\n                                    \n                                \n                                \n                                    \n                                        production:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    production : boolean to use a BatchSpanExporter(async) or SimpleSpanExporter(sync) \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        propagator\n                                    \n                                \n                                \n                                    \n                                        propagator:         Propagator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Propagator\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    propagator \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        serviceName\n                                    \n                                \n                                \n                                    \n                                        serviceName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    serviceName : Name of service in trace \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { InjectionToken } from '@angular/core';\n\nexport enum Collector {\n  jaeger = 'jaeger',\n  zipkin = 'zipkin',\n  otelcol = 'otelcol',\n}\n\nexport enum Propagator {\n  b3 = 'B3Propagator',\n  httpTrace = 'HttpTraceContext',\n  composite = 'CompositePropagator',\n}\n\n/**\n * Common configuration\n */\nexport interface CommonCollectorConfig {\n  /** serviceName : Name of service in trace */\n  serviceName: string;\n  /** console : boolean to trace in console */\n  console?: boolean;\n  /** production : boolean to use a BatchSpanExporter(async) or SimpleSpanExporter(sync) */\n  production?: boolean;\n  /** collector */\n  collector: Collector;\n  /** propagator */\n  propagator: Propagator;\n  /** probabilitySampler */\n  probabilitySampler?: number;\n}\n\n/**\n * OpenTelemetry Collector configuration\n */\nexport interface OtelCollectorConfig {\n  /**\n   * An url (Default value: http://localhost:9090/v1/trace)\n   */\n  url?: string;\n}\n\n/**\n * Jaeger Collector configuration\n */\nexport interface JaegerCollectorConfig {\n  /** host */\n  host?: string;\n  /** port */\n  port?: number;\n}\n\n/**\n * Configuration for Zipkin\n */\nexport interface ZipkinCollectorConfig {\n  /**\n   * An url (Default value: http://localhost:9411/api/v2/spans)\n   */\n  url?: string;\n}\n/**\n * OpenTelemetryConfig\n */\nexport interface OpenTelemetryConfig {\n  /** commonConfig */\n  commonConfig: CommonCollectorConfig;\n  /** jaegerConfig */\n  jaegerConfig?: JaegerCollectorConfig;\n  /** zipkinConfig */\n  zipkinConfig?: ZipkinCollectorConfig;\n  /** otelcolConfig */\n  otelcolConfig?: OtelCollectorConfig;\n}\n\n/** OpenTelemetryInjectConfig : Config injection */\nexport const OpenTelemetryInjectConfig = new InjectionToken('opentelemetry.config');\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CompositePropagatorService.html":{"url":"injectables/CompositePropagatorService.html","title":"injectable - CompositePropagatorService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CompositePropagatorService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/services/propagator/composite-propagator.service.ts\n        \n\n            \n                Description\n            \n            \n                CompositePropagatorService\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getPropagator\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getPropagator\n                        \n                        \n                    \n                \n            \n            \n                \ngetPropagator()\n                \n            \n\n\n            \n                \n                    Defined in projects/opentelemetry-interceptor/src/lib/services/propagator/composite-propagator.service.ts:17\n                \n            \n\n\n            \n                \n                    Return an CompositePropagator\n\n\n                    \n                    \n                    \n                        Returns :         HttpTextPropagator\n\n                    \n                    \n                        HttpTextPropagator as CompositePropagator\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { IPropagator } from './propagator.interface';\nimport { HttpTextPropagator } from '@opentelemetry/api';\nimport { CompositePropagator, B3Propagator, HttpTraceContext } from '@opentelemetry/core';\n/**\n * CompositePropagatorService\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class CompositePropagatorService implements IPropagator {\n\n  /**\n   * Return an CompositePropagator\n   * @return HttpTextPropagator as CompositePropagator\n   */\n  getPropagator(): HttpTextPropagator {\n    return new CompositePropagator({\n      propagators: [new B3Propagator(), new HttpTraceContext()],\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConsoleSpanExporterService.html":{"url":"injectables/ConsoleSpanExporterService.html","title":"injectable - ConsoleSpanExporterService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ConsoleSpanExporterService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/services/exporter/console-span-exporter.service.ts\n        \n\n            \n                Description\n            \n            \n                ConsoleSpanExporterService\nA default span exporter\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getExporter\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getExporter\n                        \n                        \n                    \n                \n            \n            \n                \ngetExporter()\n                \n            \n\n\n            \n                \n                    Defined in projects/opentelemetry-interceptor/src/lib/services/exporter/console-span-exporter.service.ts:17\n                \n            \n\n\n            \n                \n                    Return a ConsoleSpanExporter\n\n\n                    \n                    \n                    \n                        Returns :     SpanExporter\n\n                    \n                    \n                        SpanExporter\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { IExporter } from './exporter.interface';\nimport { SpanExporter, ConsoleSpanExporter } from '@opentelemetry/tracing';\n\n/**\n * ConsoleSpanExporterService\n * A default span exporter\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConsoleSpanExporterService implements IExporter {\n  /**\n   * Return a ConsoleSpanExporter\n   * @return SpanExporter\n   */\n  getExporter(): SpanExporter {\n    return new ConsoleSpanExporter();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HttpTextPropagatorService.html":{"url":"injectables/HttpTextPropagatorService.html","title":"injectable - HttpTextPropagatorService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  HttpTextPropagatorService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/services/propagator/http-text-propagator.service.ts\n        \n\n            \n                Description\n            \n            \n                HttpTextPropagatorService\nInjected service with factory to get a propagator by configuration\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getPropagator\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getPropagator\n                        \n                        \n                    \n                \n            \n            \n                \ngetPropagator()\n                \n            \n\n\n            \n                \n                    Defined in projects/opentelemetry-interceptor/src/lib/services/propagator/http-text-propagator.service.ts:33\n                \n            \n\n\n            \n                \n                    Not used in a factory, just a definition\n\n\n                    \n                        Returns :         HttpTextPropagator\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { IPropagator } from './propagator.interface';\nimport { HttpTextPropagator } from '@opentelemetry/api';\nimport { Injectable } from '@angular/core';\nimport {\n  OpenTelemetryConfig,\n  Propagator,\n  OpenTelemetryInjectConfig,\n} from '../../configuration/opentelemetry-config';\nimport { HttpTraceContextPropagatorService } from './http-trace-context-propagator.service';\nimport { B3PropagatorService } from './b3-propagator.service';\nimport { CompositePropagatorService } from './composite-propagator.service';\nimport { NoopHttpTextPropagatorService } from './noop-http-text-propagator.service';\n\n/**\n * HttpTextPropagatorService\n * Injected service with factory to get a propagator by configuration\n */\n@Injectable({\n  providedIn: 'root',\n  useFactory: httpTextPropagatorServiceFactory,\n  deps: [\n    OpenTelemetryInjectConfig,\n    HttpTraceContextPropagatorService,\n    B3PropagatorService,\n    CompositePropagatorService,\n    NoopHttpTextPropagatorService,\n  ],\n})\nexport class HttpTextPropagatorService implements IPropagator {\n  /**\n   * Not used in a factory, just a definition\n   */\n  getPropagator(): HttpTextPropagator {\n    // factory\n    console.error('error');\n    return undefined;\n  }\n}\n\n/**\n * httpTextPropagatorServiceFactory\n * Provide a factory to have a propagator service\n * @param config config\n * @param httpTraceContextPropagatorService httpTraceContext\n * @param b3PropagatorService propagator\n * @param compositePropagatorService  composite\n * @param noopHttpTextPropagatorService noop\n */\nexport function httpTextPropagatorServiceFactory(\n  config: OpenTelemetryConfig,\n  httpTraceContextPropagatorService: HttpTraceContextPropagatorService,\n  b3PropagatorService: B3PropagatorService,\n  compositePropagatorService: CompositePropagatorService,\n  noopHttpTextPropagatorService: NoopHttpTextPropagatorService\n) {\n  let propagator: IPropagator = null;\n  switch (config.commonConfig.propagator) {\n    case Propagator.b3:\n      propagator = b3PropagatorService;\n      break;\n    case Propagator.httpTrace:\n      propagator = httpTraceContextPropagatorService;\n      break;\n    case Propagator.composite:\n      propagator = compositePropagatorService;\n      break;\n    default:\n      propagator = noopHttpTextPropagatorService;\n      break;\n  }\n  return propagator;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HttpTraceContextPropagatorService.html":{"url":"injectables/HttpTraceContextPropagatorService.html","title":"injectable - HttpTraceContextPropagatorService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  HttpTraceContextPropagatorService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/services/propagator/http-trace-context-propagator.service.ts\n        \n\n            \n                Description\n            \n            \n                HttpTraceContextPropagatorService\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getPropagator\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getPropagator\n                        \n                        \n                    \n                \n            \n            \n                \ngetPropagator()\n                \n            \n\n\n            \n                \n                    Defined in projects/opentelemetry-interceptor/src/lib/services/propagator/http-trace-context-propagator.service.ts:17\n                \n            \n\n\n            \n                \n                    Return an HttpTraceContext\n\n\n                    \n                    \n                    \n                        Returns :         HttpTextPropagator\n\n                    \n                    \n                        HttpTextPropagator as HttpTraceContext\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { IPropagator } from './propagator.interface';\nimport { HttpTextPropagator } from '@opentelemetry/api';\nimport { HttpTraceContext } from '@opentelemetry/core';\n\n/**\n * HttpTraceContextPropagatorService\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class HttpTraceContextPropagatorService implements IPropagator {\n  /**\n   * Return an HttpTraceContext\n   * @return HttpTextPropagator as HttpTraceContext\n   */\n  getPropagator(): HttpTextPropagator {\n    return new HttpTraceContext();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IExporter.html":{"url":"interfaces/IExporter.html","title":"interface - IExporter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IExporter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/services/exporter/exporter.interface.ts\n        \n\n            \n                Description\n            \n            \n                Exporter interface to define a default exporter\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getExporter\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getExporter\n                        \n                        \n                    \n                \n            \n            \n                \ngetExporter()\n                \n            \n\n\n            \n                \n                    Defined in projects/opentelemetry-interceptor/src/lib/services/exporter/exporter.interface.ts:11\n                \n            \n\n\n            \n                \n                    give an inmplementation of SpanExporter\n\n\n                    \n                    \n                    \n                        Returns :     SpanExporter\n\n                    \n                    \n                        SpanExporter\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { SpanExporter } from '@opentelemetry/tracing';\n\n/**\n * Exporter interface to define a default exporter\n */\nexport interface IExporter {\n  /**\n   * give an inmplementation of SpanExporter\n   * @return SpanExporter\n   */\n  getExporter(): SpanExporter;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPropagator.html":{"url":"interfaces/IPropagator.html","title":"interface - IPropagator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IPropagator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/services/propagator/propagator.interface.ts\n        \n\n            \n                Description\n            \n            \n                Interface to define propagator\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getPropagator\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getPropagator\n                        \n                        \n                    \n                \n            \n            \n                \ngetPropagator()\n                \n            \n\n\n            \n                \n                    Defined in projects/opentelemetry-interceptor/src/lib/services/propagator/propagator.interface.ts:11\n                \n            \n\n\n            \n                \n                    give an implementation of a propagator\n\n\n                    \n                    \n                    \n                        Returns :         HttpTextPropagator\n\n                    \n                    \n                        HttpTextPropagator\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpTextPropagator } from '@opentelemetry/api';\n\n/**\n * Interface to define propagator\n */\nexport interface IPropagator {\n  /**\n   * give an implementation of a propagator\n   * @return HttpTextPropagator\n   */\n  getPropagator(): HttpTextPropagator;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JaegerCollectorConfig.html":{"url":"interfaces/JaegerCollectorConfig.html","title":"interface - JaegerCollectorConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  JaegerCollectorConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/configuration/opentelemetry-config.ts\n        \n\n            \n                Description\n            \n            \n                Jaeger Collector configuration\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        host\n                                \n                                \n                                            Optional\n                                        port\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        host\n                                    \n                                \n                                \n                                    \n                                        host:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    host \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        port\n                                    \n                                \n                                \n                                    \n                                        port:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    port \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { InjectionToken } from '@angular/core';\n\nexport enum Collector {\n  jaeger = 'jaeger',\n  zipkin = 'zipkin',\n  otelcol = 'otelcol',\n}\n\nexport enum Propagator {\n  b3 = 'B3Propagator',\n  httpTrace = 'HttpTraceContext',\n  composite = 'CompositePropagator',\n}\n\n/**\n * Common configuration\n */\nexport interface CommonCollectorConfig {\n  /** serviceName : Name of service in trace */\n  serviceName: string;\n  /** console : boolean to trace in console */\n  console?: boolean;\n  /** production : boolean to use a BatchSpanExporter(async) or SimpleSpanExporter(sync) */\n  production?: boolean;\n  /** collector */\n  collector: Collector;\n  /** propagator */\n  propagator: Propagator;\n  /** probabilitySampler */\n  probabilitySampler?: number;\n}\n\n/**\n * OpenTelemetry Collector configuration\n */\nexport interface OtelCollectorConfig {\n  /**\n   * An url (Default value: http://localhost:9090/v1/trace)\n   */\n  url?: string;\n}\n\n/**\n * Jaeger Collector configuration\n */\nexport interface JaegerCollectorConfig {\n  /** host */\n  host?: string;\n  /** port */\n  port?: number;\n}\n\n/**\n * Configuration for Zipkin\n */\nexport interface ZipkinCollectorConfig {\n  /**\n   * An url (Default value: http://localhost:9411/api/v2/spans)\n   */\n  url?: string;\n}\n/**\n * OpenTelemetryConfig\n */\nexport interface OpenTelemetryConfig {\n  /** commonConfig */\n  commonConfig: CommonCollectorConfig;\n  /** jaegerConfig */\n  jaegerConfig?: JaegerCollectorConfig;\n  /** zipkinConfig */\n  zipkinConfig?: ZipkinCollectorConfig;\n  /** otelcolConfig */\n  otelcolConfig?: OtelCollectorConfig;\n}\n\n/** OpenTelemetryInjectConfig : Config injection */\nexport const OpenTelemetryInjectConfig = new InjectionToken('opentelemetry.config');\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JaegerExporterService.html":{"url":"injectables/JaegerExporterService.html","title":"injectable - JaegerExporterService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JaegerExporterService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/services/exporter/jaeger-exporter.service.ts\n        \n\n            \n                Description\n            \n            \n                JaegerExporterService class\nJaegerExporter isn't operationnal for the moment in web application.\nit's present if one day..\nFor the moment return a ConsoleSpanExporter\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getExporter\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: OpenTelemetryConfig)\n                    \n                \n                        \n                            \n                                Defined in projects/opentelemetry-interceptor/src/lib/services/exporter/jaeger-exporter.service.ts:18\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        OpenTelemetryConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                OpenTelemetryConfig\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getExporter\n                        \n                        \n                    \n                \n            \n            \n                \ngetExporter()\n                \n            \n\n\n            \n                \n                    Defined in projects/opentelemetry-interceptor/src/lib/services/exporter/jaeger-exporter.service.ts:37\n                \n            \n\n\n            \n                \n                    Return for the moment a ConsoleSpanExporter\n\n\n                    \n                    \n                    \n                        Returns :     SpanExporter\n\n                    \n                    \n                        SpanExporter\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@angular/core';\nimport {\n  OpenTelemetryConfig,\n  OpenTelemetryInjectConfig,\n} from '../../configuration/opentelemetry-config';\nimport { IExporter } from './exporter.interface';\nimport { SpanExporter, ConsoleSpanExporter } from '@opentelemetry/tracing';\n\n/**\n * JaegerExporterService class\n * JaegerExporter isn't operationnal for the moment in web application.\n * it's present if one day..\n * For the moment return a ConsoleSpanExporter\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JaegerExporterService implements IExporter {\n  // private configJaeger: ExporterConfig;\n\n  /**\n   * constructor\n   * @param config OpenTelemetryConfig\n   */\n  constructor(@Inject(OpenTelemetryInjectConfig) config: OpenTelemetryConfig) {\n    /*this.configJaeger = {\n      serviceName: config.commonConfig.serviceName,\n      host: config.jaegerConfig.host,\n      port: config.jaegerConfig.port,\n    };*/\n  }\n\n  /**\n   * Return for the moment a ConsoleSpanExporter\n   * @return SpanExporter\n   */\n  getExporter(): SpanExporter {\n    return new ConsoleSpanExporter();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NoopHttpTextPropagatorService.html":{"url":"injectables/NoopHttpTextPropagatorService.html","title":"injectable - NoopHttpTextPropagatorService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  NoopHttpTextPropagatorService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/services/propagator/noop-http-text-propagator.service.ts\n        \n\n            \n                Description\n            \n            \n                NoopHttpTextPropagatorService\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getPropagator\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getPropagator\n                        \n                        \n                    \n                \n            \n            \n                \ngetPropagator()\n                \n            \n\n\n            \n                \n                    Defined in projects/opentelemetry-interceptor/src/lib/services/propagator/noop-http-text-propagator.service.ts:16\n                \n            \n\n\n            \n                \n                    Return an NoopHttpTextPropagator\n\n\n                    \n                    \n                    \n                        Returns :         HttpTextPropagator\n\n                    \n                    \n                        HttpTextPropagator as NoopHttpTextPropagator\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { IPropagator } from './propagator.interface';\nimport { HttpTextPropagator, NoopHttpTextPropagator } from '@opentelemetry/api';\n\n/**\n * NoopHttpTextPropagatorService\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class NoopHttpTextPropagatorService implements IPropagator {\n  /**\n   * Return an NoopHttpTextPropagator\n   * @return HttpTextPropagator as NoopHttpTextPropagator\n   */\n  getPropagator(): HttpTextPropagator {\n    return new NoopHttpTextPropagator();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OpenTelemetryConfig.html":{"url":"interfaces/OpenTelemetryConfig.html","title":"interface - OpenTelemetryConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  OpenTelemetryConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/configuration/opentelemetry-config.ts\n        \n\n            \n                Description\n            \n            \n                OpenTelemetryConfig\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        commonConfig\n                                \n                                \n                                            Optional\n                                        jaegerConfig\n                                \n                                \n                                            Optional\n                                        otelcolConfig\n                                \n                                \n                                            Optional\n                                        zipkinConfig\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        commonConfig\n                                    \n                                \n                                \n                                    \n                                        commonConfig:         CommonCollectorConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CommonCollectorConfig\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    commonConfig \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        jaegerConfig\n                                    \n                                \n                                \n                                    \n                                        jaegerConfig:         JaegerCollectorConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         JaegerCollectorConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    jaegerConfig \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        otelcolConfig\n                                    \n                                \n                                \n                                    \n                                        otelcolConfig:         OtelCollectorConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         OtelCollectorConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    otelcolConfig \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        zipkinConfig\n                                    \n                                \n                                \n                                    \n                                        zipkinConfig:         ZipkinCollectorConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ZipkinCollectorConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    zipkinConfig \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { InjectionToken } from '@angular/core';\n\nexport enum Collector {\n  jaeger = 'jaeger',\n  zipkin = 'zipkin',\n  otelcol = 'otelcol',\n}\n\nexport enum Propagator {\n  b3 = 'B3Propagator',\n  httpTrace = 'HttpTraceContext',\n  composite = 'CompositePropagator',\n}\n\n/**\n * Common configuration\n */\nexport interface CommonCollectorConfig {\n  /** serviceName : Name of service in trace */\n  serviceName: string;\n  /** console : boolean to trace in console */\n  console?: boolean;\n  /** production : boolean to use a BatchSpanExporter(async) or SimpleSpanExporter(sync) */\n  production?: boolean;\n  /** collector */\n  collector: Collector;\n  /** propagator */\n  propagator: Propagator;\n  /** probabilitySampler */\n  probabilitySampler?: number;\n}\n\n/**\n * OpenTelemetry Collector configuration\n */\nexport interface OtelCollectorConfig {\n  /**\n   * An url (Default value: http://localhost:9090/v1/trace)\n   */\n  url?: string;\n}\n\n/**\n * Jaeger Collector configuration\n */\nexport interface JaegerCollectorConfig {\n  /** host */\n  host?: string;\n  /** port */\n  port?: number;\n}\n\n/**\n * Configuration for Zipkin\n */\nexport interface ZipkinCollectorConfig {\n  /**\n   * An url (Default value: http://localhost:9411/api/v2/spans)\n   */\n  url?: string;\n}\n/**\n * OpenTelemetryConfig\n */\nexport interface OpenTelemetryConfig {\n  /** commonConfig */\n  commonConfig: CommonCollectorConfig;\n  /** jaegerConfig */\n  jaegerConfig?: JaegerCollectorConfig;\n  /** zipkinConfig */\n  zipkinConfig?: ZipkinCollectorConfig;\n  /** otelcolConfig */\n  otelcolConfig?: OtelCollectorConfig;\n}\n\n/** OpenTelemetryInjectConfig : Config injection */\nexport const OpenTelemetryInjectConfig = new InjectionToken('opentelemetry.config');\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interceptors/OpenTelemetryHttpInterceptor.html":{"url":"interceptors/OpenTelemetryHttpInterceptor.html","title":"interceptor - OpenTelemetryHttpInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Interceptors\n  OpenTelemetryHttpInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/interceptor/opentelemetry-http.interceptor.ts\n        \n\n            \n                Description\n            \n            \n                OpenTelemetryInterceptor class\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                contextManager\n                            \n                            \n                                tracer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                defineProbabilitySampler\n                            \n                            \n                                    Private\n                                initSpan\n                            \n                            \n                                    Private\n                                injectContextAndHeader\n                            \n                            \n                                    Private\n                                insertConsoleSpanExporter\n                            \n                            \n                                    Private\n                                insertSpanProcessorProductionMode\n                            \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: OpenTelemetryConfig, spanExporterService: SpanExporterService, httpTextPropagatorService: HttpTextPropagatorService)\n                    \n                \n                        \n                            \n                                Defined in projects/opentelemetry-interceptor/src/lib/interceptor/opentelemetry-http.interceptor.ts:46\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        OpenTelemetryConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                configuration\n\n                                                        \n                                                \n                                                \n                                                        spanExporterService\n                                                  \n                                                        \n                                                                        SpanExporterService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                service exporter injected\n\n                                                        \n                                                \n                                                \n                                                        httpTextPropagatorService\n                                                  \n                                                        \n                                                                        HttpTextPropagatorService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                propagator\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            defineProbabilitySampler\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    defineProbabilitySampler(sampleConfig: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/opentelemetry-interceptor/src/lib/interceptor/opentelemetry-http.interceptor.ts:189\n                \n            \n\n\n            \n                \n                    define the Probability Sampler\nBy Default, it's always (or 1)\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    sampleConfig\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the sample configuration\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ProbabilitySampler\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            initSpan\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initSpan(request: HttpRequest)\n                \n            \n\n\n            \n                \n                    Defined in projects/opentelemetry-interceptor/src/lib/interceptor/opentelemetry-http.interceptor.ts:112\n                \n            \n\n\n            \n                \n                    Initialise a span for a request intercepted\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            HttpRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        request\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     api.Span\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            injectContextAndHeader\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    injectContextAndHeader(span: api.Span, request: HttpRequest)\n                \n            \n\n\n            \n                \n                    Defined in projects/opentelemetry-interceptor/src/lib/interceptor/opentelemetry-http.interceptor.ts:137\n                \n            \n\n\n            \n                \n                    Add header propagator in request and conserve original header\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    span\n                                    \n                                            api.Span\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        span\n\n                                    \n                                \n                                \n                                    request\n                                    \n                                            HttpRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        request\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            insertConsoleSpanExporter\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    insertConsoleSpanExporter(console: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/opentelemetry-interceptor/src/lib/interceptor/opentelemetry-http.interceptor.ts:159\n                \n            \n\n\n            \n                \n                    Insert in tracer the console span if config is true\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    console\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        config to insert console span\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            insertSpanProcessorProductionMode\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    insertSpanProcessorProductionMode(production: boolean, spanExporter: SpanExporter)\n                \n            \n\n\n            \n                \n                    Defined in projects/opentelemetry-interceptor/src/lib/interceptor/opentelemetry-http.interceptor.ts:173\n                \n            \n\n\n            \n                \n                    Insert BatchSpanProcessor in production mode\nSimpleSpanProcessor otherwise\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    production\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        mode\n\n                                    \n                                \n                                \n                                    spanExporter\n                                    \n                                            SpanExporter\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Exporter\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(request: HttpRequest, next: HttpHandler)\n                \n            \n\n\n            \n                \n                    Defined in projects/opentelemetry-interceptor/src/lib/interceptor/opentelemetry-http.interceptor.ts:81\n                \n            \n\n\n            \n                \n                    Overide method\nInterceptor from HttpInterceptor Angular\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            HttpRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the current request\n\n                                    \n                                \n                                \n                                    next\n                                    \n                                                HttpHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        next\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            contextManager\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new StackContextManager()\n                        \n                    \n                        \n                            \n                                    Defined in projects/opentelemetry-interceptor/src/lib/interceptor/opentelemetry-http.interceptor.ts:46\n                            \n                        \n\n                \n                    \n                        context manager\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tracer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     WebTracerProvider\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/opentelemetry-interceptor/src/lib/interceptor/opentelemetry-http.interceptor.ts:42\n                            \n                        \n\n                \n                    \n                        tracer\n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpResponse,\n  HttpErrorResponse,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport * as api from '@opentelemetry/api';\nimport { WebTracerProvider, StackContextManager } from '@opentelemetry/web';\nimport {\n  SimpleSpanProcessor,\n  ConsoleSpanExporter,\n  BatchSpanProcessor,\n  SpanExporter,\n} from '@opentelemetry/tracing';\nimport {\n  ALWAYS_SAMPLER,\n  setActiveSpan,\n  ProbabilitySampler,\n} from '@opentelemetry/core';\nimport { tap, finalize } from 'rxjs/operators';\nimport {\n  OpenTelemetryConfig,\n  OpenTelemetryInjectConfig,\n} from '../configuration/opentelemetry-config';\nimport { SpanExporterService } from '../services/exporter/span-exporter.service';\nimport { HttpTextPropagatorService } from '../services/propagator/http-text-propagator.service';\n\n/**\n * OpenTelemetryInterceptor class\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class OpenTelemetryHttpInterceptor implements HttpInterceptor {\n  /**\n   * tracer\n   */\n  tracer: WebTracerProvider;\n  /**\n   * context manager\n   */\n  contextManager = new StackContextManager();\n\n  /**\n   * constructor\n   * @param config configuration\n   * @param spanExporterService service exporter injected\n   * @param httpTextPropagatorService propagator\n   */\n  constructor(\n    @Inject(OpenTelemetryInjectConfig) private config: OpenTelemetryConfig,\n    @Inject(SpanExporterService)\n    private spanExporterService: SpanExporterService,\n    @Inject(HttpTextPropagatorService)\n    private httpTextPropagatorService: HttpTextPropagatorService\n  ) {\n    this.tracer = new WebTracerProvider({\n      sampler: this.defineProbabilitySampler(config.commonConfig.probabilitySampler),\n    });\n    this.insertSpanProcessorProductionMode(\n      this.config.commonConfig.production,\n      this.spanExporterService.getExporter()\n    );\n    this.insertConsoleSpanExporter(this.config.commonConfig.console);\n    this.tracer.register({\n      propagator: this.httpTextPropagatorService.getPropagator(),\n      contextManager: this.contextManager,\n    });\n  }\n\n  /**\n   * Overide method\n   * Interceptor from HttpInterceptor Angular\n   * @param request the current request\n   * @param next next\n   */\n  intercept(\n    request: HttpRequest,\n    next: HttpHandler\n  ): Observable> {\n    const span: api.Span = this.initSpan(request);\n    const tracedReq = this.injectContextAndHeader(span, request);\n    return next.handle(tracedReq).pipe(\n      tap(\n        (event: HttpEvent) => {\n          if (event instanceof HttpResponse) {\n            span.setAttribute('http.status_code', event.status);\n            span.addEvent('response', { body: JSON.stringify(event.body) });\n          }\n        },\n        (event: HttpErrorResponse) => {\n          if (event instanceof HttpErrorResponse) {\n            span.setAttribute('http.status_code', event.status);\n            span.addEvent('error', { body: JSON.stringify(event.error) });\n          }\n        }\n      ),\n      finalize(() => {\n        span.end();\n      })\n    );\n  }\n\n  /**\n   * Initialise a span for a request intercepted\n   * @param request request\n   */\n  private initSpan(request: HttpRequest): api.Span {\n    const span = this.tracer\n      .getTracer('angular-interceptor', '0.0.1')\n      .startSpan(\n        request.url,\n        {\n          attributes: {\n            ['http.method']: request.method,\n            ['http.url']: request.urlWithParams,\n          },\n        },\n        this.contextManager.active()\n      );\n    this.contextManager._currentContext = setActiveSpan(\n      this.contextManager.active(),\n      span\n    );\n    return span;\n  }\n\n  /**\n   * Add header propagator in request and conserve original header\n   * @param span span\n   * @param request request\n   */\n  private injectContextAndHeader(\n    span: api.Span,\n    request: HttpRequest\n  ) {\n    const carrier = {};\n    api.propagation.inject(\n      carrier,\n      api.defaultSetter,\n      this.contextManager.active()\n    );\n    for (const key in request.headers.keys) {\n      carrier[key] = request.headers.get(key);\n    }\n    return request.clone({\n      setHeaders: carrier,\n    });\n  }\n\n  /**\n   * Insert in tracer the console span if config is true\n   * @param console config to insert console span\n   */\n  private insertConsoleSpanExporter(console: boolean) {\n    if (console) {\n      this.tracer.addSpanProcessor(\n        new SimpleSpanProcessor(new ConsoleSpanExporter())\n      );\n    }\n  }\n\n  /**\n   * Insert BatchSpanProcessor in production mode\n   * SimpleSpanProcessor otherwise\n   * @param production mode\n   * @param spanExporter Exporter\n   */\n  private insertSpanProcessorProductionMode(\n    production: boolean,\n    spanExporter: SpanExporter\n  ) {\n    this.tracer.addSpanProcessor(\n      production\n        ? new BatchSpanProcessor(spanExporter)\n        : new SimpleSpanProcessor(spanExporter)\n    );\n  }\n\n  /**\n   * define the Probability Sampler\n   * By Default, it's always (or 1)\n   * @param sampleConfig the sample configuration\n   */\n  private defineProbabilitySampler(sampleConfig: number): ProbabilitySampler {\n    if(sampleConfig===undefined || sampleConfig > 1) {\n      return ALWAYS_SAMPLER;\n    } else {\n      return new ProbabilitySampler(sampleConfig);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OpenTelemetryInterceptorModule.html":{"url":"modules/OpenTelemetryInterceptorModule.html","title":"module - OpenTelemetryInterceptorModule","body":"\n                   \n\n\n\n\n    Modules\n    OpenTelemetryInterceptorModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/opentelemetry-interceptor.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRoot\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(config: OpenTelemetryConfig)\n                \n            \n\n\n            \n                \n                    Defined in projects/opentelemetry-interceptor/src/lib/opentelemetry-interceptor.module.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                OpenTelemetryConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ModuleWithProviders\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import {\n  NgModule,\n  ModuleWithProviders,\n  Optional,\n  SkipSelf,\n} from '@angular/core';\nimport {\n  OpenTelemetryConfig,\n  OpenTelemetryInjectConfig,\n} from './configuration/opentelemetry-config';\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\nimport { OpenTelemetryHttpInterceptor } from './interceptor/opentelemetry-http.interceptor';\n\n@NgModule({\n  declarations: [],\n  imports: [HttpClientModule],\n  exports: [],\n})\nexport class OpenTelemetryInterceptorModule {\n  constructor(\n    @Optional() @SkipSelf() parentModule?: OpenTelemetryInterceptorModule\n  ) {\n    if (parentModule) {\n      throw new Error(\n        'OpentelemetryInterceptorModule is already loaded. Import it in the AppModule only'\n      );\n    }\n  }\n\n  public static forRoot(config: OpenTelemetryConfig): ModuleWithProviders {\n    return {\n      ngModule: OpenTelemetryInterceptorModule,\n      providers: [\n        { provide: OpenTelemetryInjectConfig, useValue: config },\n        {\n          provide: HTTP_INTERCEPTORS,\n          useClass: OpenTelemetryHttpInterceptor,\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OtelCollectorConfig.html":{"url":"interfaces/OtelCollectorConfig.html","title":"interface - OtelCollectorConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  OtelCollectorConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/configuration/opentelemetry-config.ts\n        \n\n            \n                Description\n            \n            \n                OpenTelemetry Collector configuration\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        url\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An url (Default value: http://localhost:9090/v1/trace)\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { InjectionToken } from '@angular/core';\n\nexport enum Collector {\n  jaeger = 'jaeger',\n  zipkin = 'zipkin',\n  otelcol = 'otelcol',\n}\n\nexport enum Propagator {\n  b3 = 'B3Propagator',\n  httpTrace = 'HttpTraceContext',\n  composite = 'CompositePropagator',\n}\n\n/**\n * Common configuration\n */\nexport interface CommonCollectorConfig {\n  /** serviceName : Name of service in trace */\n  serviceName: string;\n  /** console : boolean to trace in console */\n  console?: boolean;\n  /** production : boolean to use a BatchSpanExporter(async) or SimpleSpanExporter(sync) */\n  production?: boolean;\n  /** collector */\n  collector: Collector;\n  /** propagator */\n  propagator: Propagator;\n  /** probabilitySampler */\n  probabilitySampler?: number;\n}\n\n/**\n * OpenTelemetry Collector configuration\n */\nexport interface OtelCollectorConfig {\n  /**\n   * An url (Default value: http://localhost:9090/v1/trace)\n   */\n  url?: string;\n}\n\n/**\n * Jaeger Collector configuration\n */\nexport interface JaegerCollectorConfig {\n  /** host */\n  host?: string;\n  /** port */\n  port?: number;\n}\n\n/**\n * Configuration for Zipkin\n */\nexport interface ZipkinCollectorConfig {\n  /**\n   * An url (Default value: http://localhost:9411/api/v2/spans)\n   */\n  url?: string;\n}\n/**\n * OpenTelemetryConfig\n */\nexport interface OpenTelemetryConfig {\n  /** commonConfig */\n  commonConfig: CommonCollectorConfig;\n  /** jaegerConfig */\n  jaegerConfig?: JaegerCollectorConfig;\n  /** zipkinConfig */\n  zipkinConfig?: ZipkinCollectorConfig;\n  /** otelcolConfig */\n  otelcolConfig?: OtelCollectorConfig;\n}\n\n/** OpenTelemetryInjectConfig : Config injection */\nexport const OpenTelemetryInjectConfig = new InjectionToken('opentelemetry.config');\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OtelcolExporterService.html":{"url":"injectables/OtelcolExporterService.html","title":"injectable - OtelcolExporterService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  OtelcolExporterService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/services/exporter/otelcol-exporter.service.ts\n        \n\n            \n                Description\n            \n            \n                OtelcolExporterService class\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                otelcolConfig\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getExporter\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: OpenTelemetryConfig)\n                    \n                \n                        \n                            \n                                Defined in projects/opentelemetry-interceptor/src/lib/services/exporter/otelcol-exporter.service.ts:23\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        OpenTelemetryConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                OpenTelemetryConfig\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getExporter\n                        \n                        \n                    \n                \n            \n            \n                \ngetExporter()\n                \n            \n\n\n            \n                \n                    Defined in projects/opentelemetry-interceptor/src/lib/services/exporter/otelcol-exporter.service.ts:40\n                \n            \n\n\n            \n                \n                    Return a CollectorExporter with the configuration\n\n\n                    \n                    \n                    \n                        Returns :     SpanExporter\n\n                    \n                    \n                        a CollectorExporter\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            otelcolConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         CollectorExporterConfig\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/opentelemetry-interceptor/src/lib/services/exporter/otelcol-exporter.service.ts:23\n                            \n                        \n\n                \n                    \n                        CollectorExporterConfig\n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@angular/core';\nimport { IExporter } from './exporter.interface';\nimport { SpanExporter } from '@opentelemetry/tracing';\nimport {\n  OpenTelemetryConfig,\n  OpenTelemetryInjectConfig,\n} from '../../configuration/opentelemetry-config';\nimport {\n  CollectorExporterConfig,\n  CollectorExporter,\n} from '@opentelemetry/exporter-collector';\n\n/**\n * OtelcolExporterService class\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class OtelcolExporterService implements IExporter {\n  /**\n   * CollectorExporterConfig\n   */\n  private otelcolConfig: CollectorExporterConfig;\n\n  /**\n   * constructor\n   * @param config OpenTelemetryConfig\n   */\n  constructor(@Inject(OpenTelemetryInjectConfig) config: OpenTelemetryConfig) {\n    this.otelcolConfig = {\n      serviceName: config.commonConfig.serviceName,\n      url: config.otelcolConfig?.url,\n    };\n  }\n\n  /**\n   * Return a CollectorExporter with the configuration\n   * @return a CollectorExporter\n   */\n  getExporter(): SpanExporter {\n    return new CollectorExporter(this.otelcolConfig);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SpanExporterService.html":{"url":"injectables/SpanExporterService.html","title":"injectable - SpanExporterService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  SpanExporterService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/services/exporter/span-exporter.service.ts\n        \n\n            \n                Description\n            \n            \n                An Angular Factory to have the configured collector\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getExporter\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getExporter\n                        \n                        \n                    \n                \n            \n            \n                \ngetExporter()\n                \n            \n\n\n            \n                \n                    Defined in projects/opentelemetry-interceptor/src/lib/services/exporter/span-exporter.service.ts:32\n                \n            \n\n\n            \n                \n                    Not used in a factory, just a definition\n\n\n                    \n                        Returns :     SpanExporter\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { SpanExporter } from '@opentelemetry/tracing';\nimport { IExporter } from './exporter.interface';\nimport { Injectable } from '@angular/core';\nimport { JaegerExporterService } from './jaeger-exporter.service';\nimport { OtelcolExporterService } from './otelcol-exporter.service';\nimport { ZipkinExporterService } from './zipkin-exporter.service';\nimport {\n  OpenTelemetryConfig,\n  Collector,\n  OpenTelemetryInjectConfig,\n} from '../../configuration/opentelemetry-config';\nimport { ConsoleSpanExporterService } from './console-span-exporter.service';\n\n/**\n * An Angular Factory to have the configured collector\n */\n@Injectable({\n  providedIn: 'root',\n  useFactory: spanExporterServiceFactory,\n  deps: [\n    OpenTelemetryInjectConfig,\n    JaegerExporterService,\n    OtelcolExporterService,\n    ZipkinExporterService,\n    ConsoleSpanExporterService,\n  ],\n})\nexport class SpanExporterService implements IExporter {\n  /**\n   * Not used in a factory, just a definition\n   */\n  getExporter(): SpanExporter {\n    // factory\n    console.error('error');\n    return undefined;\n  }\n}\n\n/**\n * Factory to return Service configured\n * @param config config\n * @param jaegerExporterService jaeger\n * @param otelcolExporterService otelcol\n * @param zipkinExporterService zipkin\n * @param consoleSpanExporter console\n */\nexport function spanExporterServiceFactory(\n  config: OpenTelemetryConfig,\n  jaegerExporterService: JaegerExporterService,\n  otelcolExporterService: OtelcolExporterService,\n  zipkinExporterService: ZipkinExporterService,\n  consoleSpanExporter: ConsoleSpanExporterService\n) {\n  let exporter: IExporter = null;\n  switch (config.commonConfig.collector) {\n    case Collector.jaeger:\n      exporter = jaegerExporterService;\n      break;\n    case Collector.otelcol:\n      exporter = otelcolExporterService;\n      break;\n    case Collector.zipkin:\n      exporter = zipkinExporterService;\n      break;\n    default:\n      exporter = consoleSpanExporter;\n      break;\n  }\n  return exporter;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ZipkinCollectorConfig.html":{"url":"interfaces/ZipkinCollectorConfig.html","title":"interface - ZipkinCollectorConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ZipkinCollectorConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/configuration/opentelemetry-config.ts\n        \n\n            \n                Description\n            \n            \n                Configuration for Zipkin\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        url\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An url (Default value: http://localhost:9411/api/v2/spans)\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { InjectionToken } from '@angular/core';\n\nexport enum Collector {\n  jaeger = 'jaeger',\n  zipkin = 'zipkin',\n  otelcol = 'otelcol',\n}\n\nexport enum Propagator {\n  b3 = 'B3Propagator',\n  httpTrace = 'HttpTraceContext',\n  composite = 'CompositePropagator',\n}\n\n/**\n * Common configuration\n */\nexport interface CommonCollectorConfig {\n  /** serviceName : Name of service in trace */\n  serviceName: string;\n  /** console : boolean to trace in console */\n  console?: boolean;\n  /** production : boolean to use a BatchSpanExporter(async) or SimpleSpanExporter(sync) */\n  production?: boolean;\n  /** collector */\n  collector: Collector;\n  /** propagator */\n  propagator: Propagator;\n  /** probabilitySampler */\n  probabilitySampler?: number;\n}\n\n/**\n * OpenTelemetry Collector configuration\n */\nexport interface OtelCollectorConfig {\n  /**\n   * An url (Default value: http://localhost:9090/v1/trace)\n   */\n  url?: string;\n}\n\n/**\n * Jaeger Collector configuration\n */\nexport interface JaegerCollectorConfig {\n  /** host */\n  host?: string;\n  /** port */\n  port?: number;\n}\n\n/**\n * Configuration for Zipkin\n */\nexport interface ZipkinCollectorConfig {\n  /**\n   * An url (Default value: http://localhost:9411/api/v2/spans)\n   */\n  url?: string;\n}\n/**\n * OpenTelemetryConfig\n */\nexport interface OpenTelemetryConfig {\n  /** commonConfig */\n  commonConfig: CommonCollectorConfig;\n  /** jaegerConfig */\n  jaegerConfig?: JaegerCollectorConfig;\n  /** zipkinConfig */\n  zipkinConfig?: ZipkinCollectorConfig;\n  /** otelcolConfig */\n  otelcolConfig?: OtelCollectorConfig;\n}\n\n/** OpenTelemetryInjectConfig : Config injection */\nexport const OpenTelemetryInjectConfig = new InjectionToken('opentelemetry.config');\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ZipkinExporterService.html":{"url":"injectables/ZipkinExporterService.html","title":"injectable - ZipkinExporterService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ZipkinExporterService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/services/exporter/zipkin-exporter.service.ts\n        \n\n            \n                Description\n            \n            \n                ZipkinExporter isn't operationnal for the moment in web application.\nit's present if one day..\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getExporter\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: OpenTelemetryConfig)\n                    \n                \n                        \n                            \n                                Defined in projects/opentelemetry-interceptor/src/lib/services/exporter/zipkin-exporter.service.ts:16\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        OpenTelemetryConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                OpenTelemetryConfig\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getExporter\n                        \n                        \n                    \n                \n            \n            \n                \ngetExporter()\n                \n            \n\n\n            \n                \n                    Defined in projects/opentelemetry-interceptor/src/lib/services/exporter/zipkin-exporter.service.ts:34\n                \n            \n\n\n            \n                \n                    Return for the moment a ConsoleSpanExporter\n\n\n                    \n                    \n                    \n                        Returns :     SpanExporter\n\n                    \n                    \n                        SpanExporter\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@angular/core';\nimport { IExporter } from './exporter.interface';\nimport {\n  OpenTelemetryConfig,\n  OpenTelemetryInjectConfig,\n} from '../../configuration/opentelemetry-config';\nimport { SpanExporter, ConsoleSpanExporter } from '@opentelemetry/tracing';\n\n/**\n * ZipkinExporter isn't operationnal for the moment in web application.\n * it's present if one day..\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ZipkinExporterService implements IExporter {\n  // private zipkinConfig: ExporterConfig;\n\n  /**\n   * constructor\n   * @param config OpenTelemetryConfig\n   */\n  constructor(@Inject(OpenTelemetryInjectConfig) config: OpenTelemetryConfig) {\n    /*this.zipkinConfig = {\n      serviceName: config.commonConfig.serviceName,\n      url: config.zipkinConfig.url,\n    };*/\n  }\n\n  /**\n   * Return for the moment a ConsoleSpanExporter\n   * @return SpanExporter\n   */\n  getExporter(): SpanExporter {\n    return new ConsoleSpanExporter();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\nAll notable changes to this project will be documented in this file. See standard-version for commit guidelines.\n0.8.2 (2020-05-30)\nFeatures\n\nadd composite (7a5b07e)\nadd composite header (83fc1f3)\nadd example ok (e5eb09e)\nadd sampling configuration (ad03334)\nangular downgrade in progress (92330f9)\nen cours (0885b40)\nok (dd7a0e5)\nok (3516488)\nok (b63afc1)\nok (b679883)\nOK it works (ec28651)\ntest (0f35b5c)\n\nBug Fixes\n\ncan be use in angular 9/node 12/Typescript 3.6.0 (563071d)\ndel doc dir (96da55f)\ndelete unused file (dda5d54)\ndelete unused file (a1746bf)\ndoc and code (4a000b9)\nno subject with JSONP and XSRF (95167b9)\nno subject with JSONP and XSRF (47aba25)\nok (371886a)\npublish (613c16d)\npublish (47c249b)\npublish (a517094)\npublish and readme (412d2fd)\nsome typo (80f7bf8)\nsome typo (735b05d)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/configuration/opentelemetry-config.ts\n            \n            interface\n            CommonCollectorConfig\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/configuration/opentelemetry-config.ts\n            \n            interface\n            JaegerCollectorConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/configuration/opentelemetry-config.ts\n            \n            interface\n            OpenTelemetryConfig\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/configuration/opentelemetry-config.ts\n            \n            interface\n            OtelCollectorConfig\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/configuration/opentelemetry-config.ts\n            \n            interface\n            ZipkinCollectorConfig\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/configuration/opentelemetry-config.ts\n            \n            variable\n            OpenTelemetryInjectConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/interceptor/opentelemetry-http.interceptor.ts\n            \n            interceptor\n            OpenTelemetryHttpInterceptor\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/services/exporter/console-span-exporter.service.ts\n            \n            injectable\n            ConsoleSpanExporterService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/services/exporter/exporter.interface.ts\n            \n            interface\n            IExporter\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/services/exporter/jaeger-exporter.service.ts\n            \n            injectable\n            JaegerExporterService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/services/exporter/otelcol-exporter.service.ts\n            \n            injectable\n            OtelcolExporterService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/services/exporter/span-exporter.service.ts\n            \n            injectable\n            SpanExporterService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/services/exporter/span-exporter.service.ts\n            \n            function\n            spanExporterServiceFactory\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/services/exporter/zipkin-exporter.service.ts\n            \n            injectable\n            ZipkinExporterService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/services/propagator/b3-propagator.service.ts\n            \n            injectable\n            B3PropagatorService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/services/propagator/composite-propagator.service.ts\n            \n            injectable\n            CompositePropagatorService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/services/propagator/http-text-propagator.service.ts\n            \n            injectable\n            HttpTextPropagatorService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/services/propagator/http-text-propagator.service.ts\n            \n            function\n            httpTextPropagatorServiceFactory\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/services/propagator/http-trace-context-propagator.service.ts\n            \n            injectable\n            HttpTraceContextPropagatorService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/services/propagator/noop-http-text-propagator.service.ts\n            \n            injectable\n            NoopHttpTextPropagatorService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/services/propagator/propagator.interface.ts\n            \n            interface\n            IPropagator\n            \n                100 %\n                (2/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^9.1.9\n        \n            @angular/cdk : ^9.2.4\n        \n            @angular/common : ^9.1.9\n        \n            @angular/compiler : ^9.1.9\n        \n            @angular/core : ^9.1.9\n        \n            @angular/forms : ^9.1.9\n        \n            @angular/material : ^9.2.4\n        \n            @angular/platform-browser : ^9.1.9\n        \n            @angular/platform-browser-dynamic : ^9.1.9\n        \n            @angular/router : ^9.1.9\n        \n            @opentelemetry/exporter-collector : ^0.8.3\n        \n            @opentelemetry/web : ^0.8.3\n        \n            body-parser : ^1.19.0\n        \n            concurrently : ^5.2.0\n        \n            ngx-highlight-js : ^9.0.0\n        \n            rxjs : ~6.5.4\n        \n            tslib : ^1.13.0\n        \n            zone.js : ~0.10.2\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Collector   (projects/.../opentelemetry-config.ts)\n                        \n                        \n                            Propagator   (projects/.../opentelemetry-config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/opentelemetry-interceptor/src/lib/configuration/opentelemetry-config.ts\n    \n        \n            \n                \n                    \n                        \n                        Collector\n                    \n                \n                        \n                            \n                                 jaeger\n                            \n                        \n                        \n                            \n                                Value : jaeger\n                            \n                        \n                        \n                            \n                                 zipkin\n                            \n                        \n                        \n                            \n                                Value : zipkin\n                            \n                        \n                        \n                            \n                                 otelcol\n                            \n                        \n                        \n                            \n                                Value : otelcol\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        Propagator\n                    \n                \n                        \n                            \n                                 b3\n                            \n                        \n                        \n                            \n                                Value : B3Propagator\n                            \n                        \n                        \n                            \n                                 httpTrace\n                            \n                        \n                        \n                            \n                                Value : HttpTraceContext\n                            \n                        \n                        \n                            \n                                 composite\n                            \n                        \n                        \n                            \n                                Value : CompositePropagator\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            httpTextPropagatorServiceFactory   (projects/.../http-text-propagator.service.ts)\n                        \n                        \n                            spanExporterServiceFactory   (projects/.../span-exporter.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/opentelemetry-interceptor/src/lib/services/propagator/http-text-propagator.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            httpTextPropagatorServiceFactory\n                        \n                        \n                    \n                \n            \n            \n                \nhttpTextPropagatorServiceFactory(config, httpTraceContextPropagatorService, b3PropagatorService, compositePropagatorService, noopHttpTextPropagatorService)\n                \n            \n\n\n\n\n            \n                \n                    httpTextPropagatorServiceFactory\nProvide a factory to have a propagator service\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    config\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        config\n\n                                    \n                                \n                                \n                                    httpTraceContextPropagatorService\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        httpTraceContext\n\n                                    \n                                \n                                \n                                    b3PropagatorService\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        propagator\n\n                                    \n                                \n                                \n                                    compositePropagatorService\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        composite\n\n                                    \n                                \n                                \n                                    noopHttpTextPropagatorService\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        noop\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    projects/opentelemetry-interceptor/src/lib/services/exporter/span-exporter.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            spanExporterServiceFactory\n                        \n                        \n                    \n                \n            \n            \n                \nspanExporterServiceFactory(config, jaegerExporterService, otelcolExporterService, zipkinExporterService, consoleSpanExporter)\n                \n            \n\n\n\n\n            \n                \n                    Factory to return Service configured\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    config\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        config\n\n                                    \n                                \n                                \n                                    jaegerExporterService\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        jaeger\n\n                                    \n                                \n                                \n                                    otelcolExporterService\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        otelcol\n\n                                    \n                                \n                                \n                                    zipkinExporterService\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        zipkin\n\n                                    \n                                \n                                \n                                    consoleSpanExporter\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        console\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nOpenTelemetry Angular Interceptor\n\n\nAbout\n@jufab/opentelemetry-angular-interceptor is an Angular Library to deploy OpenTelemetry in your Angular application\nThis library use opentelemetry-js package\nOnly works for Angular >= 9.0.0\nTable of contents\n\nGetting started\nInstallation\nConfiguration\nExample global Configuration\nCommon Configuration\nOpenTelemetry-collector Configuration\nZipkin Collector Configuration\nJaeger Collector Configuration\n\n\nAngular Module\n\n\nHow it works\nExample\nRun\n[Optional] Result in OpenTelemtery-collector\n\n\n\nGetting started\nInstallation\nWith npm :\nnpm install @jufab/opentelemetry-angular-interceptor @opentelemetry/web @opentelemetry/exporter-collectorConfiguration\nUse the \"OpentelemetryConfig\" interface to configure the Tracer\nexport interface OpentelemetryConfig {\n  commonConfig: CommonCollectorConfig;\n  jaegerConfig?: JaegerCollectorConfig;\n  zipkinConfig?: ZipkinCollectorConfig;\n  otelcolConfig?: OtelCollectorConfig;\n}Example global Configuration\nFrom the example-app\nopentelemetryConfig: {\n    commonConfig: {\n      console: true, //(boolean) Display trace on console\n      production: false, //(boolean) Send trace with BatchSpanProcessor (true) or SimpleSpanProcessor (false) more info : https://github.com/open-telemetry/opentelemetry-js/tree/master/packages/opentelemetry-api#tracing\n      serviceName: 'example-app', //Service name send in trace\n      collector: Collector.otelcol, //Enum to specified the collector : OpenTelemetry Collector(otelcol), Zipkin (zipkin), Jaeger (jaeger)\n      propagator: Propagator.b3, // Enum to propagator : B3 (b3), HttpTraceContext (httpTrace), Composite include b3 and httpTrace (composite)\n      probabilitySampler: 0.7, //Samples a configurable percentage of traces, value between 0 to 1\n    },\n    otelcolConfig: {\n      url: 'http://localhost:9090/v1/trace', //URL of opentelemetry collector\n    },\n    zipkinConfig: {\n      url: 'http://localhost:9411/api/v2/spans', //url of zipkin collector\n    },\n    jaegerConfig: {\n      host: 'localhost', //Host and port of jaeger's agent.\n      port: 6832,\n    }\n  }\nCommon Configuration\n\nconsole: (boolean) Display trace on console if true\nproduction: (boolean)Send trace via BatchSpanProcessor (Async) or SimpleSpanProcessor (Sync) : It's recommend to use BatchSpanProcessor on Production.\nserviceName: (string) Service name in your trace\ncollector: (Enum) use Enum Collector (otelcol,zipkin,jaeger)\npropagator: (Enum) use Propagator Enum (b3,httpTrace,composite)\n\nOpenTelemetry-collector Configuration\n\nurl: (string) url of opentelemetry collector (default : http://localhost:9090/v1/trace)\n\nZipkin Collector Configuration\n\nurl: (string) url of zipkin collector (default : http://localhost:9411/api/v2/spans)\n\nJaeger Collector Configuration\n\nhost: (string) host jaeger agent\nport: (string) port jaeger agent\n\nAngular Module\nTo insert OpenTelemetryInterceptorModule, you can add in your application module (generally app.module.ts)\nimport { NgModule } from '@angular/core';\n...\nimport { AppComponent } from './app.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { OpenTelemetryInterceptorModule } from '@jufab/opentelemetry-angular-interceptor';\nimport { environment } from '../environments/environment';\n...\n\n@NgModule({\n  declarations: [AppComponent, ...],\n  imports: [\n    ...\n    HttpClientModule,\n    //Insert module OpenTelemetryInterceptorModule with configuration, HttpClientModule is used for interceptor\n    OpenTelemetryInterceptorModule.forRoot(environment.opentelemetryConfig),\n    ...\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}How it works\nThis library is based on HttpClientModule and the HTTP_INTERCEPTORS\nOpenTelemetryInterceptor implement an HttpInterceptor and the intercept method.\nThis implementation initialise a WebTracerProvider, create a Span and add header propagation in the current call.\n\nThe response body is adding by an event in span.\n\nExample\nThis project have an \"example-app\" as Angular application example.\nprojects/example-app\nYou can see how configure and insert this module.\nYou can althought test opentelemetry-angular-interceptor with this application.\nRun\nTo start this Example application, run command :\nnpm run start:complete-example-appand open the application at http://localhost:4200\n[Optional] Result in OpenTelemtery-collector\nIf you want to see the result in a collector *, there's a docker-compose available in this project.\nYou can start it with this command :\ndocker-compose -f projects/example-app/collector/docker-compose.yaml up -dGo to the jaeger application (http://localhost:16686) to see result.\nMore info about the collector here : https://github.com/open-telemetry/opentelemetry-collector\n\n* without an Agent or a Collector you can see an error in your browser about sending a \"trace\".\n\nTroubleshoot\n\n\n\nError\nFix\n\n\n\n\nerror TS2694: Namespace 'NodeJS' has no exported member 'Timeout'.\nNeed dependence @type/node >= 12.0.2\n\n\nerror TS1086: An accessor cannot be declared in an ambient context.\nNeed dependence typescript >= 3.6.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\n                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\nDefinitions.\n\"License\" shall mean the terms and conditions for use, reproduction,\nand distribution as defined by Sections 1 through 9 of this document.\n\"Licensor\" shall mean the copyright owner or entity authorized by\nthe copyright owner that is granting the License.\n\"Legal Entity\" shall mean the union of the acting entity and all\nother entities that control, are controlled by, or are under common\ncontrol with that entity. For the purposes of this definition,\n\"control\" means (i) the power, direct or indirect, to cause the\ndirection or management of such entity, whether by contract or\notherwise, or (ii) ownership of fifty percent (50%) or more of the\noutstanding shares, or (iii) beneficial ownership of such entity.\n\"You\" (or \"Your\") shall mean an individual or Legal Entity\nexercising permissions granted by this License.\n\"Source\" form shall mean the preferred form for making modifications,\nincluding but not limited to software source code, documentation\nsource, and configuration files.\n\"Object\" form shall mean any form resulting from mechanical\ntransformation or translation of a Source form, including but\nnot limited to compiled object code, generated documentation,\nand conversions to other media types.\n\"Work\" shall mean the work of authorship, whether in Source or\nObject form, made available under the License, as indicated by a\ncopyright notice that is included in or attached to the work\n(an example is provided in the Appendix below).\n\"Derivative Works\" shall mean any work, whether in Source or Object\nform, that is based on (or derived from) the Work and for which the\neditorial revisions, annotations, elaborations, or other modifications\nrepresent, as a whole, an original work of authorship. For the purposes\nof this License, Derivative Works shall not include works that remain\nseparable from, or merely link (or bind by name) to the interfaces of,\nthe Work and Derivative Works thereof.\n\"Contribution\" shall mean any work of authorship, including\nthe original version of the Work and any modifications or additions\nto that Work or Derivative Works thereof, that is intentionally\nsubmitted to Licensor for inclusion in the Work by the copyright owner\nor by an individual or Legal Entity authorized to submit on behalf of\nthe copyright owner. For the purposes of this definition, \"submitted\"\nmeans any form of electronic, verbal, or written communication sent\nto the Licensor or its representatives, including but not limited to\ncommunication on electronic mailing lists, source code control systems,\nand issue tracking systems that are managed by, or on behalf of, the\nLicensor for the purpose of discussing and improving the Work, but\nexcluding communication that is conspicuously marked or otherwise\ndesignated in writing by the copyright owner as \"Not a Contribution.\"\n\"Contributor\" shall mean Licensor and any individual or Legal Entity\non behalf of whom a Contribution has been received by Licensor and\nsubsequently incorporated within the Work.\n\nGrant of Copyright License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\ncopyright license to reproduce, prepare Derivative Works of,\npublicly display, publicly perform, sublicense, and distribute the\nWork and such Derivative Works in Source or Object form.\n\nGrant of Patent License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\n(except as stated in this section) patent license to make, have made,\nuse, offer to sell, sell, import, and otherwise transfer the Work,\nwhere such license applies only to those patent claims licensable\nby such Contributor that are necessarily infringed by their\nContribution(s) alone or by combination of their Contribution(s)\nwith the Work to which such Contribution(s) was submitted. If You\ninstitute patent litigation against any entity (including a\ncross-claim or counterclaim in a lawsuit) alleging that the Work\nor a Contribution incorporated within the Work constitutes direct\nor contributory patent infringement, then any patent licenses\ngranted to You under this License for that Work shall terminate\nas of the date such litigation is filed.\n\nRedistribution. You may reproduce and distribute copies of the\nWork or Derivative Works thereof in any medium, with or without\nmodifications, and in Source or Object form, provided that You\nmeet the following conditions:\n(a) You must give any other recipients of the Work or\nDerivative Works a copy of this License; and(b) You must cause any modified files to carry prominent notices\nstating that You changed the files; and(c) You must retain, in the Source form of any Derivative Works\nthat You distribute, all copyright, patent, trademark, and\nattribution notices from the Source form of the Work,\nexcluding those notices that do not pertain to any part of\nthe Derivative Works; and(d) If the Work includes a \"NOTICE\" text file as part of its\ndistribution, then any Derivative Works that You distribute must\ninclude a readable copy of the attribution notices contained\nwithin such NOTICE file, excluding those notices that do not\npertain to any part of the Derivative Works, in at least one\nof the following places: within a NOTICE text file distributed\nas part of the Derivative Works; within the Source form or\ndocumentation, if provided along with the Derivative Works; or,\nwithin a display generated by the Derivative Works, if and\nwherever such third-party notices normally appear. The contents\nof the NOTICE file are for informational purposes only and\ndo not modify the License. You may add Your own attribution\nnotices within Derivative Works that You distribute, alongside\nor as an addendum to the NOTICE text from the Work, provided\nthat such additional attribution notices cannot be construed\nas modifying the License.You may add Your own copyright statement to Your modifications and\nmay provide additional or different license terms and conditions\nfor use, reproduction, or distribution of Your modifications, or\nfor any such Derivative Works as a whole, provided Your use,\nreproduction, and distribution of the Work otherwise complies with\nthe conditions stated in this License.\n\nSubmission of Contributions. Unless You explicitly state otherwise,\nany Contribution intentionally submitted for inclusion in the Work\nby You to the Licensor shall be under the terms and conditions of\nthis License, without any additional terms or conditions.\nNotwithstanding the above, nothing herein shall supersede or modify\nthe terms of any separate license agreement you may have executed\nwith Licensor regarding such Contributions.\n\nTrademarks. This License does not grant permission to use the trade\nnames, trademarks, service marks, or product names of the Licensor,\nexcept as required for reasonable and customary use in describing the\norigin of the Work and reproducing the content of the NOTICE file.\n\nDisclaimer of Warranty. Unless required by applicable law or\nagreed to in writing, Licensor provides the Work (and each\nContributor provides its Contributions) on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied, including, without limitation, any warranties or conditions\nof TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\nPARTICULAR PURPOSE. You are solely responsible for determining the\nappropriateness of using or redistributing the Work and assume any\nrisks associated with Your exercise of permissions under this License.\n\nLimitation of Liability. In no event and under no legal theory,\nwhether in tort (including negligence), contract, or otherwise,\nunless required by applicable law (such as deliberate and grossly\nnegligent acts) or agreed to in writing, shall any Contributor be\nliable to You for damages, including any direct, indirect, special,\nincidental, or consequential damages of any character arising as a\nresult of this License or out of the use or inability to use the\nWork (including but not limited to damages for loss of goodwill,\nwork stoppage, computer failure or malfunction, or any and all\nother commercial damages or losses), even if such Contributor\nhas been advised of the possibility of such damages.\n\nAccepting Warranty or Additional Liability. While redistributing\nthe Work or Derivative Works thereof, You may choose to offer,\nand charge a fee for, acceptance of support, warranty, indemnity,\nor other liability obligations and/or rights consistent with this\nLicense. However, in accepting such obligations, You may act only\non Your own behalf and on Your sole responsibility, not on behalf\nof any other Contributor, and only if You agree to indemnify,\ndefend, and hold each Contributor harmless for any liability\nincurred by, or claims asserted against, such Contributor by reason\nof your accepting any such warranty or additional liability.\nEND OF TERMS AND CONDITIONS\nAPPENDIX: How to apply the Apache License to your work.\nTo apply the Apache License to your work, attach the following\nboilerplate notice, with the fields enclosed by brackets \"[]\"\nreplaced with your own identifying information. (Don't include\nthe brackets!)  The text should be enclosed in the appropriate\ncomment syntax for the file format. We also recommend that a\nfile or class name and description of purpose be included on the\nsame \"printed page\" as the copyright notice for easier\nidentification within third-party archives.\nCopyright [yyyy] [name of copyright owner]\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        OpenTelemetryInterceptorModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"todo.html":{"url":"todo.html","title":"getting-started - todo","body":"\n                   \n\nTask for opentelemetry-angular-interceptor\nTodo in project...\nTodo\n\n Add in issue Github this todo list  \n Add more configuration for OpenTelemetry-collector : See here  \n Zipkin  \n Add Zipkin exporter (when it's available)  \n Add more configuration for Zipkin : here  \n\n\n Jaeger  \n Add Jaeger exporter (when it's available)  \n Add more configuration for Jaeger : here  \n\n\n Prepare correlation-context here  \n\nIn Progress\nDone ✓\n\n Add sampler in configuration => here  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            OpenTelemetryInjectConfig   (projects/.../opentelemetry-config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/opentelemetry-interceptor/src/lib/configuration/opentelemetry-config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            OpenTelemetryInjectConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new InjectionToken('opentelemetry.config')\n                        \n                    \n\n                \n                    \n                        OpenTelemetryInjectConfig : Config injection \n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
