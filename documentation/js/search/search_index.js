var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/injectables/B3PropagatorService.html",[0,0.476,1,1.625]],["body/injectables/B3PropagatorService.html",[0,0.711,1,2.839,2,1.356,3,0.48,4,0.551,5,0.48,6,0.372,7,3.661,8,1.884,9,0.627,10,0.349,11,1.275,12,3.206,13,0.989,14,3.459,15,1.339,16,2.408,17,0.989,18,0.041,19,3.318,20,0.831,21,0.627,22,2.168,23,2.432,24,1.884,25,2.432,26,1.356,27,1.356,28,0.48,29,1.221,30,1.356,31,0.708,32,0.024,33,0.03,34,0.024]],["title/interfaces/CommonCollectorConfig.html",[35,0.476,36,1.169]],["body/interfaces/CommonCollectorConfig.html",[3,0.305,4,0.35,5,0.305,6,0.183,9,0.399,10,0.222,16,0.958,18,0.042,20,0.35,21,0.399,28,0.707,31,0.45,32,0.015,33,0.022,34,0.015,35,0.73,36,1.52,37,0.862,38,0.862,39,0.862,40,1.582,41,1.616,42,1.419,43,1.554,44,1.226,45,2.162,46,1.995,47,1.359,48,1.692,49,1.309,50,2.22,51,1.513,52,1.582,53,1.773,54,1.773,55,2.33,56,0.836,57,1.149,58,1.197,59,1.582,60,1.369,61,1.369,62,1.419,63,0.862,64,0.958,65,0.862,66,1.197,67,1.197,68,0.958,69,1.276,70,1.68,71,0.931,72,1.276,73,1.068,74,1.276,75,1.419,76,1.419,77,1.197,78,1.276,79,1.068,80,0.59,81,1.582,82,1.582,83,1.419,84,1.419,85,0.667,86,0.45,87,1.068,88,1.068,89,1.068]],["title/injectables/HttpTextPropagatorService.html",[0,0.476,90,1.834]],["body/injectables/HttpTextPropagatorService.html",[0,0.596,1,2.786,2,1.043,3,0.369,4,0.424,5,0.369,6,0.311,8,1.449,9,0.482,10,0.268,11,1.069,12,2.88,13,0.761,15,0.959,17,0.761,18,0.041,19,2.656,20,0.816,21,0.482,22,2.099,23,1.87,24,1.449,26,1.043,27,1.043,28,0.519,29,0.939,30,1.043,32,0.018,33,0.025,34,0.018,41,1.319,47,1.377,51,0.939,57,1.524,63,1.043,71,0.761,80,0.678,85,0.765,86,0.884,90,2.88,91,2.298,92,2.298,93,3.737,94,3.597,95,2.66,96,3.068,97,3.068,98,1.159,99,2.786,100,2.66,101,1.636,102,3.068,103,2.184,104,3.036,105,2.184,106,2.66,107,2.184,108,1.87,109,2.099,110,1.87,111,1.87,112,2.184,113,2.66,114,3.068,115,2.184,116,3.546,117,2.66]],["title/injectables/HttpTraceContextPropagatorService.html",[0,0.476,99,1.625]],["body/injectables/HttpTraceContextPropagatorService.html",[0,0.705,2,1.338,3,0.474,4,0.544,5,0.474,6,0.368,8,1.859,9,0.619,10,0.344,11,1.264,12,3.19,13,0.976,15,1.332,17,0.976,18,0.041,19,3.305,20,0.827,21,0.619,22,2.149,23,2.399,24,1.859,25,2.399,26,1.338,27,1.338,28,0.474,29,1.205,30,1.338,31,0.699,32,0.023,33,0.03,34,0.023,51,1.561,65,2.158,91,2.719,99,2.825,101,2.719,118,3.413]],["title/interfaces/IExporter.html",[35,0.476,119,1.3]],["body/interfaces/IExporter.html",[3,0.515,4,0.591,5,0.515,6,0.389,9,0.673,10,0.374,11,1.333,13,1.061,15,0.952,17,1.061,18,0.041,20,0.591,28,0.515,32,0.025,33,0.032,34,0.025,35,0.813,37,1.454,71,1.333,119,2.032,120,3.045,121,3.761,122,3.828,123,2.914,124,3.71,125,3.828,126,4.663,127,2.776,128,1.803]],["title/interfaces/IPropagator.html",[22,1.45,35,0.476]],["body/interfaces/IPropagator.html",[3,0.522,4,0.6,5,0.522,6,0.392,9,0.683,10,0.38,11,1.346,12,3.307,13,1.076,15,0.966,17,1.076,18,0.041,19,3.405,20,0.6,22,2.287,24,2.05,28,0.522,32,0.026,33,0.032,34,0.026,35,0.818,37,1.475,47,1.381,122,3.863,125,3.863,129,3.09,130,3.764,131,4.706]],["title/interfaces/JaegerCollectorConfig.html",[35,0.476,74,1.169]],["body/interfaces/JaegerCollectorConfig.html",[3,0.331,4,0.38,5,0.331,6,0.198,9,0.432,10,0.24,16,1.038,18,0.042,20,0.38,21,0.432,28,0.723,31,0.488,32,0.016,33,0.024,34,0.016,35,0.754,36,1.354,37,0.934,38,0.934,39,0.934,40,1.158,41,1.669,42,1.505,43,1.455,44,1.274,45,1.505,46,1.038,47,1.144,48,1.219,49,0.988,50,1.505,51,1.219,52,1.158,53,1.297,54,1.297,55,2.397,56,0.612,57,0.841,58,1.297,59,1.678,60,1.572,61,1.434,62,1.505,63,0.934,64,1.038,65,0.934,66,1.297,67,1.297,68,1.038,69,1.354,70,1.746,71,0.988,72,1.354,73,1.158,74,1.592,75,2.15,76,2.15,77,2.212,78,1.354,79,1.158,80,0.626,81,1.678,82,1.678,83,1.505,84,1.505,85,0.707,86,0.488,87,1.158,88,1.158,89,1.158]],["title/injectables/JaegerExporterService.html",[0,0.476,132,1.625]],["body/injectables/JaegerExporterService.html",[0,0.608,2,1.073,3,0.38,4,0.437,5,0.38,6,0.366,9,0.691,10,0.276,11,1.09,13,1.09,15,1.326,17,0.783,18,0.041,20,0.756,21,0.497,26,1.073,27,1.073,28,0.38,29,1.548,30,1.073,31,0.561,32,0.019,33,0.026,34,0.019,44,0.783,48,0.967,49,0.783,56,0.703,75,1.194,76,1.194,80,0.936,85,0.561,86,0.971,98,1.194,109,1.331,119,1.662,123,2.583,127,2.424,128,1.331,132,2.583,133,3.601,134,1.331,135,3.813,136,3.13,137,3.13,138,4.239,139,3.13,140,2.681,141,2.345,142,3.13,143,3.13,144,3.13,145,3.63,146,2.389,147,1.684,148,2.739,149,1.331,150,2.739,151,1.684,152,1.684,153,1.684,154,2.739,155,2.248,156,1.925,157,2.739,158,1.925,159,2.739,160,2.739]],["title/interfaces/OpenTelemetryConfig.html",[35,0.476,80,0.541]],["body/interfaces/OpenTelemetryConfig.html",[3,0.319,4,0.366,5,0.319,6,0.191,9,0.416,10,0.232,16,1.001,18,0.042,20,0.366,21,0.416,28,0.716,31,0.47,32,0.016,33,0.023,34,0.016,35,0.743,36,1.716,37,0.9,38,0.9,39,0.9,40,1.116,41,1.546,42,1.466,43,1.393,44,1.393,45,1.466,46,1.001,47,1.124,48,1.187,49,1.252,50,1.466,51,1.187,52,1.116,53,1.251,54,1.251,55,2.128,56,0.59,57,0.811,58,1.251,59,1.634,60,1.404,61,1.404,62,1.466,63,0.9,64,1.001,65,0.9,66,1.251,67,1.251,68,1.001,69,1.716,70,1.716,71,0.962,72,1.318,73,1.116,74,1.716,75,1.466,76,1.466,77,1.251,78,1.716,79,1.116,80,0.794,81,2.367,82,2.367,83,2.122,84,2.122,85,0.688,86,0.47,87,1.116,88,1.116,89,1.116]],["title/interceptors/OpenTelemetryInterceptor.html",[161,1.625,162,1.834]],["body/interceptors/OpenTelemetryInterceptor.html",[0,0.337,3,0.176,4,0.203,5,0.176,6,0.364,9,0.492,10,0.128,11,0.605,13,1.203,15,0.697,17,1.004,18,0.042,20,0.737,21,0.231,24,0.692,25,0.894,26,0.498,27,0.498,28,0.176,29,0.958,30,0.498,31,0.776,32,0.009,33,0.014,34,0.009,42,0.922,44,1.084,45,1.751,46,1.652,47,0.697,49,1.149,50,1.652,56,0.973,71,0.364,72,0.498,80,0.574,85,0.26,86,0.861,88,1.537,90,2.586,92,0.782,98,0.554,101,1.3,102,1.044,109,2.246,111,0.894,127,2.044,128,0.618,145,1.486,146,1.723,147,0.782,149,1.842,151,0.782,153,3.057,161,1.478,162,1.945,163,1.271,164,1.044,165,3.163,166,3.298,167,2.115,168,2.715,169,2.115,170,2.715,171,2.715,172,2.586,173,2.115,174,2.115,175,4.503,176,1.271,177,2.115,178,4.817,179,4.899,180,2.115,181,3.79,182,1.271,183,1.271,184,1.486,185,3.163,186,2.115,187,2.115,188,2.115,189,1.271,190,3.79,191,1.486,192,2.115,193,1.271,194,1.271,195,2.228,196,3.163,197,2.228,198,2.115,199,1.271,200,3.163,201,3.163,202,1.271,203,2.115,204,2.115,205,3.163,206,1.3,207,2.715,208,2.715,209,2.115,210,3.163,211,1.271,212,2.115,213,2.115,214,2.715,215,1.044,216,1.044,217,1.271,218,1.044,219,3.512,220,2.115,221,2.115,222,2.115,223,2.115,224,1.271,225,1.271,226,1.044,227,1.271,228,1.271,229,1.271,230,1.271,231,2.115,232,1.044,233,1.271,234,1.271,235,1.271,236,1.271,237,1.271,238,1.271,239,1.271,240,1.271,241,1.271,242,1.271,243,1.271,244,3.163,245,2.115,246,2.115,247,2.115,248,1.271,249,1.736,250,1.271,251,1.271,252,1.271,253,1.271,254,1.271,255,1.271,256,1.271,257,1.271,258,1.271,259,1.271,260,1.271,261,1.271,262,1.271,263,2.715,264,1.271,265,2.715,266,1.271,267,1.271,268,1.271,269,1.271,270,1.271,271,1.271,272,1.271,273,1.271,274,1.271,275,1.271,276,1.271,277,1.271,278,1.271]],["title/modules/OpenTelemetryInterceptorModule.html",[279,2.449,280,2.097]],["body/modules/OpenTelemetryInterceptorModule.html",[3,0.427,4,0.49,5,0.427,6,0.344,11,0.879,13,0.879,15,0.79,17,0.879,18,0.041,20,0.828,21,0.558,28,0.427,29,1.085,31,0.63,32,0.021,33,0.028,34,0.021,44,1.332,49,0.879,56,0.79,80,0.903,85,0.845,86,0.954,98,1.34,108,2.902,146,1.675,149,1.495,162,2.538,191,2.162,215,2.525,280,3.652,281,2.162,282,4.128,283,3.075,284,4.128,285,3.075,286,4.128,287,3.075,288,4.66,289,4.66,290,4.128,291,4.128,292,4.128,293,3.075,294,2.525,295,3.075,296,2.525,297,4.128,298,3.075,299,2.525,300,3.075,301,3.075,302,3.075,303,3.075,304,2.525,305,3.075,306,3.075,307,3.075]],["title/interfaces/OtelCollectorConfig.html",[35,0.476,69,1.169]],["body/interfaces/OtelCollectorConfig.html",[3,0.336,4,0.386,5,0.336,6,0.202,9,0.439,10,0.244,16,1.055,18,0.042,20,0.386,21,0.439,28,0.726,31,0.496,32,0.016,33,0.024,34,0.016,35,0.759,36,1.37,37,0.949,38,0.949,39,0.949,40,1.177,41,1.68,42,1.523,43,1.462,44,0.999,45,1.523,46,1.055,47,1.153,48,1.233,49,0.693,50,1.523,51,1.233,52,1.177,53,1.319,54,1.319,55,2.41,56,0.622,57,0.855,58,1.319,59,1.698,60,1.447,61,1.447,62,1.523,63,0.949,64,1.055,65,0.949,66,1.319,67,1.319,68,1.523,69,1.607,70,2.052,71,1.173,72,1.607,73,1.698,74,1.37,75,1.523,76,1.523,77,1.319,78,1.37,79,1.177,80,0.634,81,1.698,82,1.698,83,1.523,84,1.523,85,0.715,86,0.496,87,1.177,88,1.177,89,1.177]],["title/injectables/OtelcolExporterService.html",[0,0.476,308,1.625]],["body/injectables/OtelcolExporterService.html",[0,0.616,2,1.094,3,0.387,4,0.445,5,0.387,6,0.398,9,0.701,10,0.281,11,1.105,13,1.267,15,1.228,17,0.798,18,0.041,20,0.8,21,0.506,26,1.094,27,1.094,28,0.387,29,1.564,30,1.094,31,0.571,32,0.019,33,0.026,34,0.019,41,1.364,42,1.684,43,0.798,44,0.798,48,0.985,49,1.105,56,0.717,70,1.094,80,0.942,84,1.931,85,0.571,86,0.979,98,1.216,109,1.356,119,1.684,123,2.604,127,2.153,128,1.356,134,1.356,146,2.413,147,1.716,149,1.356,151,1.716,152,1.716,153,2.725,156,1.962,158,1.962,308,2.604,309,3.926,310,3.864,311,2.791,312,5.022,313,5.022,314,2.291,315,2.791,316,2.791,317,2.791]],["title/injectables/SpanExporterService.html",[0,0.476,172,1.834]],["body/injectables/SpanExporterService.html",[0,0.588,2,1.024,3,0.363,4,0.417,5,0.363,6,0.307,9,0.474,10,0.264,11,1.055,13,0.747,15,1.098,17,0.747,18,0.041,20,0.834,21,0.474,26,1.024,27,1.024,28,0.512,29,0.922,30,1.024,32,0.018,33,0.025,34,0.018,43,1.223,57,0.922,60,0.922,61,0.922,62,1.139,71,0.747,80,0.669,85,0.755,86,0.876,94,3.576,96,3.029,97,3.029,98,1.139,103,2.145,105,2.145,107,2.145,109,2.258,110,1.837,111,1.837,112,2.145,114,3.511,116,3.815,119,1.864,121,3.446,123,2.531,127,2.079,128,1.27,132,2.77,134,1.27,152,1.607,172,2.269,206,2.269,226,3.511,308,2.77,318,2.594,319,3.511,320,2.613,321,2.77,322,2.594,323,2.613,324,2.613,325,2.613,326,2.145,327,2.613]],["title/interfaces/ZipkinCollectorConfig.html",[35,0.476,78,1.169]],["body/interfaces/ZipkinCollectorConfig.html",[3,0.337,4,0.387,5,0.337,6,0.202,9,0.44,10,0.245,16,1.058,18,0.042,20,0.387,21,0.44,28,0.727,31,0.497,32,0.017,33,0.024,34,0.017,35,0.76,36,1.372,37,0.951,38,0.951,39,0.951,40,1.18,41,1.682,42,1.526,43,1.42,44,1.001,45,1.526,46,1.058,47,1.154,48,1.236,49,0.694,50,1.526,51,1.236,52,1.18,53,1.322,54,1.322,55,2.412,56,0.623,57,0.857,58,1.322,59,1.701,60,1.449,61,1.586,62,1.526,63,0.951,64,1.058,65,0.951,66,1.322,67,1.322,68,1.058,69,1.372,70,2.053,71,1.174,72,1.609,73,1.18,74,1.372,75,1.526,76,1.526,77,1.322,78,1.609,79,1.701,80,0.635,81,1.701,82,1.701,83,1.526,84,1.526,85,0.717,86,0.497,87,1.18,88,1.18,89,1.18]],["title/injectables/ZipkinExporterService.html",[0,0.476,321,1.625]],["body/injectables/ZipkinExporterService.html",[0,0.624,2,1.115,3,0.395,4,0.454,5,0.395,6,0.373,9,0.71,10,0.287,11,1.12,13,1.12,15,1.238,17,0.814,18,0.041,20,0.769,21,0.516,26,1.115,27,1.115,28,0.395,29,1.004,30,1.115,31,0.582,32,0.019,33,0.027,34,0.019,44,0.814,48,1.004,49,0.814,56,0.73,70,1.115,80,0.948,83,1.24,85,0.582,86,0.987,98,1.24,109,1.383,119,1.706,123,2.626,127,2.457,128,1.383,134,1.383,136,3.214,137,3.214,138,3.959,139,3.214,140,2.752,141,2.407,142,3.214,143,3.214,144,3.214,145,3.39,146,2.438,147,1.749,149,1.383,151,1.749,152,1.749,153,1.749,155,2.336,156,2,158,2,321,2.132,328,3.675,329,3.915,330,2.845,331,2.845,332,2.845,333,2.845]],["title/coverage.html",[334,3.32]],["body/coverage.html",[0,0.846,1,1.499,5,0.382,6,0.488,7,2.26,8,2.589,18,0.04,22,1.338,31,0.564,32,0.019,33,0.026,34,0.019,35,0.846,36,1.079,38,2.027,39,2.027,49,0.787,51,0.972,69,1.079,74,1.079,78,1.079,80,0.499,85,0.564,90,1.693,91,2.705,92,2.353,99,1.499,101,1.693,104,1.936,110,2.691,119,1.2,120,2.26,129,2.26,132,1.499,133,2.26,134,2.428,161,1.499,162,1.693,164,2.26,172,1.693,308,1.499,309,2.26,318,2.691,321,1.499,322,1.936,328,2.26,334,2.26,335,2.753,336,2.753,337,2.753,338,5.859,339,2.753,340,4.4,341,2.753,342,5.411,343,2.753,344,4.4,345,2.753,346,2.753,347,2.753,348,2.753]],["title/dependencies.html",[349,2.505,350,2.517]],["body/dependencies.html",[18,0.041,21,0.663,32,0.025,33,0.031,34,0.025,43,1.046,216,3.002,218,3.002,249,3.002,314,3.002,350,2.571,351,3.657,352,5.76,353,3.657,354,4.621,355,3.657,356,3.657,357,3.657,358,3.657,359,4.621,360,3.793,361,3.657,362,3.657,363,4.621,364,3.657,365,3.657,366,3.657,367,3.657,368,3.657,369,3.657,370,3.657,371,3.657,372,3.657,373,3.657,374,3.657,375,3.657,376,3.657]],["title/miscellaneous/enumerations.html",[377,1.217,378,2.939]],["body/miscellaneous/enumerations.html",[6,0.338,10,0.41,16,1.77,18,0.04,32,0.028,33,0.034,34,0.028,38,1.592,39,2.082,43,1.41,47,1.266,60,1.741,61,1.741,62,2.149,63,1.592,64,1.77,65,1.592,72,2.218,377,1.974,378,3.335,379,4.049]],["title/miscellaneous/functions.html",[377,1.217,380,2.939]],["body/miscellaneous/functions.html",[1,2.586,6,0.396,8,2.586,10,0.385,15,0.981,18,0.037,32,0.026,33,0.032,34,0.026,44,1.358,47,0.981,56,1.219,57,1.676,86,0.972,91,2.349,92,2.92,94,3.339,99,2.586,104,3.633,108,2.686,132,2.586,134,2.308,149,2.308,308,2.586,318,2.686,319,3.136,321,2.586,322,3.339,377,1.857,380,3.136,381,3.82,382,3.82,383,3.82,384,3.82]],["title/index.html",[10,0.253,385,1.761,386,1.761]],["body/index.html",[3,0.434,18,0.04,28,0.289,32,0.028,33,0.021,34,0.014,35,0.498,36,0.816,40,1.012,41,1.579,43,1.594,45,1.819,46,1.636,47,1.072,48,1.104,50,1.636,51,1.77,52,2.029,55,2.174,56,0.803,57,1.104,59,2.283,60,1.658,61,1.579,63,1.226,64,0.907,65,0.816,68,2.048,69,0.816,70,1.965,71,0.894,73,1.52,74,0.816,75,1.819,76,1.819,78,0.816,79,1.52,80,0.681,81,1.52,82,1.52,83,1.363,84,1.363,115,1.709,140,2.64,141,1.28,161,1.703,166,1.709,184,1.464,191,2.64,195,3.083,197,2.567,206,3.083,299,1.709,326,1.709,360,1.709,385,1.464,386,1.464,387,3.755,388,2.082,389,2.082,390,2.082,391,3.755,392,2.082,393,2.082,394,2.082,395,2.082,396,2.082,397,2.082,398,4.874,399,2.082,400,3.755,401,3.127,402,3.127,403,3.755,404,2.567,405,3.127,406,3.127,407,2.082,408,2.082,409,2.082,410,2.082,411,2.082,412,2.082,413,4.174,414,2.082,415,2.082,416,2.082,417,2.082,418,2.082,419,2.082,420,2.082,421,2.082,422,3.755,423,3.127,424,3.127,425,2.082,426,2.082,427,2.082,428,2.082,429,3.083,430,2.082,431,3.127,432,3.127,433,1.709,434,2.082,435,2.082,436,2.082,437,2.082,438,2.082,439,2.082,440,2.082,441,2.082,442,1.709,443,2.082,444,2.082]],["title/modules.html",[281,2.843]],["body/modules.html",[18,0.036,32,0.031,33,0.036,34,0.031,280,3.227,281,3.227,445,4.59,446,3.768,447,4.59]],["title/overview.html",[448,3.32]],["body/overview.html",[2,1.7,18,0.035,32,0.03,33,0.035,34,0.03,37,1.7,279,4.211,294,3.561,296,3.561,304,3.561,350,3.049,448,3.561,449,4.337,450,4.337,451,5.13,452,4.337,453,4.337,454,4.337,455,5.13]],["title/todo.html",[385,1.761,386,1.761,456,2.056]],["body/todo.html",[18,0.039,32,0.026,33,0.032,34,0.026,41,1.908,43,1.092,47,0.981,60,1.824,61,1.824,68,2.07,121,3.339,141,2.92,161,2.08,184,4.041,206,2.349,232,3.136,404,4.243,429,3.136,433,3.136,442,4.439,446,3.899,456,3.899,457,3.82,458,3.82,459,3.82,460,3.82]],["title/miscellaneous/variables.html",[377,1.217,461,2.939]],["body/miscellaneous/variables.html",[6,0.36,10,0.436,18,0.038,31,0.884,32,0.029,33,0.035,34,0.029,38,1.693,39,2.005,71,1.235,72,1.693,85,1.116,86,0.884,87,2.099,89,2.099,377,2.099,379,3.546,461,3.546]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"injectables/B3PropagatorService.html":{},"interfaces/CommonCollectorConfig.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"interfaces/IExporter.html":{},"interfaces/IPropagator.html":{},"interfaces/JaegerCollectorConfig.html":{},"injectables/JaegerExporterService.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"injectables/ZipkinExporterService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["0.0.1",{"_index":255,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["0.10.2",{"_index":376,"title":{},"body":{"dependencies.html":{}}}],["0.8.2",{"_index":363,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":454,"title":{},"body":{"overview.html":{}}}],["1.13.0",{"_index":374,"title":{},"body":{"dependencies.html":{}}}],["1.19.0",{"_index":365,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":344,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":338,"title":{},"body":{"coverage.html":{}}}],["2/2",{"_index":342,"title":{},"body":{"coverage.html":{}}}],["3/3",{"_index":340,"title":{},"body":{"coverage.html":{}}}],["4/4",{"_index":346,"title":{},"body":{"coverage.html":{}}}],["5.2.0",{"_index":367,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":341,"title":{},"body":{"coverage.html":{}}}],["6.5.4",{"_index":372,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":339,"title":{},"body":{"coverage.html":{}}}],["6832",{"_index":414,"title":{},"body":{"index.html":{}}}],["7",{"_index":455,"title":{},"body":{"overview.html":{}}}],["9.0.0",{"_index":371,"title":{},"body":{"dependencies.html":{}}}],["9.1.9",{"_index":352,"title":{},"body":{"dependencies.html":{}}}],["9.2.4",{"_index":354,"title":{},"body":{"dependencies.html":{}}}],["9/9",{"_index":345,"title":{},"body":{"coverage.html":{}}}],["add",{"_index":184,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{},"index.html":{},"todo.html":{}}}],["agent",{"_index":413,"title":{},"body":{"index.html":{}}}],["already",{"_index":300,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{}}}],["always_sampler",{"_index":220,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["angular",{"_index":206,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{},"injectables/SpanExporterService.html":{},"index.html":{},"todo.html":{}}}],["angular/animations",{"_index":351,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":353,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":355,"title":{},"body":{"dependencies.html":{}}}],["angular/common/http",{"_index":215,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{}}}],["angular/compiler",{"_index":356,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":21,"title":{},"body":{"injectables/B3PropagatorService.html":{},"interfaces/CommonCollectorConfig.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"interfaces/JaegerCollectorConfig.html":{},"injectables/JaegerExporterService.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"injectables/ZipkinExporterService.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":357,"title":{},"body":{"dependencies.html":{}}}],["angular/material",{"_index":358,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":359,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":362,"title":{},"body":{"dependencies.html":{}}}],["api",{"_index":217,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["api#tracing",{"_index":408,"title":{},"body":{"index.html":{}}}],["api.defaultsetter",{"_index":267,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["api.propagation.inject",{"_index":266,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["api.span",{"_index":181,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["app",{"_index":400,"title":{},"body":{"index.html":{}}}],["app/collector/docker",{"_index":436,"title":{},"body":{"index.html":{}}}],["app[optional",{"_index":426,"title":{},"body":{"index.html":{}}}],["application",{"_index":140,"title":{},"body":{"injectables/JaegerExporterService.html":{},"injectables/ZipkinExporterService.html":{},"index.html":{}}}],["appmodule",{"_index":302,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{}}}],["async",{"_index":417,"title":{},"body":{"index.html":{}}}],["attributes",{"_index":258,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["available",{"_index":446,"title":{},"body":{"modules.html":{},"todo.html":{}}}],["b3",{"_index":63,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"injectables/HttpTextPropagatorService.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["b3,httptrace",{"_index":421,"title":{},"body":{"index.html":{}}}],["b3propagator",{"_index":16,"title":{},"body":{"injectables/B3PropagatorService.html":{},"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"miscellaneous/enumerations.html":{}}}],["b3propagatorservice",{"_index":1,"title":{"injectables/B3PropagatorService.html":{}},"body":{"injectables/B3PropagatorService.html":{},"injectables/HttpTextPropagatorService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["batchspanexporter(async",{"_index":53,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{}}}],["batchspanprocessor",{"_index":195,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{},"index.html":{}}}],["batchspanprocessor(spanexporter",{"_index":276,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["body",{"_index":249,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{},"dependencies.html":{}}}],["boolean",{"_index":50,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryInterceptor.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"index.html":{}}}],["boolean)send",{"_index":415,"title":{},"body":{"index.html":{}}}],["bootstrap",{"_index":450,"title":{},"body":{"overview.html":{}}}],["break",{"_index":116,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{},"injectables/SpanExporterService.html":{}}}],["browse",{"_index":447,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":360,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["carrier",{"_index":265,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["carrier[key",{"_index":270,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["case",{"_index":114,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{},"injectables/SpanExporterService.html":{}}}],["class",{"_index":29,"title":{},"body":{"injectables/B3PropagatorService.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"injectables/JaegerExporterService.html":{},"interceptors/OpenTelemetryInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"injectables/ZipkinExporterService.html":{}}}],["cli",{"_index":394,"title":{},"body":{"index.html":{}}}],["collector",{"_index":43,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"todo.html":{}}}],["collector(otelcol",{"_index":410,"title":{},"body":{"index.html":{}}}],["collector.jaeger",{"_index":325,"title":{},"body":{"injectables/SpanExporterService.html":{}}}],["collector.otelcol",{"_index":326,"title":{},"body":{"injectables/SpanExporterService.html":{},"index.html":{}}}],["collector.zipkin",{"_index":327,"title":{},"body":{"injectables/SpanExporterService.html":{}}}],["collectorexporter",{"_index":312,"title":{},"body":{"injectables/OtelcolExporterService.html":{}}}],["collectorexporter(this.otelcolconfig",{"_index":317,"title":{},"body":{"injectables/OtelcolExporterService.html":{}}}],["collectorexporterconfig",{"_index":313,"title":{},"body":{"injectables/OtelcolExporterService.html":{}}}],["command",{"_index":424,"title":{},"body":{"index.html":{}}}],["common",{"_index":40,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"index.html":{}}}],["commoncollectorconfig",{"_index":36,"title":{"interfaces/CommonCollectorConfig.html":{}},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"coverage.html":{},"index.html":{}}}],["commonconfig",{"_index":81,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"index.html":{}}}],["compose",{"_index":432,"title":{},"body":{"index.html":{}}}],["compose.yaml",{"_index":437,"title":{},"body":{"index.html":{}}}],["composite",{"_index":458,"title":{},"body":{"todo.html":{}}}],["concurrently",{"_index":366,"title":{},"body":{"dependencies.html":{}}}],["config",{"_index":86,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"injectables/HttpTextPropagatorService.html":{},"interfaces/JaegerCollectorConfig.html":{},"injectables/JaegerExporterService.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"injectables/ZipkinExporterService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["config.commonconfig.collector",{"_index":324,"title":{},"body":{"injectables/SpanExporterService.html":{}}}],["config.commonconfig.propagator",{"_index":113,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{}}}],["config.commonconfig.servicename",{"_index":158,"title":{},"body":{"injectables/JaegerExporterService.html":{},"injectables/OtelcolExporterService.html":{},"injectables/ZipkinExporterService.html":{}}}],["config.jaegerconfig.host",{"_index":159,"title":{},"body":{"injectables/JaegerExporterService.html":{}}}],["config.jaegerconfig.port",{"_index":160,"title":{},"body":{"injectables/JaegerExporterService.html":{}}}],["config.otelcolconfig?.url",{"_index":316,"title":{},"body":{"injectables/OtelcolExporterService.html":{}}}],["config.ts",{"_index":39,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["config.zipkinconfig.url",{"_index":333,"title":{},"body":{"injectables/ZipkinExporterService.html":{}}}],["configjaeger",{"_index":154,"title":{},"body":{"injectables/JaegerExporterService.html":{}}}],["configuration",{"_index":41,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"injectables/HttpTextPropagatorService.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/OtelcolExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"index.html":{},"todo.html":{}}}],["configuration/opentelemetry",{"_index":98,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{},"injectables/JaegerExporterService.html":{},"interceptors/OpenTelemetryInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"injectables/ZipkinExporterService.html":{}}}],["configure",{"_index":397,"title":{},"body":{"index.html":{}}}],["configured",{"_index":319,"title":{},"body":{"injectables/SpanExporterService.html":{},"miscellaneous/functions.html":{}}}],["conserve",{"_index":186,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["console",{"_index":45,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryInterceptor.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"index.html":{}}}],["console.error(\"error",{"_index":323,"title":{},"body":{"injectables/SpanExporterService.html":{}}}],["console.error('error",{"_index":106,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{}}}],["console?:boolean",{"_index":66,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{}}}],["consolespanexporter",{"_index":145,"title":{},"body":{"injectables/JaegerExporterService.html":{},"interceptors/OpenTelemetryInterceptor.html":{},"injectables/ZipkinExporterService.html":{}}}],["const",{"_index":88,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryInterceptor.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{}}}],["constructor",{"_index":146,"title":{},"body":{"injectables/JaegerExporterService.html":{},"interceptors/OpenTelemetryInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"injectables/OtelcolExporterService.html":{},"injectables/ZipkinExporterService.html":{}}}],["constructor(@inject(opentelemetryinjectconfig",{"_index":156,"title":{},"body":{"injectables/JaegerExporterService.html":{},"injectables/OtelcolExporterService.html":{},"injectables/ZipkinExporterService.html":{}}}],["constructor(config",{"_index":147,"title":{},"body":{"injectables/JaegerExporterService.html":{},"interceptors/OpenTelemetryInterceptor.html":{},"injectables/OtelcolExporterService.html":{},"injectables/ZipkinExporterService.html":{}}}],["context",{"_index":101,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"interceptors/OpenTelemetryInterceptor.html":{},"coverage.html":{}}}],["contextmanager",{"_index":165,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["coverage",{"_index":334,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["dand",{"_index":439,"title":{},"body":{"index.html":{}}}],["day",{"_index":144,"title":{},"body":{"injectables/JaegerExporterService.html":{},"injectables/ZipkinExporterService.html":{}}}],["declarations",{"_index":294,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{},"overview.html":{}}}],["default",{"_index":71,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"injectables/HttpTextPropagatorService.html":{},"interfaces/IExporter.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryInterceptor.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/SpanExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["define",{"_index":122,"title":{},"body":{"interfaces/IExporter.html":{},"interfaces/IPropagator.html":{}}}],["defined",{"_index":13,"title":{},"body":{"injectables/B3PropagatorService.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"interfaces/IExporter.html":{},"interfaces/IPropagator.html":{},"injectables/JaegerExporterService.html":{},"interceptors/OpenTelemetryInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"injectables/ZipkinExporterService.html":{}}}],["definition",{"_index":97,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{},"injectables/SpanExporterService.html":{}}}],["dependencies",{"_index":350,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":389,"title":{},"body":{"index.html":{}}}],["deps",{"_index":105,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{},"injectables/SpanExporterService.html":{}}}],["description",{"_index":9,"title":{},"body":{"injectables/B3PropagatorService.html":{},"interfaces/CommonCollectorConfig.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"interfaces/IExporter.html":{},"interfaces/IPropagator.html":{},"interfaces/JaegerCollectorConfig.html":{},"injectables/JaegerExporterService.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryInterceptor.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"injectables/ZipkinExporterService.html":{}}}],["display",{"_index":401,"title":{},"body":{"index.html":{}}}],["docker",{"_index":431,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":335,"title":{},"body":{"coverage.html":{}}}],["done",{"_index":460,"title":{},"body":{"todo.html":{}}}],["dynamic",{"_index":361,"title":{},"body":{"dependencies.html":{}}}],["enum",{"_index":59,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"index.html":{}}}],["enumerations",{"_index":378,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":299,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{},"index.html":{}}}],["event",{"_index":244,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["event.status",{"_index":247,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["example",{"_index":398,"title":{},"body":{"index.html":{}}}],["export",{"_index":28,"title":{},"body":{"injectables/B3PropagatorService.html":{},"interfaces/CommonCollectorConfig.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"interfaces/IExporter.html":{},"interfaces/IPropagator.html":{},"interfaces/JaegerCollectorConfig.html":{},"injectables/JaegerExporterService.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"injectables/ZipkinExporterService.html":{},"index.html":{}}}],["exporter",{"_index":121,"title":{},"body":{"interfaces/IExporter.html":{},"injectables/SpanExporterService.html":{},"todo.html":{}}}],["exporter.interface",{"_index":152,"title":{},"body":{"injectables/JaegerExporterService.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"injectables/ZipkinExporterService.html":{}}}],["exporter.service",{"_index":226,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{},"injectables/SpanExporterService.html":{}}}],["exporter.service.ts",{"_index":134,"title":{},"body":{"injectables/JaegerExporterService.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"injectables/ZipkinExporterService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["exporter.service.ts:17",{"_index":330,"title":{},"body":{"injectables/ZipkinExporterService.html":{}}}],["exporter.service.ts:18",{"_index":148,"title":{},"body":{"injectables/JaegerExporterService.html":{}}}],["exporter.service.ts:23",{"_index":310,"title":{},"body":{"injectables/OtelcolExporterService.html":{}}}],["exporter.service.ts:31",{"_index":320,"title":{},"body":{"injectables/SpanExporterService.html":{}}}],["exporter.service.ts:35",{"_index":331,"title":{},"body":{"injectables/ZipkinExporterService.html":{}}}],["exporter.service.ts:37",{"_index":150,"title":{},"body":{"injectables/JaegerExporterService.html":{}}}],["exporter.service.ts:40",{"_index":311,"title":{},"body":{"injectables/OtelcolExporterService.html":{}}}],["exporterconfig",{"_index":155,"title":{},"body":{"injectables/JaegerExporterService.html":{},"injectables/ZipkinExporterService.html":{}}}],["exports",{"_index":296,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{},"overview.html":{}}}],["f",{"_index":434,"title":{},"body":{"index.html":{}}}],["factory",{"_index":94,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{},"injectables/SpanExporterService.html":{},"miscellaneous/functions.html":{}}}],["false",{"_index":402,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/B3PropagatorService.html":{},"interfaces/CommonCollectorConfig.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"interfaces/IExporter.html":{},"interfaces/IPropagator.html":{},"interfaces/JaegerCollectorConfig.html":{},"injectables/JaegerExporterService.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"injectables/ZipkinExporterService.html":{},"coverage.html":{}}}],["finalize",{"_index":223,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["forroot",{"_index":285,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{}}}],["forroot(config",{"_index":286,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{}}}],["function",{"_index":110,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{},"injectables/SpanExporterService.html":{},"coverage.html":{}}}],["functions",{"_index":380,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":440,"title":{},"body":{"index.html":{}}}],["getexporter",{"_index":123,"title":{},"body":{"interfaces/IExporter.html":{},"injectables/JaegerExporterService.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"injectables/ZipkinExporterService.html":{}}}],["getpropagator",{"_index":12,"title":{},"body":{"injectables/B3PropagatorService.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"interfaces/IPropagator.html":{}}}],["getting",{"_index":385,"title":{"index.html":{},"todo.html":{}},"body":{"index.html":{}}}],["gettracer('angular",{"_index":254,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["give",{"_index":125,"title":{},"body":{"interfaces/IExporter.html":{},"interfaces/IPropagator.html":{}}}],["global",{"_index":399,"title":{},"body":{"index.html":{}}}],["graph",{"_index":445,"title":{},"body":{"modules.html":{}}}],["header",{"_index":185,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["here",{"_index":442,"title":{},"body":{"index.html":{},"todo.html":{}}}],["highlight",{"_index":369,"title":{},"body":{"dependencies.html":{}}}],["host",{"_index":75,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"injectables/JaegerExporterService.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"index.html":{}}}],["http",{"_index":100,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{}}}],["http.method",{"_index":259,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["http.url",{"_index":261,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["http://localhost:16686",{"_index":441,"title":{},"body":{"index.html":{}}}],["http://localhost:9090/v1/trace",{"_index":73,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"index.html":{}}}],["http://localhost:9411/api/v2/spans",{"_index":79,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"index.html":{}}}],["http_interceptors",{"_index":291,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{}}}],["httpclientmodule",{"_index":292,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{}}}],["httperrorresponse",{"_index":214,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["httpevent",{"_index":212,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["httphandler",{"_index":201,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["httpinterceptor",{"_index":205,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["httprequest",{"_index":175,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["httpresponse",{"_index":213,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["https://github.com/open",{"_index":405,"title":{},"body":{"index.html":{}}}],["httptextpropagator",{"_index":19,"title":{},"body":{"injectables/B3PropagatorService.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"interfaces/IPropagator.html":{}}}],["httptextpropagatorservice",{"_index":90,"title":{"injectables/HttpTextPropagatorService.html":{}},"body":{"injectables/HttpTextPropagatorService.html":{},"interceptors/OpenTelemetryInterceptor.html":{},"coverage.html":{}}}],["httptextpropagatorservicefactory",{"_index":104,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["httptextpropagatorservicefactory(config",{"_index":383,"title":{},"body":{"miscellaneous/functions.html":{}}}],["httptrace",{"_index":64,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["httptracecontext",{"_index":65,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["httptracecontextpropagatorservice",{"_index":99,"title":{"injectables/HttpTraceContextPropagatorService.html":{}},"body":{"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["identifier",{"_index":336,"title":{},"body":{"coverage.html":{}}}],["iexporter",{"_index":119,"title":{"interfaces/IExporter.html":{}},"body":{"interfaces/IExporter.html":{},"injectables/JaegerExporterService.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"injectables/ZipkinExporterService.html":{},"coverage.html":{}}}],["implementation",{"_index":131,"title":{},"body":{"interfaces/IPropagator.html":{}}}],["implements",{"_index":30,"title":{},"body":{"injectables/B3PropagatorService.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"injectables/JaegerExporterService.html":{},"interceptors/OpenTelemetryInterceptor.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"injectables/ZipkinExporterService.html":{}}}],["import",{"_index":20,"title":{},"body":{"injectables/B3PropagatorService.html":{},"interfaces/CommonCollectorConfig.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"interfaces/IExporter.html":{},"interfaces/IPropagator.html":{},"interfaces/JaegerCollectorConfig.html":{},"injectables/JaegerExporterService.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"injectables/ZipkinExporterService.html":{}}}],["imports",{"_index":295,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"injectables/B3PropagatorService.html":{},"interfaces/CommonCollectorConfig.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"interfaces/IExporter.html":{},"interfaces/IPropagator.html":{},"interfaces/JaegerCollectorConfig.html":{},"injectables/JaegerExporterService.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryInterceptor.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"injectables/ZipkinExporterService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/B3PropagatorService.html":{},"interfaces/CommonCollectorConfig.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"interfaces/IExporter.html":{},"interfaces/IPropagator.html":{},"interfaces/JaegerCollectorConfig.html":{},"injectables/JaegerExporterService.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"injectables/ZipkinExporterService.html":{},"index.html":{}}}],["initialise",{"_index":177,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["initspan",{"_index":167,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["initspan(request",{"_index":174,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["inject",{"_index":151,"title":{},"body":{"injectables/JaegerExporterService.html":{},"interceptors/OpenTelemetryInterceptor.html":{},"injectables/OtelcolExporterService.html":{},"injectables/ZipkinExporterService.html":{}}}],["inject(httptextpropagatorservice",{"_index":230,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["inject(opentelemetryinjectconfig",{"_index":228,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["inject(spanexporterservice",{"_index":229,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["injectable",{"_index":0,"title":{"injectables/B3PropagatorService.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"injectables/JaegerExporterService.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"injectables/ZipkinExporterService.html":{}},"body":{"injectables/B3PropagatorService.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"injectables/JaegerExporterService.html":{},"interceptors/OpenTelemetryInterceptor.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"injectables/ZipkinExporterService.html":{},"coverage.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/B3PropagatorService.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"injectables/JaegerExporterService.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"injectables/ZipkinExporterService.html":{},"overview.html":{}}}],["injectcontextandheader",{"_index":168,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["injectcontextandheader(span",{"_index":182,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["injected",{"_index":93,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{}}}],["injection",{"_index":87,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"miscellaneous/variables.html":{}}}],["injectiontoken",{"_index":58,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{}}}],["injectiontoken('opentelemetry.config",{"_index":89,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"miscellaneous/variables.html":{}}}],["inmplementation",{"_index":126,"title":{},"body":{"interfaces/IExporter.html":{}}}],["insert",{"_index":190,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["insertconsolespanexporter",{"_index":169,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["insertconsolespanexporter(console",{"_index":188,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["insertspanprocessorproductionmode",{"_index":170,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["insertspanprocessorproductionmode(production",{"_index":193,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["installation",{"_index":390,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":245,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["intercept",{"_index":171,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["intercept(request",{"_index":199,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["intercepted",{"_index":180,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["interceptor",{"_index":161,"title":{"interceptors/OpenTelemetryInterceptor.html":{}},"body":{"interceptors/OpenTelemetryInterceptor.html":{},"coverage.html":{},"index.html":{},"todo.html":{}}}],["interceptor.module.ts",{"_index":283,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{}}}],["interceptor.module.ts:30",{"_index":287,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{}}}],["interceptor/opentelemetry.interceptor",{"_index":293,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{}}}],["interceptor/src/lib/configuration/opentelemetry",{"_index":38,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["interceptor/src/lib/interceptor/opentelemetry.interceptor.ts",{"_index":164,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{},"coverage.html":{}}}],["interceptor/src/lib/interceptor/opentelemetry.interceptor.ts:109",{"_index":176,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["interceptor/src/lib/interceptor/opentelemetry.interceptor.ts:134",{"_index":183,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["interceptor/src/lib/interceptor/opentelemetry.interceptor.ts:156",{"_index":189,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["interceptor/src/lib/interceptor/opentelemetry.interceptor.ts:170",{"_index":194,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["interceptor/src/lib/interceptor/opentelemetry.interceptor.ts:39",{"_index":211,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["interceptor/src/lib/interceptor/opentelemetry.interceptor.ts:43",{"_index":173,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["interceptor/src/lib/interceptor/opentelemetry.interceptor.ts:78",{"_index":202,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["interceptor/src/lib/opentelemetry",{"_index":282,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{}}}],["interceptor/src/lib/services/exporter/exporter.interface.ts",{"_index":120,"title":{},"body":{"interfaces/IExporter.html":{},"coverage.html":{}}}],["interceptor/src/lib/services/exporter/exporter.interface.ts:11",{"_index":124,"title":{},"body":{"interfaces/IExporter.html":{}}}],["interceptor/src/lib/services/exporter/jaeger",{"_index":133,"title":{},"body":{"injectables/JaegerExporterService.html":{},"coverage.html":{}}}],["interceptor/src/lib/services/exporter/otelcol",{"_index":309,"title":{},"body":{"injectables/OtelcolExporterService.html":{},"coverage.html":{}}}],["interceptor/src/lib/services/exporter/span",{"_index":318,"title":{},"body":{"injectables/SpanExporterService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["interceptor/src/lib/services/exporter/zipkin",{"_index":328,"title":{},"body":{"injectables/ZipkinExporterService.html":{},"coverage.html":{}}}],["interceptor/src/lib/services/propagator/b3",{"_index":7,"title":{},"body":{"injectables/B3PropagatorService.html":{},"coverage.html":{}}}],["interceptor/src/lib/services/propagator/http",{"_index":91,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["interceptor/src/lib/services/propagator/propagator.interface.ts",{"_index":129,"title":{},"body":{"interfaces/IPropagator.html":{},"coverage.html":{}}}],["interceptor/src/lib/services/propagator/propagator.interface.ts:11",{"_index":130,"title":{},"body":{"interfaces/IPropagator.html":{}}}],["interceptorconfiguration",{"_index":396,"title":{},"body":{"index.html":{}}}],["interceptors",{"_index":163,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["interceptorwith",{"_index":393,"title":{},"body":{"index.html":{}}}],["interface",{"_index":35,"title":{"interfaces/CommonCollectorConfig.html":{},"interfaces/IExporter.html":{},"interfaces/IPropagator.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{}},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/IExporter.html":{},"interfaces/IPropagator.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"coverage.html":{},"index.html":{}}}],["interfaces",{"_index":37,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/IExporter.html":{},"interfaces/IPropagator.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"overview.html":{}}}],["ipropagator",{"_index":22,"title":{"interfaces/IPropagator.html":{}},"body":{"injectables/B3PropagatorService.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"interfaces/IPropagator.html":{},"coverage.html":{}}}],["isn't",{"_index":136,"title":{},"body":{"injectables/JaegerExporterService.html":{},"injectables/ZipkinExporterService.html":{}}}],["it's",{"_index":141,"title":{},"body":{"injectables/JaegerExporterService.html":{},"injectables/ZipkinExporterService.html":{},"index.html":{},"todo.html":{}}}],["jaeger",{"_index":60,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/SpanExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"todo.html":{}}}],["jaeger's",{"_index":412,"title":{},"body":{"index.html":{}}}],["jaegercollectorconfig",{"_index":74,"title":{"interfaces/JaegerCollectorConfig.html":{}},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"coverage.html":{},"index.html":{}}}],["jaegerconfig",{"_index":82,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"index.html":{}}}],["jaegerexporter",{"_index":135,"title":{},"body":{"injectables/JaegerExporterService.html":{}}}],["jaegerexporterservice",{"_index":132,"title":{"injectables/JaegerExporterService.html":{}},"body":{"injectables/JaegerExporterService.html":{},"injectables/SpanExporterService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["js",{"_index":370,"title":{},"body":{"dependencies.html":{}}}],["js/tree/master/packages/opentelemetry",{"_index":407,"title":{},"body":{"index.html":{}}}],["json.stringify(event.body",{"_index":250,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["json.stringify(event.error",{"_index":252,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["jufab/opentelemetry",{"_index":387,"title":{},"body":{"index.html":{}}}],["key",{"_index":268,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["legend",{"_index":449,"title":{},"body":{"overview.html":{}}}],["library",{"_index":388,"title":{},"body":{"index.html":{}}}],["loaded",{"_index":301,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{}}}],["localhost",{"_index":411,"title":{},"body":{"index.html":{}}}],["manager",{"_index":209,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["matching",{"_index":33,"title":{},"body":{"injectables/B3PropagatorService.html":{},"interfaces/CommonCollectorConfig.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"interfaces/IExporter.html":{},"interfaces/IPropagator.html":{},"interfaces/JaegerCollectorConfig.html":{},"injectables/JaegerExporterService.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"injectables/ZipkinExporterService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["method",{"_index":204,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["methods",{"_index":11,"title":{},"body":{"injectables/B3PropagatorService.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"interfaces/IExporter.html":{},"interfaces/IPropagator.html":{},"injectables/JaegerExporterService.html":{},"interceptors/OpenTelemetryInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"injectables/ZipkinExporterService.html":{}}}],["miscellaneous",{"_index":377,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":196,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["module",{"_index":279,"title":{"modules/OpenTelemetryInterceptorModule.html":{}},"body":{"overview.html":{}}}],["modules",{"_index":281,"title":{"modules.html":{}},"body":{"modules/OpenTelemetryInterceptorModule.html":{},"modules.html":{}}}],["modulewithproviders",{"_index":288,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{}}}],["moment",{"_index":138,"title":{},"body":{"injectables/JaegerExporterService.html":{},"injectables/ZipkinExporterService.html":{}}}],["more",{"_index":404,"title":{},"body":{"index.html":{},"todo.html":{}}}],["multi",{"_index":307,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{}}}],["name",{"_index":56,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"injectables/JaegerExporterService.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/OtelcolExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"injectables/ZipkinExporterService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["new",{"_index":31,"title":{},"body":{"injectables/B3PropagatorService.html":{},"interfaces/CommonCollectorConfig.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"interfaces/JaegerCollectorConfig.html":{},"injectables/JaegerExporterService.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/OtelcolExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"injectables/ZipkinExporterService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":200,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["next.handle(tracedreq).pipe",{"_index":243,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["ng",{"_index":395,"title":{},"body":{"index.html":{}}}],["ngmodule",{"_index":289,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{}}}],["ngx",{"_index":368,"title":{},"body":{"dependencies.html":{}}}],["note",{"_index":443,"title":{},"body":{"index.html":{}}}],["npm",{"_index":391,"title":{},"body":{"index.html":{}}}],["null",{"_index":111,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{},"interceptors/OpenTelemetryInterceptor.html":{},"injectables/SpanExporterService.html":{}}}],["number",{"_index":77,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{}}}],["observable",{"_index":207,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["one",{"_index":143,"title":{},"body":{"injectables/JaegerExporterService.html":{},"injectables/ZipkinExporterService.html":{}}}],["opentelemetry",{"_index":68,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"index.html":{},"todo.html":{}}}],["opentelemetry/api",{"_index":24,"title":{},"body":{"injectables/B3PropagatorService.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"interfaces/IPropagator.html":{},"interceptors/OpenTelemetryInterceptor.html":{}}}],["opentelemetry/core",{"_index":25,"title":{},"body":{"injectables/B3PropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"interceptors/OpenTelemetryInterceptor.html":{}}}],["opentelemetry/exporter",{"_index":314,"title":{},"body":{"injectables/OtelcolExporterService.html":{},"dependencies.html":{}}}],["opentelemetry/tracing",{"_index":128,"title":{},"body":{"interfaces/IExporter.html":{},"injectables/JaegerExporterService.html":{},"interceptors/OpenTelemetryInterceptor.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"injectables/ZipkinExporterService.html":{}}}],["opentelemetry/web",{"_index":218,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{},"dependencies.html":{}}}],["opentelemetryconfig",{"_index":80,"title":{"interfaces/OpenTelemetryConfig.html":{}},"body":{"interfaces/CommonCollectorConfig.html":{},"injectables/HttpTextPropagatorService.html":{},"interfaces/JaegerCollectorConfig.html":{},"injectables/JaegerExporterService.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"injectables/ZipkinExporterService.html":{},"coverage.html":{},"index.html":{}}}],["opentelemetryinjectconfig",{"_index":85,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"injectables/HttpTextPropagatorService.html":{},"interfaces/JaegerCollectorConfig.html":{},"injectables/JaegerExporterService.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"injectables/ZipkinExporterService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["opentelemetryinterceptor",{"_index":162,"title":{"interceptors/OpenTelemetryInterceptor.html":{}},"body":{"interceptors/OpenTelemetryInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"coverage.html":{}}}],["opentelemetryinterceptormodule",{"_index":280,"title":{"modules/OpenTelemetryInterceptorModule.html":{}},"body":{"modules/OpenTelemetryInterceptorModule.html":{},"modules.html":{}}}],["opentelemtery",{"_index":427,"title":{},"body":{"index.html":{}}}],["operationnal",{"_index":137,"title":{},"body":{"injectables/JaegerExporterService.html":{},"injectables/ZipkinExporterService.html":{}}}],["optional",{"_index":44,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"injectables/JaegerExporterService.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/OtelcolExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"injectables/ZipkinExporterService.html":{},"miscellaneous/functions.html":{}}}],["original",{"_index":187,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["otelcol",{"_index":62,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/SpanExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"miscellaneous/enumerations.html":{}}}],["otelcol,zipkin,jaeger",{"_index":420,"title":{},"body":{"index.html":{}}}],["otelcolconfig",{"_index":84,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/OtelcolExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"index.html":{}}}],["otelcolexporterservice",{"_index":308,"title":{"injectables/OtelcolExporterService.html":{}},"body":{"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["otelcollectorconfig",{"_index":69,"title":{"interfaces/OtelCollectorConfig.html":{}},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"coverage.html":{},"index.html":{}}}],["otherwise",{"_index":198,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["out",{"_index":453,"title":{},"body":{"overview.html":{}}}],["overide",{"_index":203,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["overview",{"_index":448,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":392,"title":{},"body":{"index.html":{}}}],["package",{"_index":349,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":109,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{},"injectables/JaegerExporterService.html":{},"interceptors/OpenTelemetryInterceptor.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"injectables/ZipkinExporterService.html":{}}}],["parameters",{"_index":149,"title":{},"body":{"injectables/JaegerExporterService.html":{},"interceptors/OpenTelemetryInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"injectables/OtelcolExporterService.html":{},"injectables/ZipkinExporterService.html":{},"miscellaneous/functions.html":{}}}],["parentmodule",{"_index":297,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{}}}],["parser",{"_index":364,"title":{},"body":{"dependencies.html":{}}}],["port",{"_index":76,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"injectables/JaegerExporterService.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"index.html":{}}}],["present",{"_index":142,"title":{},"body":{"injectables/JaegerExporterService.html":{},"injectables/ZipkinExporterService.html":{}}}],["private",{"_index":153,"title":{},"body":{"injectables/JaegerExporterService.html":{},"interceptors/OpenTelemetryInterceptor.html":{},"injectables/OtelcolExporterService.html":{},"injectables/ZipkinExporterService.html":{}}}],["production",{"_index":46,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryInterceptor.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"index.html":{}}}],["production?:boolean",{"_index":67,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{}}}],["progress",{"_index":459,"title":{},"body":{"todo.html":{}}}],["project",{"_index":433,"title":{},"body":{"index.html":{},"todo.html":{}}}],["projects/.../http",{"_index":381,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../opentelemetry",{"_index":379,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["projects/.../span",{"_index":382,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/example",{"_index":435,"title":{},"body":{"index.html":{}}}],["projects/opentelemetry",{"_index":6,"title":{},"body":{"injectables/B3PropagatorService.html":{},"interfaces/CommonCollectorConfig.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"interfaces/IExporter.html":{},"interfaces/IPropagator.html":{},"interfaces/JaegerCollectorConfig.html":{},"injectables/JaegerExporterService.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"injectables/ZipkinExporterService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["propagator",{"_index":47,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"injectables/HttpTextPropagatorService.html":{},"interfaces/IPropagator.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryInterceptor.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"todo.html":{}}}],["propagator.b3",{"_index":115,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{},"index.html":{}}}],["propagator.httptrace",{"_index":117,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{}}}],["propagator.interface",{"_index":23,"title":{},"body":{"injectables/B3PropagatorService.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{}}}],["propagator.service",{"_index":102,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{},"interceptors/OpenTelemetryInterceptor.html":{}}}],["propagator.service.ts",{"_index":8,"title":{},"body":{"injectables/B3PropagatorService.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["propagator.service.ts:17",{"_index":14,"title":{},"body":{"injectables/B3PropagatorService.html":{}}}],["propagator.service.ts:18",{"_index":118,"title":{},"body":{"injectables/HttpTraceContextPropagatorService.html":{}}}],["propagator.service.ts:30",{"_index":95,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{}}}],["properties",{"_index":42,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryInterceptor.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/OtelcolExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{}}}],["provide",{"_index":108,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"miscellaneous/functions.html":{}}}],["providedin",{"_index":26,"title":{},"body":{"injectables/B3PropagatorService.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"injectables/JaegerExporterService.html":{},"interceptors/OpenTelemetryInterceptor.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"injectables/ZipkinExporterService.html":{}}}],["providers",{"_index":304,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{},"overview.html":{}}}],["public",{"_index":303,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{}}}],["recommend",{"_index":419,"title":{},"body":{"index.html":{}}}],["request",{"_index":179,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["request.clone",{"_index":272,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["request.headers.get(key",{"_index":271,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["request.headers.keys",{"_index":269,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["request.method",{"_index":260,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["request.url",{"_index":257,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["request.urlwithparams",{"_index":262,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["reset",{"_index":452,"title":{},"body":{"overview.html":{}}}],["result",{"_index":32,"title":{},"body":{"injectables/B3PropagatorService.html":{},"interfaces/CommonCollectorConfig.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"interfaces/IExporter.html":{},"interfaces/IPropagator.html":{},"interfaces/JaegerCollectorConfig.html":{},"injectables/JaegerExporterService.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"injectables/ZipkinExporterService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":34,"title":{},"body":{"injectables/B3PropagatorService.html":{},"interfaces/CommonCollectorConfig.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"interfaces/IExporter.html":{},"interfaces/IPropagator.html":{},"interfaces/JaegerCollectorConfig.html":{},"injectables/JaegerExporterService.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"injectables/ZipkinExporterService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":15,"title":{},"body":{"injectables/B3PropagatorService.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"interfaces/IExporter.html":{},"interfaces/IPropagator.html":{},"injectables/JaegerExporterService.html":{},"interceptors/OpenTelemetryInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"injectables/ZipkinExporterService.html":{},"miscellaneous/functions.html":{}}}],["returns",{"_index":17,"title":{},"body":{"injectables/B3PropagatorService.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"interfaces/IExporter.html":{},"interfaces/IPropagator.html":{},"injectables/JaegerExporterService.html":{},"interceptors/OpenTelemetryInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"injectables/ZipkinExporterService.html":{}}}],["root",{"_index":27,"title":{},"body":{"injectables/B3PropagatorService.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"injectables/JaegerExporterService.html":{},"interceptors/OpenTelemetryInterceptor.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"injectables/ZipkinExporterService.html":{}}}],["run",{"_index":422,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":216,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":224,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["sampler",{"_index":232,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{},"todo.html":{}}}],["see",{"_index":429,"title":{},"body":{"index.html":{},"todo.html":{}}}],["send",{"_index":403,"title":{},"body":{"index.html":{}}}],["service",{"_index":57,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"injectables/HttpTextPropagatorService.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/SpanExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["servicename",{"_index":48,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"injectables/JaegerExporterService.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/OtelcolExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"injectables/ZipkinExporterService.html":{},"index.html":{}}}],["services/exporter/span",{"_index":225,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["services/propagator/http",{"_index":227,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["setactivespan",{"_index":221,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["setheaders",{"_index":273,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["simplespanexporter(sync",{"_index":54,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{}}}],["simplespanprocessor",{"_index":197,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{},"index.html":{}}}],["simplespanprocessor(new",{"_index":275,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["simplespanprocessor(spanexporter",{"_index":277,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["skipself",{"_index":290,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/B3PropagatorService.html":{},"interfaces/CommonCollectorConfig.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"interfaces/IExporter.html":{},"interfaces/IPropagator.html":{},"interfaces/JaegerCollectorConfig.html":{},"injectables/JaegerExporterService.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"injectables/ZipkinExporterService.html":{}}}],["span",{"_index":178,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["span.addevent('error",{"_index":251,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["span.addevent('response",{"_index":248,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["span.end",{"_index":253,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["span.setattribute('http.status_code",{"_index":246,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["spanexporter",{"_index":127,"title":{},"body":{"interfaces/IExporter.html":{},"injectables/JaegerExporterService.html":{},"interceptors/OpenTelemetryInterceptor.html":{},"injectables/OtelcolExporterService.html":{},"injectables/SpanExporterService.html":{},"injectables/ZipkinExporterService.html":{}}}],["spanexporterservice",{"_index":172,"title":{"injectables/SpanExporterService.html":{}},"body":{"interceptors/OpenTelemetryInterceptor.html":{},"injectables/SpanExporterService.html":{},"coverage.html":{}}}],["spanexporterservicefactory",{"_index":322,"title":{},"body":{"injectables/SpanExporterService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["spanexporterservicefactory(config",{"_index":384,"title":{},"body":{"miscellaneous/functions.html":{}}}],["spanprocessor",{"_index":219,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["specified",{"_index":409,"title":{},"body":{"index.html":{}}}],["stackcontextmanager",{"_index":208,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["start",{"_index":423,"title":{},"body":{"index.html":{}}}],["start:complete",{"_index":425,"title":{},"body":{"index.html":{}}}],["started",{"_index":386,"title":{"index.html":{},"todo.html":{}},"body":{"index.html":{}}}],["startspan",{"_index":256,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["statements",{"_index":337,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":284,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{}}}],["string",{"_index":55,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"index.html":{}}}],["switch",{"_index":112,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{},"injectables/SpanExporterService.html":{}}}],["sync",{"_index":418,"title":{},"body":{"index.html":{}}}],["table",{"_index":348,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":347,"title":{},"body":{"coverage.html":{}}}],["tap",{"_index":222,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["task",{"_index":457,"title":{},"body":{"todo.html":{}}}],["telemetry/opentelemetry",{"_index":406,"title":{},"body":{"index.html":{}}}],["text",{"_index":92,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{},"interceptors/OpenTelemetryInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["there's",{"_index":430,"title":{},"body":{"index.html":{}}}],["this.config.commonconfig.production",{"_index":234,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["this.configjaeger",{"_index":157,"title":{},"body":{"injectables/JaegerExporterService.html":{}}}],["this.contextmanager",{"_index":239,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["this.contextmanager._currentcontext",{"_index":264,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["this.contextmanager.active",{"_index":263,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["this.httptextpropagatorservice.getpropagator",{"_index":238,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["this.initspan(request",{"_index":240,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["this.injectcontextandheader(span",{"_index":242,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["this.insertconsolespanexporter(this.config.commonconfig.console",{"_index":236,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["this.insertspanprocessorproductionmode",{"_index":233,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["this.otelcolconfig",{"_index":315,"title":{},"body":{"injectables/OtelcolExporterService.html":{}}}],["this.spanexporterservice.getexporter",{"_index":235,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["this.tracer",{"_index":231,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["this.tracer.addspanprocessor",{"_index":274,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["this.tracer.addspanprocessor(spanprocessor",{"_index":278,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["this.tracer.register",{"_index":237,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["this.zipkinconfig",{"_index":332,"title":{},"body":{"injectables/ZipkinExporterService.html":{}}}],["throw",{"_index":298,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{}}}],["todo",{"_index":456,"title":{"todo.html":{}},"body":{"todo.html":{}}}],["trace",{"_index":51,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"injectables/HttpTextPropagatorService.html":{},"injectables/HttpTraceContextPropagatorService.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"coverage.html":{},"index.html":{}}}],["tracedreq",{"_index":241,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["tracer",{"_index":166,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{},"index.html":{}}}],["true",{"_index":191,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"index.html":{}}}],["tslib",{"_index":373,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":49,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"injectables/JaegerExporterService.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryInterceptor.html":{},"modules/OpenTelemetryInterceptorModule.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/OtelcolExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"injectables/ZipkinExporterService.html":{},"coverage.html":{}}}],["undefined",{"_index":107,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{},"injectables/SpanExporterService.html":{}}}],["up",{"_index":438,"title":{},"body":{"index.html":{}}}],["url",{"_index":70,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/OtelcolExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"injectables/ZipkinExporterService.html":{},"index.html":{}}}],["use",{"_index":52,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"index.html":{}}}],["useclass",{"_index":306,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{}}}],["used",{"_index":96,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{},"injectables/SpanExporterService.html":{}}}],["usefactory",{"_index":103,"title":{},"body":{"injectables/HttpTextPropagatorService.html":{},"injectables/SpanExporterService.html":{}}}],["usevalue",{"_index":305,"title":{},"body":{"modules/OpenTelemetryInterceptorModule.html":{}}}],["value",{"_index":72,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interceptors/OpenTelemetryInterceptor.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":343,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":461,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["via",{"_index":416,"title":{},"body":{"index.html":{}}}],["void",{"_index":192,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["want",{"_index":428,"title":{},"body":{"index.html":{}}}],["web",{"_index":139,"title":{},"body":{"injectables/JaegerExporterService.html":{},"injectables/ZipkinExporterService.html":{}}}],["webtracerprovider",{"_index":210,"title":{},"body":{"interceptors/OpenTelemetryInterceptor.html":{}}}],["without",{"_index":444,"title":{},"body":{"index.html":{}}}],["zipkin",{"_index":61,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"injectables/SpanExporterService.html":{},"interfaces/ZipkinCollectorConfig.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"todo.html":{}}}],["zipkincollectorconfig",{"_index":78,"title":{"interfaces/ZipkinCollectorConfig.html":{}},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"coverage.html":{},"index.html":{}}}],["zipkinconfig",{"_index":83,"title":{},"body":{"interfaces/CommonCollectorConfig.html":{},"interfaces/JaegerCollectorConfig.html":{},"interfaces/OpenTelemetryConfig.html":{},"interfaces/OtelCollectorConfig.html":{},"interfaces/ZipkinCollectorConfig.html":{},"injectables/ZipkinExporterService.html":{},"index.html":{}}}],["zipkinexporter",{"_index":329,"title":{},"body":{"injectables/ZipkinExporterService.html":{}}}],["zipkinexporterservice",{"_index":321,"title":{"injectables/ZipkinExporterService.html":{}},"body":{"injectables/SpanExporterService.html":{},"injectables/ZipkinExporterService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["zone.js",{"_index":375,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":451,"title":{},"body":{"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/B3PropagatorService.html":{"url":"injectables/B3PropagatorService.html","title":"injectable - B3PropagatorService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  B3PropagatorService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/services/propagator/b3-propagator.service.ts\n        \n\n            \n                Description\n            \n            \n                B3PropagatorService\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getPropagator\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getPropagator\n                        \n                        \n                    \n                \n            \n            \n                \ngetPropagator()\n                \n            \n\n\n            \n                \n                    Defined in projects/opentelemetry-interceptor/src/lib/services/propagator/b3-propagator.service.ts:17\n                \n            \n\n\n            \n                \n                    Return an B3Propagator\n\n\n                    \n                    \n                    \n                        Returns :         HttpTextPropagator\n\n                    \n                    \n                        HttpTextPropagator as B3Propagator\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { IPropagator } from './propagator.interface';\nimport { HttpTextPropagator } from '@opentelemetry/api';\nimport { B3Propagator } from '@opentelemetry/core';\n\n/**\n * B3PropagatorService\n */\n@Injectable({\n  providedIn: \"root\",\n})\nexport class B3PropagatorService implements IPropagator {\n  /**\n   * Return an B3Propagator\n   * @return HttpTextPropagator as B3Propagator\n   */\n  getPropagator(): HttpTextPropagator {\n    return new B3Propagator();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CommonCollectorConfig.html":{"url":"interfaces/CommonCollectorConfig.html","title":"interface - CommonCollectorConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CommonCollectorConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/configuration/opentelemetry-config.ts\n        \n\n            \n                Description\n            \n            \n                Common configuration\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        collector\n                                \n                                \n                                            Optional\n                                        console\n                                \n                                \n                                            Optional\n                                        production\n                                \n                                \n                                        propagator\n                                \n                                \n                                        serviceName\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        collector\n                                    \n                                \n                                \n                                    \n                                        collector:         Collector\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Collector\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    collector \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        console\n                                    \n                                \n                                \n                                    \n                                        console:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    console : boolean to trace in console \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        production\n                                    \n                                \n                                \n                                    \n                                        production:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    production : boolean to use a BatchSpanExporter(async) or SimpleSpanExporter(sync) \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        propagator\n                                    \n                                \n                                \n                                    \n                                        propagator:         Propagator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Propagator\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    propagator \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        serviceName\n                                    \n                                \n                                \n                                    \n                                        serviceName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    serviceName : Name of service in trace \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { InjectionToken } from '@angular/core';\n\nexport enum Collector {\n  jaeger = 'jaeger',\n  zipkin = 'zipkin',\n  otelcol = 'otelcol',\n}\n\nexport enum Propagator {\n  b3 = 'B3Propagator',\n  httpTrace = 'HttpTraceContext',\n}\n\n/**\n * Common configuration\n */\nexport interface CommonCollectorConfig {\n  /** serviceName : Name of service in trace */\n  serviceName: string;\n  /** console : boolean to trace in console */\n  console?:boolean;\n  /** production : boolean to use a BatchSpanExporter(async) or SimpleSpanExporter(sync) */\n  production?:boolean;\n  /** collector */\n  collector: Collector;\n  /** propagator */\n  propagator: Propagator;\n}\n\n\n/**\n * OpenTelemetry Collector configuration\n */\nexport interface OtelCollectorConfig {\n  /**\n   * An url (Default value: http://localhost:9090/v1/trace)\n   */\n  url?: string;\n}\n\n/**\n * Jaeger Collector configuration\n */\nexport interface JaegerCollectorConfig {\n  /** host */\n  host?: string;\n  /** port */\n  port?: number;\n}\n\n/**\n * Configuration for Zipkin\n */\nexport interface ZipkinCollectorConfig {\n  /**\n   * An url (Default value: http://localhost:9411/api/v2/spans)\n   */\n  url?: string;\n}\n/**\n * OpenTelemetryConfig\n */\nexport interface OpenTelemetryConfig {\n  /** commonConfig */\n  commonConfig: CommonCollectorConfig;\n  /** jaegerConfig */\n  jaegerConfig?: JaegerCollectorConfig;\n  /** zipkinConfig */\n  zipkinConfig?: ZipkinCollectorConfig;\n  /** otelcolConfig */\n  otelcolConfig?: OtelCollectorConfig;\n}\n\n/** OpenTelemetryInjectConfig : Config injection */\nexport const OpenTelemetryInjectConfig = new InjectionToken('opentelemetry.config');\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HttpTextPropagatorService.html":{"url":"injectables/HttpTextPropagatorService.html","title":"injectable - HttpTextPropagatorService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  HttpTextPropagatorService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/services/propagator/http-text-propagator.service.ts\n        \n\n            \n                Description\n            \n            \n                HttpTextPropagatorService\nInjected service with factory to get a propagator by configuration\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getPropagator\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getPropagator\n                        \n                        \n                    \n                \n            \n            \n                \ngetPropagator()\n                \n            \n\n\n            \n                \n                    Defined in projects/opentelemetry-interceptor/src/lib/services/propagator/http-text-propagator.service.ts:30\n                \n            \n\n\n            \n                \n                    Not used in a factory, just a definition\n\n\n                    \n                        Returns :         HttpTextPropagator\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { IPropagator } from './propagator.interface';\nimport { HttpTextPropagator } from '@opentelemetry/api';\nimport { Injectable } from '@angular/core';\nimport {\n  OpenTelemetryConfig,\n  Propagator,\n  OpenTelemetryInjectConfig,\n} from '../../configuration/opentelemetry-config';\nimport { HttpTraceContextPropagatorService } from './http-trace-context-propagator.service';\nimport { B3PropagatorService } from './b3-propagator.service';\n\n\n/**\n * HttpTextPropagatorService\n * Injected service with factory to get a propagator by configuration\n */\n@Injectable({\n  providedIn: 'root',\n  useFactory: httpTextPropagatorServiceFactory,\n  deps: [\n    OpenTelemetryInjectConfig,\n    HttpTraceContextPropagatorService,\n    B3PropagatorService,\n  ],\n})\nexport class HttpTextPropagatorService implements IPropagator {\n  /**\n   * Not used in a factory, just a definition\n   */\n  getPropagator(): HttpTextPropagator {\n    //factory\n    console.error('error');\n    return undefined;\n  }\n}\n\n/**\n * httpTextPropagatorServiceFactory\n * Provide a factory to have a propagator service\n * @param config\n * @param httpTraceContextPropagatorService\n * @param b3PropagatorService\n */\nexport function httpTextPropagatorServiceFactory(\n  config: OpenTelemetryConfig,\n  httpTraceContextPropagatorService: HttpTraceContextPropagatorService,\n  b3PropagatorService: B3PropagatorService\n) {\n  let propagator: IPropagator = null;\n  switch (config.commonConfig.propagator) {\n    case Propagator.b3:\n      propagator = b3PropagatorService;\n      break;\n    case Propagator.httpTrace:\n      propagator = httpTraceContextPropagatorService;\n      break;\n    default:\n      break;\n  }\n  return propagator;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HttpTraceContextPropagatorService.html":{"url":"injectables/HttpTraceContextPropagatorService.html","title":"injectable - HttpTraceContextPropagatorService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  HttpTraceContextPropagatorService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/services/propagator/http-trace-context-propagator.service.ts\n        \n\n            \n                Description\n            \n            \n                HttpTraceContextPropagatorService\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getPropagator\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getPropagator\n                        \n                        \n                    \n                \n            \n            \n                \ngetPropagator()\n                \n            \n\n\n            \n                \n                    Defined in projects/opentelemetry-interceptor/src/lib/services/propagator/http-trace-context-propagator.service.ts:18\n                \n            \n\n\n            \n                \n                    Return an HttpTraceContext\n\n\n                    \n                    \n                    \n                        Returns :         HttpTextPropagator\n\n                    \n                    \n                        HttpTextPropagator as HttpTraceContext\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { IPropagator } from './propagator.interface';\nimport { HttpTextPropagator } from '@opentelemetry/api';\nimport { HttpTraceContext } from '@opentelemetry/core';\n\n\n/**\n * HttpTraceContextPropagatorService\n */\n@Injectable({\n  providedIn: \"root\",\n})\nexport class HttpTraceContextPropagatorService implements IPropagator {\n  /**\n   * Return an HttpTraceContext\n   * @return HttpTextPropagator as HttpTraceContext\n   */\n  getPropagator(): HttpTextPropagator {\n    return new HttpTraceContext();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IExporter.html":{"url":"interfaces/IExporter.html","title":"interface - IExporter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IExporter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/services/exporter/exporter.interface.ts\n        \n\n            \n                Description\n            \n            \n                Exporter interface to define a default exporter\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getExporter\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getExporter\n                        \n                        \n                    \n                \n            \n            \n                \ngetExporter()\n                \n            \n\n\n            \n                \n                    Defined in projects/opentelemetry-interceptor/src/lib/services/exporter/exporter.interface.ts:11\n                \n            \n\n\n            \n                \n                    give an inmplementation of SpanExporter\n\n\n                    \n                    \n                    \n                        Returns :     SpanExporter\n\n                    \n                    \n                        SpanExporter\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { SpanExporter } from '@opentelemetry/tracing';\n\n/**\n * Exporter interface to define a default exporter\n */\nexport interface IExporter {\n  /**\n   * give an inmplementation of SpanExporter\n   * @return SpanExporter\n   */\n  getExporter(): SpanExporter;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPropagator.html":{"url":"interfaces/IPropagator.html","title":"interface - IPropagator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IPropagator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/services/propagator/propagator.interface.ts\n        \n\n            \n                Description\n            \n            \n                Interface to define propagator\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getPropagator\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getPropagator\n                        \n                        \n                    \n                \n            \n            \n                \ngetPropagator()\n                \n            \n\n\n            \n                \n                    Defined in projects/opentelemetry-interceptor/src/lib/services/propagator/propagator.interface.ts:11\n                \n            \n\n\n            \n                \n                    give an implementation of a propagator\n\n\n                    \n                    \n                    \n                        Returns :         HttpTextPropagator\n\n                    \n                    \n                        HttpTextPropagator\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpTextPropagator } from '@opentelemetry/api';\n\n/**\n * Interface to define propagator\n */\nexport interface IPropagator {\n  /**\n   * give an implementation of a propagator\n   * @return HttpTextPropagator\n   */\n  getPropagator(): HttpTextPropagator;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JaegerCollectorConfig.html":{"url":"interfaces/JaegerCollectorConfig.html","title":"interface - JaegerCollectorConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  JaegerCollectorConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/configuration/opentelemetry-config.ts\n        \n\n            \n                Description\n            \n            \n                Jaeger Collector configuration\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        host\n                                \n                                \n                                            Optional\n                                        port\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        host\n                                    \n                                \n                                \n                                    \n                                        host:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    host \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        port\n                                    \n                                \n                                \n                                    \n                                        port:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    port \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { InjectionToken } from '@angular/core';\n\nexport enum Collector {\n  jaeger = 'jaeger',\n  zipkin = 'zipkin',\n  otelcol = 'otelcol',\n}\n\nexport enum Propagator {\n  b3 = 'B3Propagator',\n  httpTrace = 'HttpTraceContext',\n}\n\n/**\n * Common configuration\n */\nexport interface CommonCollectorConfig {\n  /** serviceName : Name of service in trace */\n  serviceName: string;\n  /** console : boolean to trace in console */\n  console?:boolean;\n  /** production : boolean to use a BatchSpanExporter(async) or SimpleSpanExporter(sync) */\n  production?:boolean;\n  /** collector */\n  collector: Collector;\n  /** propagator */\n  propagator: Propagator;\n}\n\n\n/**\n * OpenTelemetry Collector configuration\n */\nexport interface OtelCollectorConfig {\n  /**\n   * An url (Default value: http://localhost:9090/v1/trace)\n   */\n  url?: string;\n}\n\n/**\n * Jaeger Collector configuration\n */\nexport interface JaegerCollectorConfig {\n  /** host */\n  host?: string;\n  /** port */\n  port?: number;\n}\n\n/**\n * Configuration for Zipkin\n */\nexport interface ZipkinCollectorConfig {\n  /**\n   * An url (Default value: http://localhost:9411/api/v2/spans)\n   */\n  url?: string;\n}\n/**\n * OpenTelemetryConfig\n */\nexport interface OpenTelemetryConfig {\n  /** commonConfig */\n  commonConfig: CommonCollectorConfig;\n  /** jaegerConfig */\n  jaegerConfig?: JaegerCollectorConfig;\n  /** zipkinConfig */\n  zipkinConfig?: ZipkinCollectorConfig;\n  /** otelcolConfig */\n  otelcolConfig?: OtelCollectorConfig;\n}\n\n/** OpenTelemetryInjectConfig : Config injection */\nexport const OpenTelemetryInjectConfig = new InjectionToken('opentelemetry.config');\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JaegerExporterService.html":{"url":"injectables/JaegerExporterService.html","title":"injectable - JaegerExporterService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JaegerExporterService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/services/exporter/jaeger-exporter.service.ts\n        \n\n            \n                Description\n            \n            \n                JaegerExporterService class\nJaegerExporter isn't operationnal for the moment in web application.\nit's present if one day..\nFor the moment return a ConsoleSpanExporter\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getExporter\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: OpenTelemetryConfig)\n                    \n                \n                        \n                            \n                                Defined in projects/opentelemetry-interceptor/src/lib/services/exporter/jaeger-exporter.service.ts:18\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        OpenTelemetryConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                OpenTelemetryConfig\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getExporter\n                        \n                        \n                    \n                \n            \n            \n                \ngetExporter()\n                \n            \n\n\n            \n                \n                    Defined in projects/opentelemetry-interceptor/src/lib/services/exporter/jaeger-exporter.service.ts:37\n                \n            \n\n\n            \n                \n                    Return for the moment a ConsoleSpanExporter\n\n\n                    \n                    \n                    \n                        Returns :     SpanExporter\n\n                    \n                    \n                        SpanExporter\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@angular/core';\nimport {\n  OpenTelemetryConfig,\n  OpenTelemetryInjectConfig,\n} from '../../configuration/opentelemetry-config';\nimport { IExporter } from './exporter.interface';\nimport { SpanExporter, ConsoleSpanExporter } from '@opentelemetry/tracing';\n\n/**\n * JaegerExporterService class\n * JaegerExporter isn't operationnal for the moment in web application.\n * it's present if one day..\n * For the moment return a ConsoleSpanExporter\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JaegerExporterService implements IExporter {\n  //private configJaeger: ExporterConfig;\n\n  /**\n   * constructor\n   * @param config OpenTelemetryConfig\n   */\n  constructor(@Inject(OpenTelemetryInjectConfig) config: OpenTelemetryConfig) {\n    /*this.configJaeger = {\n      serviceName: config.commonConfig.serviceName,\n      host: config.jaegerConfig.host,\n      port: config.jaegerConfig.port,\n    };*/\n  }\n\n  /**\n   * Return for the moment a ConsoleSpanExporter\n   * @return SpanExporter\n   */\n  getExporter(): SpanExporter {\n    return new ConsoleSpanExporter();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OpenTelemetryConfig.html":{"url":"interfaces/OpenTelemetryConfig.html","title":"interface - OpenTelemetryConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  OpenTelemetryConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/configuration/opentelemetry-config.ts\n        \n\n            \n                Description\n            \n            \n                OpenTelemetryConfig\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        commonConfig\n                                \n                                \n                                            Optional\n                                        jaegerConfig\n                                \n                                \n                                            Optional\n                                        otelcolConfig\n                                \n                                \n                                            Optional\n                                        zipkinConfig\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        commonConfig\n                                    \n                                \n                                \n                                    \n                                        commonConfig:         CommonCollectorConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CommonCollectorConfig\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    commonConfig \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        jaegerConfig\n                                    \n                                \n                                \n                                    \n                                        jaegerConfig:         JaegerCollectorConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         JaegerCollectorConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    jaegerConfig \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        otelcolConfig\n                                    \n                                \n                                \n                                    \n                                        otelcolConfig:         OtelCollectorConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         OtelCollectorConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    otelcolConfig \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        zipkinConfig\n                                    \n                                \n                                \n                                    \n                                        zipkinConfig:         ZipkinCollectorConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ZipkinCollectorConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    zipkinConfig \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { InjectionToken } from '@angular/core';\n\nexport enum Collector {\n  jaeger = 'jaeger',\n  zipkin = 'zipkin',\n  otelcol = 'otelcol',\n}\n\nexport enum Propagator {\n  b3 = 'B3Propagator',\n  httpTrace = 'HttpTraceContext',\n}\n\n/**\n * Common configuration\n */\nexport interface CommonCollectorConfig {\n  /** serviceName : Name of service in trace */\n  serviceName: string;\n  /** console : boolean to trace in console */\n  console?:boolean;\n  /** production : boolean to use a BatchSpanExporter(async) or SimpleSpanExporter(sync) */\n  production?:boolean;\n  /** collector */\n  collector: Collector;\n  /** propagator */\n  propagator: Propagator;\n}\n\n\n/**\n * OpenTelemetry Collector configuration\n */\nexport interface OtelCollectorConfig {\n  /**\n   * An url (Default value: http://localhost:9090/v1/trace)\n   */\n  url?: string;\n}\n\n/**\n * Jaeger Collector configuration\n */\nexport interface JaegerCollectorConfig {\n  /** host */\n  host?: string;\n  /** port */\n  port?: number;\n}\n\n/**\n * Configuration for Zipkin\n */\nexport interface ZipkinCollectorConfig {\n  /**\n   * An url (Default value: http://localhost:9411/api/v2/spans)\n   */\n  url?: string;\n}\n/**\n * OpenTelemetryConfig\n */\nexport interface OpenTelemetryConfig {\n  /** commonConfig */\n  commonConfig: CommonCollectorConfig;\n  /** jaegerConfig */\n  jaegerConfig?: JaegerCollectorConfig;\n  /** zipkinConfig */\n  zipkinConfig?: ZipkinCollectorConfig;\n  /** otelcolConfig */\n  otelcolConfig?: OtelCollectorConfig;\n}\n\n/** OpenTelemetryInjectConfig : Config injection */\nexport const OpenTelemetryInjectConfig = new InjectionToken('opentelemetry.config');\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interceptors/OpenTelemetryInterceptor.html":{"url":"interceptors/OpenTelemetryInterceptor.html","title":"interceptor - OpenTelemetryInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Interceptors\n  OpenTelemetryInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/interceptor/opentelemetry.interceptor.ts\n        \n\n            \n                Description\n            \n            \n                OpenTelemetryInterceptor class\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                contextManager\n                            \n                            \n                                tracer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                initSpan\n                            \n                            \n                                    Private\n                                injectContextAndHeader\n                            \n                            \n                                    Private\n                                insertConsoleSpanExporter\n                            \n                            \n                                    Private\n                                insertSpanProcessorProductionMode\n                            \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: OpenTelemetryConfig, spanExporterService: SpanExporterService, httpTextPropagatorService: HttpTextPropagatorService)\n                    \n                \n                        \n                            \n                                Defined in projects/opentelemetry-interceptor/src/lib/interceptor/opentelemetry.interceptor.ts:43\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        OpenTelemetryConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        spanExporterService\n                                                  \n                                                        \n                                                                        SpanExporterService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        httpTextPropagatorService\n                                                  \n                                                        \n                                                                        HttpTextPropagatorService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            initSpan\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initSpan(request: HttpRequest)\n                \n            \n\n\n            \n                \n                    Defined in projects/opentelemetry-interceptor/src/lib/interceptor/opentelemetry.interceptor.ts:109\n                \n            \n\n\n            \n                \n                    Initialise a span for a request intercepted\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            HttpRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     api.Span\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            injectContextAndHeader\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    injectContextAndHeader(span: api.Span, request: HttpRequest)\n                \n            \n\n\n            \n                \n                    Defined in projects/opentelemetry-interceptor/src/lib/interceptor/opentelemetry.interceptor.ts:134\n                \n            \n\n\n            \n                \n                    Add header propagator in request and conserve original header\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    span\n                                    \n                                            api.Span\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                            HttpRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            insertConsoleSpanExporter\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    insertConsoleSpanExporter(console: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/opentelemetry-interceptor/src/lib/interceptor/opentelemetry.interceptor.ts:156\n                \n            \n\n\n            \n                \n                    Insert in tracer the console span if config is true\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    console\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        config to insert console span\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            insertSpanProcessorProductionMode\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    insertSpanProcessorProductionMode(production: boolean, spanExporter: SpanExporter)\n                \n            \n\n\n            \n                \n                    Defined in projects/opentelemetry-interceptor/src/lib/interceptor/opentelemetry.interceptor.ts:170\n                \n            \n\n\n            \n                \n                    Insert BatchSpanProcessor in production mode\nSimpleSpanProcessor otherwise\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    production\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        mode\n\n                                    \n                                \n                                \n                                    spanExporter\n                                    \n                                            SpanExporter\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(request: HttpRequest, next: HttpHandler)\n                \n            \n\n\n            \n                \n                    Defined in projects/opentelemetry-interceptor/src/lib/interceptor/opentelemetry.interceptor.ts:78\n                \n            \n\n\n            \n                \n                    Overide method\nInterceptor from HttpInterceptor Angular\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            HttpRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                HttpHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            contextManager\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new StackContextManager()\n                        \n                    \n                        \n                            \n                                    Defined in projects/opentelemetry-interceptor/src/lib/interceptor/opentelemetry.interceptor.ts:43\n                            \n                        \n\n                \n                    \n                        context manager\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tracer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     WebTracerProvider\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/opentelemetry-interceptor/src/lib/interceptor/opentelemetry.interceptor.ts:39\n                            \n                        \n\n                \n                    \n                        tracer\n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpResponse,\n  HttpErrorResponse,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport * as api from '@opentelemetry/api';\nimport { WebTracerProvider, StackContextManager } from '@opentelemetry/web';\nimport {\n  SimpleSpanProcessor,\n  ConsoleSpanExporter,\n  BatchSpanProcessor,\n  SpanExporter,\n  SpanProcessor,\n} from '@opentelemetry/tracing';\nimport { ALWAYS_SAMPLER, setActiveSpan } from '@opentelemetry/core';\nimport { tap, finalize } from 'rxjs/operators';\nimport {\n  OpenTelemetryConfig,\n  OpenTelemetryInjectConfig,\n} from '../configuration/opentelemetry-config';\nimport { SpanExporterService } from '../services/exporter/span-exporter.service';\nimport { HttpTextPropagatorService } from '../services/propagator/http-text-propagator.service';\n\n/**\n * OpenTelemetryInterceptor class\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class OpenTelemetryInterceptor implements HttpInterceptor {\n  /**\n   * tracer\n   */\n  tracer: WebTracerProvider;\n  /**\n   * context manager\n   */\n  contextManager = new StackContextManager();\n\n  /**\n   * constructor\n   * @param config\n   * @param spanExporterService\n   * @param httpTextPropagatorService\n   */\n  constructor(\n    @Inject(OpenTelemetryInjectConfig) private config: OpenTelemetryConfig,\n    @Inject(SpanExporterService)\n    private spanExporterService: SpanExporterService,\n    @Inject(HttpTextPropagatorService)\n    private httpTextPropagatorService: HttpTextPropagatorService\n  ) {\n    this.tracer = new WebTracerProvider({\n      sampler: ALWAYS_SAMPLER,\n    });\n    this.insertSpanProcessorProductionMode(\n      this.config.commonConfig.production,\n      this.spanExporterService.getExporter()\n    );\n    this.insertConsoleSpanExporter(this.config.commonConfig.console);\n    this.tracer.register({\n      propagator: this.httpTextPropagatorService.getPropagator(),\n      contextManager: this.contextManager,\n    });\n  }\n\n  /**\n   * Overide method\n   * Interceptor from HttpInterceptor Angular\n   * @param request\n   * @param next\n   */\n  intercept(\n    request: HttpRequest,\n    next: HttpHandler\n  ): Observable> {\n    const span: api.Span = this.initSpan(request);\n    const tracedReq = this.injectContextAndHeader(span, request);\n    return next.handle(tracedReq).pipe(\n      tap(\n        (event: HttpEvent) => {\n          if (event instanceof HttpResponse) {\n            span.setAttribute('http.status_code', event.status);\n            span.addEvent('response', { body: JSON.stringify(event.body) });\n          }\n        },\n        (event: HttpErrorResponse) => {\n          if (event instanceof HttpErrorResponse) {\n            span.setAttribute('http.status_code', event.status);\n            span.addEvent('error', { body: JSON.stringify(event.error) });\n          }\n        }\n      ),\n      finalize(() => {\n        span.end();\n      })\n    );\n  }\n\n  /**\n   * Initialise a span for a request intercepted\n   * @param request\n   */\n  private initSpan(request: HttpRequest): api.Span {\n    const span = this.tracer\n      .getTracer('angular-interceptor', '0.0.1')\n      .startSpan(\n        request.url,\n        {\n          attributes: {\n            ['http.method']: request.method,\n            ['http.url']: request.urlWithParams,\n          },\n        },\n        this.contextManager.active()\n      );\n    this.contextManager._currentContext = setActiveSpan(\n      this.contextManager.active(),\n      span\n    );\n    return span;\n  }\n\n  /**\n   * Add header propagator in request and conserve original header\n   * @param span\n   * @param request\n   */\n  private injectContextAndHeader(\n    span: api.Span,\n    request: HttpRequest\n  ) {\n    const carrier = {};\n    api.propagation.inject(\n      carrier,\n      api.defaultSetter,\n      this.contextManager.active()\n    );\n    for (let key in request.headers.keys) {\n      carrier[key] = request.headers.get(key);\n    }\n    return request.clone({\n      setHeaders: carrier,\n    });\n  }\n\n  /**\n   * Insert in tracer the console span if config is true\n   * @param console config to insert console span\n   */\n  private insertConsoleSpanExporter(console: boolean) {\n    if (console) {\n      this.tracer.addSpanProcessor(\n        new SimpleSpanProcessor(new ConsoleSpanExporter())\n      );\n    }\n  }\n\n  /**\n   * Insert BatchSpanProcessor in production mode\n   * SimpleSpanProcessor otherwise\n   * @param production mode\n   * @param spanExporter\n   */\n  private insertSpanProcessorProductionMode(\n    production: boolean,\n    spanExporter: SpanExporter\n  ) {\n    let spanProcessor: SpanProcessor = null;\n    if (production) {\n      spanProcessor = new BatchSpanProcessor(spanExporter);\n    } else {\n      spanProcessor = new SimpleSpanProcessor(spanExporter);\n    }\n    this.tracer.addSpanProcessor(spanProcessor);\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OpenTelemetryInterceptorModule.html":{"url":"modules/OpenTelemetryInterceptorModule.html","title":"module - OpenTelemetryInterceptorModule","body":"\n                   \n\n\n\n\n    Modules\n    OpenTelemetryInterceptorModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/opentelemetry-interceptor.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRoot\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(config: OpenTelemetryConfig)\n                \n            \n\n\n            \n                \n                    Defined in projects/opentelemetry-interceptor/src/lib/opentelemetry-interceptor.module.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                OpenTelemetryConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ModuleWithProviders\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import {\n  NgModule,\n  ModuleWithProviders,\n  Optional,\n  SkipSelf,\n} from '@angular/core';\nimport {\n  OpenTelemetryConfig,\n  OpenTelemetryInjectConfig,\n} from './configuration/opentelemetry-config';\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\nimport { OpenTelemetryInterceptor } from './interceptor/opentelemetry.interceptor';\n\n@NgModule({\n  declarations: [],\n  imports: [HttpClientModule],\n  exports: [],\n})\nexport class OpenTelemetryInterceptorModule {\n  constructor(\n    @Optional() @SkipSelf() parentModule?: OpenTelemetryInterceptorModule\n  ) {\n    if (parentModule) {\n      throw new Error(\n        'OpentelemetryInterceptorModule is already loaded. Import it in the AppModule only'\n      );\n    }\n  }\n\n  public static forRoot(config: OpenTelemetryConfig): ModuleWithProviders {\n    return {\n      ngModule: OpenTelemetryInterceptorModule,\n      providers: [\n        { provide: OpenTelemetryInjectConfig, useValue: config },\n        {\n          provide: HTTP_INTERCEPTORS,\n          useClass: OpenTelemetryInterceptor,\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OtelCollectorConfig.html":{"url":"interfaces/OtelCollectorConfig.html","title":"interface - OtelCollectorConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  OtelCollectorConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/configuration/opentelemetry-config.ts\n        \n\n            \n                Description\n            \n            \n                OpenTelemetry Collector configuration\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        url\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An url (Default value: http://localhost:9090/v1/trace)\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { InjectionToken } from '@angular/core';\n\nexport enum Collector {\n  jaeger = 'jaeger',\n  zipkin = 'zipkin',\n  otelcol = 'otelcol',\n}\n\nexport enum Propagator {\n  b3 = 'B3Propagator',\n  httpTrace = 'HttpTraceContext',\n}\n\n/**\n * Common configuration\n */\nexport interface CommonCollectorConfig {\n  /** serviceName : Name of service in trace */\n  serviceName: string;\n  /** console : boolean to trace in console */\n  console?:boolean;\n  /** production : boolean to use a BatchSpanExporter(async) or SimpleSpanExporter(sync) */\n  production?:boolean;\n  /** collector */\n  collector: Collector;\n  /** propagator */\n  propagator: Propagator;\n}\n\n\n/**\n * OpenTelemetry Collector configuration\n */\nexport interface OtelCollectorConfig {\n  /**\n   * An url (Default value: http://localhost:9090/v1/trace)\n   */\n  url?: string;\n}\n\n/**\n * Jaeger Collector configuration\n */\nexport interface JaegerCollectorConfig {\n  /** host */\n  host?: string;\n  /** port */\n  port?: number;\n}\n\n/**\n * Configuration for Zipkin\n */\nexport interface ZipkinCollectorConfig {\n  /**\n   * An url (Default value: http://localhost:9411/api/v2/spans)\n   */\n  url?: string;\n}\n/**\n * OpenTelemetryConfig\n */\nexport interface OpenTelemetryConfig {\n  /** commonConfig */\n  commonConfig: CommonCollectorConfig;\n  /** jaegerConfig */\n  jaegerConfig?: JaegerCollectorConfig;\n  /** zipkinConfig */\n  zipkinConfig?: ZipkinCollectorConfig;\n  /** otelcolConfig */\n  otelcolConfig?: OtelCollectorConfig;\n}\n\n/** OpenTelemetryInjectConfig : Config injection */\nexport const OpenTelemetryInjectConfig = new InjectionToken('opentelemetry.config');\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OtelcolExporterService.html":{"url":"injectables/OtelcolExporterService.html","title":"injectable - OtelcolExporterService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  OtelcolExporterService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/services/exporter/otelcol-exporter.service.ts\n        \n\n            \n                Description\n            \n            \n                OtelcolExporterService class\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                otelcolConfig\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getExporter\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: OpenTelemetryConfig)\n                    \n                \n                        \n                            \n                                Defined in projects/opentelemetry-interceptor/src/lib/services/exporter/otelcol-exporter.service.ts:23\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        OpenTelemetryConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                OpenTelemetryConfig\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getExporter\n                        \n                        \n                    \n                \n            \n            \n                \ngetExporter()\n                \n            \n\n\n            \n                \n                    Defined in projects/opentelemetry-interceptor/src/lib/services/exporter/otelcol-exporter.service.ts:40\n                \n            \n\n\n            \n                \n                    Return a CollectorExporter with the configuration\n\n\n                    \n                    \n                    \n                        Returns :     SpanExporter\n\n                    \n                    \n                        a CollectorExporter\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            otelcolConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         CollectorExporterConfig\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/opentelemetry-interceptor/src/lib/services/exporter/otelcol-exporter.service.ts:23\n                            \n                        \n\n                \n                    \n                        CollectorExporterConfig\n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@angular/core';\nimport { IExporter } from './exporter.interface';\nimport { SpanExporter } from '@opentelemetry/tracing';\nimport {\n  OpenTelemetryConfig,\n  OpenTelemetryInjectConfig,\n} from '../../configuration/opentelemetry-config';\nimport {\n  CollectorExporterConfig,\n  CollectorExporter,\n} from '@opentelemetry/exporter-collector';\n\n/**\n * OtelcolExporterService class\n */\n@Injectable({\n  providedIn: \"root\",\n})\nexport class OtelcolExporterService implements IExporter {\n  /**\n   * CollectorExporterConfig\n   */\n  private otelcolConfig: CollectorExporterConfig;\n\n  /**\n   * constructor\n   * @param config OpenTelemetryConfig\n   */\n  constructor(@Inject(OpenTelemetryInjectConfig) config: OpenTelemetryConfig) {\n    this.otelcolConfig = {\n      serviceName: config.commonConfig.serviceName,\n      url: config.otelcolConfig?.url,\n    };\n  }\n\n  /**\n   * Return a CollectorExporter with the configuration\n   * @return a CollectorExporter\n   */\n  getExporter(): SpanExporter {\n    return new CollectorExporter(this.otelcolConfig);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SpanExporterService.html":{"url":"injectables/SpanExporterService.html","title":"injectable - SpanExporterService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  SpanExporterService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/services/exporter/span-exporter.service.ts\n        \n\n            \n                Description\n            \n            \n                An Angular Factory to have the configured collector\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getExporter\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getExporter\n                        \n                        \n                    \n                \n            \n            \n                \ngetExporter()\n                \n            \n\n\n            \n                \n                    Defined in projects/opentelemetry-interceptor/src/lib/services/exporter/span-exporter.service.ts:31\n                \n            \n\n\n            \n                \n                    Not used in a factory, just a definition\n\n\n                    \n                        Returns :     SpanExporter\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { SpanExporter } from '@opentelemetry/tracing';\nimport { IExporter } from './exporter.interface';\nimport { Injectable } from '@angular/core';\nimport { JaegerExporterService } from './jaeger-exporter.service';\nimport { OtelcolExporterService } from './otelcol-exporter.service';\nimport { ZipkinExporterService } from './zipkin-exporter.service';\nimport {\n  OpenTelemetryConfig,\n  Collector,\n  OpenTelemetryInjectConfig,\n} from '../../configuration/opentelemetry-config';\n\n\n/**\n * An Angular Factory to have the configured collector\n */\n@Injectable({\n  providedIn: \"root\",\n  useFactory: spanExporterServiceFactory,\n  deps: [\n    OpenTelemetryInjectConfig,\n    JaegerExporterService,\n    OtelcolExporterService,\n    ZipkinExporterService,\n  ],\n})\nexport class SpanExporterService implements IExporter {\n  /**\n   * Not used in a factory, just a definition\n   */\n  getExporter(): SpanExporter {\n    //factory\n    console.error(\"error\");\n    return undefined;\n  }\n}\n\n/**\n * Factory to return Service configured\n * @param config\n * @param jaegerExporterService\n * @param otelcolExporterService\n * @param zipkinExporterService\n */\nexport function spanExporterServiceFactory(\n  config: OpenTelemetryConfig,\n  jaegerExporterService: JaegerExporterService,\n  otelcolExporterService: OtelcolExporterService,\n  zipkinExporterService: ZipkinExporterService\n) {\n  let exporter: IExporter = null;\n  switch (config.commonConfig.collector) {\n    case Collector.jaeger:\n      exporter = jaegerExporterService;\n      break;\n    case Collector.otelcol:\n      exporter = otelcolExporterService;\n      break;\n    case Collector.zipkin:\n      exporter = zipkinExporterService;\n      break;\n    default:\n      break;\n  }\n  return exporter;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ZipkinCollectorConfig.html":{"url":"interfaces/ZipkinCollectorConfig.html","title":"interface - ZipkinCollectorConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ZipkinCollectorConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/configuration/opentelemetry-config.ts\n        \n\n            \n                Description\n            \n            \n                Configuration for Zipkin\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        url\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An url (Default value: http://localhost:9411/api/v2/spans)\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { InjectionToken } from '@angular/core';\n\nexport enum Collector {\n  jaeger = 'jaeger',\n  zipkin = 'zipkin',\n  otelcol = 'otelcol',\n}\n\nexport enum Propagator {\n  b3 = 'B3Propagator',\n  httpTrace = 'HttpTraceContext',\n}\n\n/**\n * Common configuration\n */\nexport interface CommonCollectorConfig {\n  /** serviceName : Name of service in trace */\n  serviceName: string;\n  /** console : boolean to trace in console */\n  console?:boolean;\n  /** production : boolean to use a BatchSpanExporter(async) or SimpleSpanExporter(sync) */\n  production?:boolean;\n  /** collector */\n  collector: Collector;\n  /** propagator */\n  propagator: Propagator;\n}\n\n\n/**\n * OpenTelemetry Collector configuration\n */\nexport interface OtelCollectorConfig {\n  /**\n   * An url (Default value: http://localhost:9090/v1/trace)\n   */\n  url?: string;\n}\n\n/**\n * Jaeger Collector configuration\n */\nexport interface JaegerCollectorConfig {\n  /** host */\n  host?: string;\n  /** port */\n  port?: number;\n}\n\n/**\n * Configuration for Zipkin\n */\nexport interface ZipkinCollectorConfig {\n  /**\n   * An url (Default value: http://localhost:9411/api/v2/spans)\n   */\n  url?: string;\n}\n/**\n * OpenTelemetryConfig\n */\nexport interface OpenTelemetryConfig {\n  /** commonConfig */\n  commonConfig: CommonCollectorConfig;\n  /** jaegerConfig */\n  jaegerConfig?: JaegerCollectorConfig;\n  /** zipkinConfig */\n  zipkinConfig?: ZipkinCollectorConfig;\n  /** otelcolConfig */\n  otelcolConfig?: OtelCollectorConfig;\n}\n\n/** OpenTelemetryInjectConfig : Config injection */\nexport const OpenTelemetryInjectConfig = new InjectionToken('opentelemetry.config');\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ZipkinExporterService.html":{"url":"injectables/ZipkinExporterService.html","title":"injectable - ZipkinExporterService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ZipkinExporterService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/opentelemetry-interceptor/src/lib/services/exporter/zipkin-exporter.service.ts\n        \n\n            \n                Description\n            \n            \n                ZipkinExporter isn't operationnal for the moment in web application.\nit's present if one day..\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getExporter\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: OpenTelemetryConfig)\n                    \n                \n                        \n                            \n                                Defined in projects/opentelemetry-interceptor/src/lib/services/exporter/zipkin-exporter.service.ts:17\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        OpenTelemetryConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                OpenTelemetryConfig\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getExporter\n                        \n                        \n                    \n                \n            \n            \n                \ngetExporter()\n                \n            \n\n\n            \n                \n                    Defined in projects/opentelemetry-interceptor/src/lib/services/exporter/zipkin-exporter.service.ts:35\n                \n            \n\n\n            \n                \n                    Return for the moment a ConsoleSpanExporter\n\n\n                    \n                    \n                    \n                        Returns :     SpanExporter\n\n                    \n                    \n                        SpanExporter\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@angular/core';\nimport { IExporter } from './exporter.interface';\nimport {\n  OpenTelemetryConfig,\n  OpenTelemetryInjectConfig,\n} from '../../configuration/opentelemetry-config';\nimport { SpanExporter, ConsoleSpanExporter } from '@opentelemetry/tracing';\n\n\n/**\n * ZipkinExporter isn't operationnal for the moment in web application.\n * it's present if one day..\n */\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ZipkinExporterService implements IExporter {\n  //private zipkinConfig: ExporterConfig;\n\n  /**\n   * constructor\n   * @param config OpenTelemetryConfig\n   */\n  constructor(@Inject(OpenTelemetryInjectConfig) config: OpenTelemetryConfig) {\n    /*this.zipkinConfig = {\n      serviceName: config.commonConfig.serviceName,\n      url: config.zipkinConfig.url,\n    };*/\n  }\n\n  /**\n   * Return for the moment a ConsoleSpanExporter\n   * @return SpanExporter\n   */\n  getExporter(): SpanExporter {\n    return new ConsoleSpanExporter();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/configuration/opentelemetry-config.ts\n            \n            interface\n            CommonCollectorConfig\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/configuration/opentelemetry-config.ts\n            \n            interface\n            JaegerCollectorConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/configuration/opentelemetry-config.ts\n            \n            interface\n            OpenTelemetryConfig\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/configuration/opentelemetry-config.ts\n            \n            interface\n            OtelCollectorConfig\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/configuration/opentelemetry-config.ts\n            \n            interface\n            ZipkinCollectorConfig\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/configuration/opentelemetry-config.ts\n            \n            variable\n            OpenTelemetryInjectConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/interceptor/opentelemetry.interceptor.ts\n            \n            interceptor\n            OpenTelemetryInterceptor\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/services/exporter/exporter.interface.ts\n            \n            interface\n            IExporter\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/services/exporter/jaeger-exporter.service.ts\n            \n            injectable\n            JaegerExporterService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/services/exporter/otelcol-exporter.service.ts\n            \n            injectable\n            OtelcolExporterService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/services/exporter/span-exporter.service.ts\n            \n            injectable\n            SpanExporterService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/services/exporter/span-exporter.service.ts\n            \n            function\n            spanExporterServiceFactory\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/services/exporter/zipkin-exporter.service.ts\n            \n            injectable\n            ZipkinExporterService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/services/propagator/b3-propagator.service.ts\n            \n            injectable\n            B3PropagatorService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/services/propagator/http-text-propagator.service.ts\n            \n            injectable\n            HttpTextPropagatorService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/services/propagator/http-text-propagator.service.ts\n            \n            function\n            httpTextPropagatorServiceFactory\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/services/propagator/http-trace-context-propagator.service.ts\n            \n            injectable\n            HttpTraceContextPropagatorService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/opentelemetry-interceptor/src/lib/services/propagator/propagator.interface.ts\n            \n            interface\n            IPropagator\n            \n                100 %\n                (2/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^9.1.9\n        \n            @angular/cdk : ^9.2.4\n        \n            @angular/common : ^9.1.9\n        \n            @angular/compiler : ^9.1.9\n        \n            @angular/core : ^9.1.9\n        \n            @angular/forms : ^9.1.9\n        \n            @angular/material : ^9.2.4\n        \n            @angular/platform-browser : ^9.1.9\n        \n            @angular/platform-browser-dynamic : ^9.1.9\n        \n            @angular/router : ^9.1.9\n        \n            @opentelemetry/exporter-collector : ^0.8.2\n        \n            @opentelemetry/web : ^0.8.2\n        \n            body-parser : ^1.19.0\n        \n            concurrently : ^5.2.0\n        \n            ngx-highlight-js : ^9.0.0\n        \n            rxjs : ~6.5.4\n        \n            tslib : ^1.13.0\n        \n            zone.js : ~0.10.2\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Collector   (projects/.../opentelemetry-config.ts)\n                        \n                        \n                            Propagator   (projects/.../opentelemetry-config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/opentelemetry-interceptor/src/lib/configuration/opentelemetry-config.ts\n    \n        \n            \n                \n                    \n                        \n                        Collector\n                    \n                \n                        \n                            \n                                 jaeger\n                            \n                        \n                        \n                            \n                                Value : jaeger\n                            \n                        \n                        \n                            \n                                 zipkin\n                            \n                        \n                        \n                            \n                                Value : zipkin\n                            \n                        \n                        \n                            \n                                 otelcol\n                            \n                        \n                        \n                            \n                                Value : otelcol\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        Propagator\n                    \n                \n                        \n                            \n                                 b3\n                            \n                        \n                        \n                            \n                                Value : B3Propagator\n                            \n                        \n                        \n                            \n                                 httpTrace\n                            \n                        \n                        \n                            \n                                Value : HttpTraceContext\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            httpTextPropagatorServiceFactory   (projects/.../http-text-propagator.service.ts)\n                        \n                        \n                            spanExporterServiceFactory   (projects/.../span-exporter.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/opentelemetry-interceptor/src/lib/services/propagator/http-text-propagator.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            httpTextPropagatorServiceFactory\n                        \n                        \n                    \n                \n            \n            \n                \nhttpTextPropagatorServiceFactory(config, httpTraceContextPropagatorService, b3PropagatorService)\n                \n            \n\n\n\n\n            \n                \n                    httpTextPropagatorServiceFactory\nProvide a factory to have a propagator service\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    httpTraceContextPropagatorService\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    b3PropagatorService\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    projects/opentelemetry-interceptor/src/lib/services/exporter/span-exporter.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            spanExporterServiceFactory\n                        \n                        \n                    \n                \n            \n            \n                \nspanExporterServiceFactory(config, jaegerExporterService, otelcolExporterService, zipkinExporterService)\n                \n            \n\n\n\n\n            \n                \n                    Factory to return Service configured\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    jaegerExporterService\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    otelcolExporterService\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    zipkinExporterService\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nOpenTelemetry Angular Interceptor\nAbout\n@jufab/opentelemetry-angular-interceptor is an Angular Library to deploy OpenTelemetry in your Angular application\nGetting started\nInstallation\nWith npm :\nnpm i -P @jufab/opentelemetry-angular-interceptorWith angular-cli :\nng add @jufab/opentelemetry-angular-interceptorConfiguration\nUse the \"OpentelemetryConfig\" interface to configure the Tracer\nexport interface OpentelemetryConfig {\n  commonConfig: CommonCollectorConfig;\n  jaegerConfig?: JaegerCollectorConfig;\n  zipkinConfig?: ZipkinCollectorConfig;\n  otelcolConfig?: OtelCollectorConfig;\n}Example global Configuration\nFrom the example-app\nopentelemetryConfig: {\n    commonConfig: {\n      console: true, //(boolean) Display trace on console\n      production: false, //(boolean) Send trace with BatchSpanProcessor (true) or SimpleSpanProcessor (false) more info : https://github.com/open-telemetry/opentelemetry-js/tree/master/packages/opentelemetry-api#tracing\n      serviceName: 'example-app', //Service name send in trace\n      collector: Collector.otelcol, //Enum to specified the collector : OpenTelemetry Collector(otelcol), Zipkin (zipkin), Jaeger (jaeger)\n      propagator: Propagator.b3, //Enum to propagator : B3 (b3), HttpTraceContext (httpTrace)\n    },\n    otelcolConfig: {\n      url: 'http://localhost:9090/v1/trace', //URL of opentelemetry collector\n    },\n    zipkinConfig: {\n      url: 'http://localhost:9411/api/v2/spans', //url of zipkin collector\n    },\n    jaegerConfig: {\n      host: 'localhost', //Host and port of jaeger's agent.\n      port: 6832,\n    }\n  }\nCommon Configuration\n\nconsole: (boolean) Display trace on console if true\nproduction: (boolean)Send trace via BatchSpanProcessor (Async) or SimpleSpanProcessor (Sync) : It's recommend to use BatchSpanProcessor on Production.\nserviceName: (string) Service name in your trace\ncollector: (Enum) use Enum Collector (otelcol,zipkin,jaeger)\npropagator: (Enum) use Propagator Enum (b3,httpTrace)\n\nOpenTelemetry-collector Configuration\n\nurl: (string) url of opentelemetry collector (default : http://localhost:9090/v1/trace)\n\nZipkin Collector Configuration\n\nurl: (string) url of zipkin collector (default : http://localhost:9411/api/v2/spans)\n\nJaeger Collector Configuration\n\nhost: (string) host jaeger agent\nport: (string) port jaeger agent\n\nExample\n\"example-app\" is an Angular application .....\nRun\nTo start this Example application, run command :\nnpm run start:complete-example-app[Optional] Result in OpenTelemtery-collector\nIf you want to see the result in a collector*, there's a docker-compose in this project.\nyou can start it with this command :\ndocker-compose -f projects/example-app/collector/docker-compose.yaml up -dAnd you can see the result of your generate trace in Jaeger (http://localhost:16686)\nMore info about the collector here : https://github.com/open-telemetry/opentelemetry-collector\n* Note : without an Agent or a Collector you can see an error in your browser about send a \"trace\".\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        OpenTelemetryInterceptorModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"todo.html":{"url":"todo.html","title":"getting-started - todo","body":"\n                   \n\nTask for opentelemetry-angular-interceptor\nTodo in project...\nTodo\n\n Add sampler in configuration => here  \n Add more configuration for OpenTelemetry-collector : See here  \n Add composite propagator  \n Zipkin  \n Add Zipkin exporter (when it's available)  \n Add more configuration for Zipkin : here  \n\n\n Jaeger  \n Add Jaeger exporter (when it's available)  \n Add more configuration for Jaeger : here  \n\n\n\nIn Progress\nDone ✓\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            OpenTelemetryInjectConfig   (projects/.../opentelemetry-config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/opentelemetry-interceptor/src/lib/configuration/opentelemetry-config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            OpenTelemetryInjectConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new InjectionToken('opentelemetry.config')\n                        \n                    \n\n                \n                    \n                        OpenTelemetryInjectConfig : Config injection \n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
